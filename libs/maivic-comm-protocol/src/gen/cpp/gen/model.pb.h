// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gen/model.proto

#ifndef PROTOBUF_gen_2fmodel_2eproto__INCLUDED
#define PROTOBUF_gen_2fmodel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gen_2fmodel_2eproto();
void protobuf_AssignDesc_gen_2fmodel_2eproto();
void protobuf_ShutdownFile_gen_2fmodel_2eproto();

class Address;
class DeliveryPlaceSpecification;
class LegalEntity;
class Meeting;
class Location;
class Delivery;
class Device;
class Image;
class Order;
class Contact;
class OrderEntry;
class MeetingsToContact;
class DeliveryPlace;
class Invoice;
class Offer;
class Building;
class PaymentsToOrder;
class Decimal;
class Interval;
class Menu;
class PlaceType;
class InvoicesToContact;
class GeometryColumn;
class Receipt;
class SpatialRefSy;
class ContactsToLegalEntity;
class OfferOption;
class Client;
class MenuOption;
class Payment;
class RestaurantsToContact;
class MenuEntry;
class Restaurant;

// ===================================================================

class Address : public ::google::protobuf::Message {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  void Swap(Address* other);

  // implements Message ----------------------------------------------

  Address* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string street = 2;
  inline bool has_street() const;
  inline void clear_street();
  static const int kStreetFieldNumber = 2;
  inline const ::std::string& street() const;
  inline void set_street(const ::std::string& value);
  inline void set_street(const char* value);
  inline void set_street(const char* value, size_t size);
  inline ::std::string* mutable_street();
  inline ::std::string* release_street();
  inline void set_allocated_street(::std::string* street);

  // optional string zone = 3;
  inline bool has_zone() const;
  inline void clear_zone();
  static const int kZoneFieldNumber = 3;
  inline const ::std::string& zone() const;
  inline void set_zone(const ::std::string& value);
  inline void set_zone(const char* value);
  inline void set_zone(const char* value, size_t size);
  inline ::std::string* mutable_zone();
  inline ::std::string* release_zone();
  inline void set_allocated_zone(::std::string* zone);

  // optional string district = 4;
  inline bool has_district() const;
  inline void clear_district();
  static const int kDistrictFieldNumber = 4;
  inline const ::std::string& district() const;
  inline void set_district(const ::std::string& value);
  inline void set_district(const char* value);
  inline void set_district(const char* value, size_t size);
  inline ::std::string* mutable_district();
  inline ::std::string* release_district();
  inline void set_allocated_district(::std::string* district);

  // optional string number = 5;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 5;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // optional string city = 6;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 6;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional string county = 7;
  inline bool has_county() const;
  inline void clear_county();
  static const int kCountyFieldNumber = 7;
  inline const ::std::string& county() const;
  inline void set_county(const ::std::string& value);
  inline void set_county(const char* value);
  inline void set_county(const char* value, size_t size);
  inline ::std::string* mutable_county();
  inline ::std::string* release_county();
  inline void set_allocated_county(::std::string* county);

  // optional string country = 8;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 8;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // @@protoc_insertion_point(class_scope:Address)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_street();
  inline void clear_has_street();
  inline void set_has_zone();
  inline void clear_has_zone();
  inline void set_has_district();
  inline void clear_has_district();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_county();
  inline void clear_has_county();
  inline void set_has_country();
  inline void clear_has_country();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* street_;
  ::std::string* zone_;
  ::std::string* district_;
  ::std::string* number_;
  ::std::string* city_;
  ::std::string* county_;
  ::std::string* country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Address* default_instance_;
};
// -------------------------------------------------------------------

class DeliveryPlaceSpecification : public ::google::protobuf::Message {
 public:
  DeliveryPlaceSpecification();
  virtual ~DeliveryPlaceSpecification();

  DeliveryPlaceSpecification(const DeliveryPlaceSpecification& from);

  inline DeliveryPlaceSpecification& operator=(const DeliveryPlaceSpecification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeliveryPlaceSpecification& default_instance();

  void Swap(DeliveryPlaceSpecification* other);

  // implements Message ----------------------------------------------

  DeliveryPlaceSpecification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeliveryPlaceSpecification& from);
  void MergeFrom(const DeliveryPlaceSpecification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 location_id = 2;
  inline bool has_location_id() const;
  inline void clear_location_id();
  static const int kLocationIdFieldNumber = 2;
  inline ::google::protobuf::int64 location_id() const;
  inline void set_location_id(::google::protobuf::int64 value);

  // optional int64 building_id = 3;
  inline bool has_building_id() const;
  inline void clear_building_id();
  static const int kBuildingIdFieldNumber = 3;
  inline ::google::protobuf::int64 building_id() const;
  inline void set_building_id(::google::protobuf::int64 value);

  // optional int64 delivery_place_id = 4;
  inline bool has_delivery_place_id() const;
  inline void clear_delivery_place_id();
  static const int kDeliveryPlaceIdFieldNumber = 4;
  inline ::google::protobuf::int64 delivery_place_id() const;
  inline void set_delivery_place_id(::google::protobuf::int64 value);

  // optional int64 place_type_id = 5;
  inline bool has_place_type_id() const;
  inline void clear_place_type_id();
  static const int kPlaceTypeIdFieldNumber = 5;
  inline ::google::protobuf::int64 place_type_id() const;
  inline void set_place_type_id(::google::protobuf::int64 value);

  // optional string text_value = 6;
  inline bool has_text_value() const;
  inline void clear_text_value();
  static const int kTextValueFieldNumber = 6;
  inline const ::std::string& text_value() const;
  inline void set_text_value(const ::std::string& value);
  inline void set_text_value(const char* value);
  inline void set_text_value(const char* value, size_t size);
  inline ::std::string* mutable_text_value();
  inline ::std::string* release_text_value();
  inline void set_allocated_text_value(::std::string* text_value);

  // @@protoc_insertion_point(class_scope:DeliveryPlaceSpecification)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_location_id();
  inline void clear_has_location_id();
  inline void set_has_building_id();
  inline void clear_has_building_id();
  inline void set_has_delivery_place_id();
  inline void clear_has_delivery_place_id();
  inline void set_has_place_type_id();
  inline void clear_has_place_type_id();
  inline void set_has_text_value();
  inline void clear_has_text_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 location_id_;
  ::google::protobuf::int64 building_id_;
  ::google::protobuf::int64 delivery_place_id_;
  ::google::protobuf::int64 place_type_id_;
  ::std::string* text_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static DeliveryPlaceSpecification* default_instance_;
};
// -------------------------------------------------------------------

class LegalEntity : public ::google::protobuf::Message {
 public:
  LegalEntity();
  virtual ~LegalEntity();

  LegalEntity(const LegalEntity& from);

  inline LegalEntity& operator=(const LegalEntity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LegalEntity& default_instance();

  void Swap(LegalEntity* other);

  // implements Message ----------------------------------------------

  LegalEntity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LegalEntity& from);
  void MergeFrom(const LegalEntity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 billing_address_id = 2;
  inline bool has_billing_address_id() const;
  inline void clear_billing_address_id();
  static const int kBillingAddressIdFieldNumber = 2;
  inline ::google::protobuf::int64 billing_address_id() const;
  inline void set_billing_address_id(::google::protobuf::int64 value);

  // optional string VATIN = 3;
  inline bool has_vatin() const;
  inline void clear_vatin();
  static const int kVATINFieldNumber = 3;
  inline const ::std::string& vatin() const;
  inline void set_vatin(const ::std::string& value);
  inline void set_vatin(const char* value);
  inline void set_vatin(const char* value, size_t size);
  inline ::std::string* mutable_vatin();
  inline ::std::string* release_vatin();
  inline void set_allocated_vatin(::std::string* vatin);

  // optional int64 registered_office_id = 4;
  inline bool has_registered_office_id() const;
  inline void clear_registered_office_id();
  static const int kRegisteredOfficeIdFieldNumber = 4;
  inline ::google::protobuf::int64 registered_office_id() const;
  inline void set_registered_office_id(::google::protobuf::int64 value);

  // optional string ref_no = 5;
  inline bool has_ref_no() const;
  inline void clear_ref_no();
  static const int kRefNoFieldNumber = 5;
  inline const ::std::string& ref_no() const;
  inline void set_ref_no(const ::std::string& value);
  inline void set_ref_no(const char* value);
  inline void set_ref_no(const char* value, size_t size);
  inline ::std::string* mutable_ref_no();
  inline ::std::string* release_ref_no();
  inline void set_allocated_ref_no(::std::string* ref_no);

  // @@protoc_insertion_point(class_scope:LegalEntity)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_billing_address_id();
  inline void clear_has_billing_address_id();
  inline void set_has_vatin();
  inline void clear_has_vatin();
  inline void set_has_registered_office_id();
  inline void clear_has_registered_office_id();
  inline void set_has_ref_no();
  inline void clear_has_ref_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 billing_address_id_;
  ::std::string* vatin_;
  ::google::protobuf::int64 registered_office_id_;
  ::std::string* ref_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static LegalEntity* default_instance_;
};
// -------------------------------------------------------------------

class Meeting : public ::google::protobuf::Message {
 public:
  Meeting();
  virtual ~Meeting();

  Meeting(const Meeting& from);

  inline Meeting& operator=(const Meeting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Meeting& default_instance();

  void Swap(Meeting* other);

  // implements Message ----------------------------------------------

  Meeting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Meeting& from);
  void MergeFrom(const Meeting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline ::google::protobuf::int64 date() const;
  inline void set_date(::google::protobuf::int64 value);

  // optional .Interval duration = 3;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 3;
  inline const ::Interval& duration() const;
  inline ::Interval* mutable_duration();
  inline ::Interval* release_duration();
  inline void set_allocated_duration(::Interval* duration);

  // optional string topic = 4;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 4;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // optional string result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // optional int64 place = 6;
  inline bool has_place() const;
  inline void clear_place();
  static const int kPlaceFieldNumber = 6;
  inline ::google::protobuf::int64 place() const;
  inline void set_place(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Meeting)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_place();
  inline void clear_has_place();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 date_;
  ::Interval* duration_;
  ::std::string* topic_;
  ::std::string* result_;
  ::google::protobuf::int64 place_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Meeting* default_instance_;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Location)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class Delivery : public ::google::protobuf::Message {
 public:
  Delivery();
  virtual ~Delivery();

  Delivery(const Delivery& from);

  inline Delivery& operator=(const Delivery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Delivery& default_instance();

  void Swap(Delivery* other);

  // implements Message ----------------------------------------------

  Delivery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Delivery& from);
  void MergeFrom(const Delivery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 restaurant_id = 2;
  inline bool has_restaurant_id() const;
  inline void clear_restaurant_id();
  static const int kRestaurantIdFieldNumber = 2;
  inline ::google::protobuf::int64 restaurant_id() const;
  inline void set_restaurant_id(::google::protobuf::int64 value);

  // optional int64 delivering_guy_id = 3;
  inline bool has_delivering_guy_id() const;
  inline void clear_delivering_guy_id();
  static const int kDeliveringGuyIdFieldNumber = 3;
  inline ::google::protobuf::int64 delivering_guy_id() const;
  inline void set_delivering_guy_id(::google::protobuf::int64 value);

  // optional int64 order_id = 4;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::int64 order_id() const;
  inline void set_order_id(::google::protobuf::int64 value);

  // optional int64 eta_arival = 5;
  inline bool has_eta_arival() const;
  inline void clear_eta_arival();
  static const int kEtaArivalFieldNumber = 5;
  inline ::google::protobuf::int64 eta_arival() const;
  inline void set_eta_arival(::google::protobuf::int64 value);

  // optional int64 arrival = 6;
  inline bool has_arrival() const;
  inline void clear_arrival();
  static const int kArrivalFieldNumber = 6;
  inline ::google::protobuf::int64 arrival() const;
  inline void set_arrival(::google::protobuf::int64 value);

  // optional int64 location_id = 7;
  inline bool has_location_id() const;
  inline void clear_location_id();
  static const int kLocationIdFieldNumber = 7;
  inline ::google::protobuf::int64 location_id() const;
  inline void set_location_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Delivery)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_restaurant_id();
  inline void clear_has_restaurant_id();
  inline void set_has_delivering_guy_id();
  inline void clear_has_delivering_guy_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_eta_arival();
  inline void clear_has_eta_arival();
  inline void set_has_arrival();
  inline void clear_has_arrival();
  inline void set_has_location_id();
  inline void clear_has_location_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 restaurant_id_;
  ::google::protobuf::int64 delivering_guy_id_;
  ::google::protobuf::int64 order_id_;
  ::google::protobuf::int64 eta_arival_;
  ::google::protobuf::int64 arrival_;
  ::google::protobuf::int64 location_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Delivery* default_instance_;
};
// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  void Swap(Device* other);

  // implements Message ----------------------------------------------

  Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string UUID = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUUIDFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional string tel = 3;
  inline bool has_tel() const;
  inline void clear_tel();
  static const int kTelFieldNumber = 3;
  inline const ::std::string& tel() const;
  inline void set_tel(const ::std::string& value);
  inline void set_tel(const char* value);
  inline void set_tel(const char* value, size_t size);
  inline ::std::string* mutable_tel();
  inline ::std::string* release_tel();
  inline void set_allocated_tel(::std::string* tel);

  // optional bool receivessms = 4;
  inline bool has_receivessms() const;
  inline void clear_receivessms();
  static const int kReceivessmsFieldNumber = 4;
  inline bool receivessms() const;
  inline void set_receivessms(bool value);

  // @@protoc_insertion_point(class_scope:Device)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_tel();
  inline void clear_has_tel();
  inline void set_has_receivessms();
  inline void clear_has_receivessms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* uuid_;
  ::std::string* tel_;
  bool receivessms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Device* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int64 artist_id = 4;
  inline bool has_artist_id() const;
  inline void clear_artist_id();
  static const int kArtistIdFieldNumber = 4;
  inline ::google::protobuf::int64 artist_id() const;
  inline void set_artist_id(::google::protobuf::int64 value);

  // optional string comment = 5;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 5;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:Image)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_artist_id();
  inline void clear_has_artist_id();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::std::string* data_;
  ::google::protobuf::int64 artist_id_;
  ::std::string* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class Order : public ::google::protobuf::Message {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Order& default_instance();

  void Swap(Order* other);

  // implements Message ----------------------------------------------

  Order* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline ::google::protobuf::int64 client_id() const;
  inline void set_client_id(::google::protobuf::int64 value);

  // optional string notes = 3;
  inline bool has_notes() const;
  inline void clear_notes();
  static const int kNotesFieldNumber = 3;
  inline const ::std::string& notes() const;
  inline void set_notes(const ::std::string& value);
  inline void set_notes(const char* value);
  inline void set_notes(const char* value, size_t size);
  inline ::std::string* mutable_notes();
  inline ::std::string* release_notes();
  inline void set_allocated_notes(::std::string* notes);

  // optional int64 delivery_place_id = 4;
  inline bool has_delivery_place_id() const;
  inline void clear_delivery_place_id();
  static const int kDeliveryPlaceIdFieldNumber = 4;
  inline ::google::protobuf::int64 delivery_place_id() const;
  inline void set_delivery_place_id(::google::protobuf::int64 value);

  // optional string delivery_box_id = 5;
  inline bool has_delivery_box_id() const;
  inline void clear_delivery_box_id();
  static const int kDeliveryBoxIdFieldNumber = 5;
  inline const ::std::string& delivery_box_id() const;
  inline void set_delivery_box_id(const ::std::string& value);
  inline void set_delivery_box_id(const char* value);
  inline void set_delivery_box_id(const char* value, size_t size);
  inline ::std::string* mutable_delivery_box_id();
  inline ::std::string* release_delivery_box_id();
  inline void set_allocated_delivery_box_id(::std::string* delivery_box_id);

  // @@protoc_insertion_point(class_scope:Order)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_notes();
  inline void clear_has_notes();
  inline void set_has_delivery_place_id();
  inline void clear_has_delivery_place_id();
  inline void set_has_delivery_box_id();
  inline void clear_has_delivery_box_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 client_id_;
  ::std::string* notes_;
  ::google::protobuf::int64 delivery_place_id_;
  ::std::string* delivery_box_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Order* default_instance_;
};
// -------------------------------------------------------------------

class Contact : public ::google::protobuf::Message {
 public:
  Contact();
  virtual ~Contact();

  Contact(const Contact& from);

  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Contact& default_instance();

  void Swap(Contact* other);

  // implements Message ----------------------------------------------

  Contact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 address_id = 3;
  inline bool has_address_id() const;
  inline void clear_address_id();
  static const int kAddressIdFieldNumber = 3;
  inline ::google::protobuf::int64 address_id() const;
  inline void set_address_id(::google::protobuf::int64 value);

  // optional string mobile = 4;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 4;
  inline const ::std::string& mobile() const;
  inline void set_mobile(const ::std::string& value);
  inline void set_mobile(const char* value);
  inline void set_mobile(const char* value, size_t size);
  inline ::std::string* mutable_mobile();
  inline ::std::string* release_mobile();
  inline void set_allocated_mobile(::std::string* mobile);

  // optional string email = 5;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 5;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string landline = 6;
  inline bool has_landline() const;
  inline void clear_landline();
  static const int kLandlineFieldNumber = 6;
  inline const ::std::string& landline() const;
  inline void set_landline(const ::std::string& value);
  inline void set_landline(const char* value);
  inline void set_landline(const char* value, size_t size);
  inline ::std::string* mutable_landline();
  inline ::std::string* release_landline();
  inline void set_allocated_landline(::std::string* landline);

  // optional string VATIN = 7;
  inline bool has_vatin() const;
  inline void clear_vatin();
  static const int kVATINFieldNumber = 7;
  inline const ::std::string& vatin() const;
  inline void set_vatin(const ::std::string& value);
  inline void set_vatin(const char* value);
  inline void set_vatin(const char* value, size_t size);
  inline ::std::string* mutable_vatin();
  inline ::std::string* release_vatin();
  inline void set_allocated_vatin(::std::string* vatin);

  // @@protoc_insertion_point(class_scope:Contact)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_address_id();
  inline void clear_has_address_id();
  inline void set_has_mobile();
  inline void clear_has_mobile();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_landline();
  inline void clear_has_landline();
  inline void set_has_vatin();
  inline void clear_has_vatin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int64 address_id_;
  ::std::string* mobile_;
  ::std::string* email_;
  ::std::string* landline_;
  ::std::string* vatin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Contact* default_instance_;
};
// -------------------------------------------------------------------

class OrderEntry : public ::google::protobuf::Message {
 public:
  OrderEntry();
  virtual ~OrderEntry();

  OrderEntry(const OrderEntry& from);

  inline OrderEntry& operator=(const OrderEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderEntry& default_instance();

  void Swap(OrderEntry* other);

  // implements Message ----------------------------------------------

  OrderEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderEntry& from);
  void MergeFrom(const OrderEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 order_id = 2;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  inline ::google::protobuf::int64 order_id() const;
  inline void set_order_id(::google::protobuf::int64 value);

  // optional int64 offer_id = 3;
  inline bool has_offer_id() const;
  inline void clear_offer_id();
  static const int kOfferIdFieldNumber = 3;
  inline ::google::protobuf::int64 offer_id() const;
  inline void set_offer_id(::google::protobuf::int64 value);

  // optional .Decimal qty = 4;
  inline bool has_qty() const;
  inline void clear_qty();
  static const int kQtyFieldNumber = 4;
  inline const ::Decimal& qty() const;
  inline ::Decimal* mutable_qty();
  inline ::Decimal* release_qty();
  inline void set_allocated_qty(::Decimal* qty);

  // @@protoc_insertion_point(class_scope:OrderEntry)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_offer_id();
  inline void clear_has_offer_id();
  inline void set_has_qty();
  inline void clear_has_qty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 order_id_;
  ::google::protobuf::int64 offer_id_;
  ::Decimal* qty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static OrderEntry* default_instance_;
};
// -------------------------------------------------------------------

class MeetingsToContact : public ::google::protobuf::Message {
 public:
  MeetingsToContact();
  virtual ~MeetingsToContact();

  MeetingsToContact(const MeetingsToContact& from);

  inline MeetingsToContact& operator=(const MeetingsToContact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeetingsToContact& default_instance();

  void Swap(MeetingsToContact* other);

  // implements Message ----------------------------------------------

  MeetingsToContact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeetingsToContact& from);
  void MergeFrom(const MeetingsToContact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 contact_id = 1;
  inline bool has_contact_id() const;
  inline void clear_contact_id();
  static const int kContactIdFieldNumber = 1;
  inline ::google::protobuf::int64 contact_id() const;
  inline void set_contact_id(::google::protobuf::int64 value);

  // required string role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline const ::std::string& role() const;
  inline void set_role(const ::std::string& value);
  inline void set_role(const char* value);
  inline void set_role(const char* value, size_t size);
  inline ::std::string* mutable_role();
  inline ::std::string* release_role();
  inline void set_allocated_role(::std::string* role);

  // required int64 meeting_id = 3;
  inline bool has_meeting_id() const;
  inline void clear_meeting_id();
  static const int kMeetingIdFieldNumber = 3;
  inline ::google::protobuf::int64 meeting_id() const;
  inline void set_meeting_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MeetingsToContact)
 private:
  inline void set_has_contact_id();
  inline void clear_has_contact_id();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_meeting_id();
  inline void clear_has_meeting_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 contact_id_;
  ::std::string* role_;
  ::google::protobuf::int64 meeting_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static MeetingsToContact* default_instance_;
};
// -------------------------------------------------------------------

class DeliveryPlace : public ::google::protobuf::Message {
 public:
  DeliveryPlace();
  virtual ~DeliveryPlace();

  DeliveryPlace(const DeliveryPlace& from);

  inline DeliveryPlace& operator=(const DeliveryPlace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeliveryPlace& default_instance();

  void Swap(DeliveryPlace* other);

  // implements Message ----------------------------------------------

  DeliveryPlace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeliveryPlace& from);
  void MergeFrom(const DeliveryPlace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 location_id = 2;
  inline bool has_location_id() const;
  inline void clear_location_id();
  static const int kLocationIdFieldNumber = 2;
  inline ::google::protobuf::int64 location_id() const;
  inline void set_location_id(::google::protobuf::int64 value);

  // optional int64 building_id = 3;
  inline bool has_building_id() const;
  inline void clear_building_id();
  static const int kBuildingIdFieldNumber = 3;
  inline ::google::protobuf::int64 building_id() const;
  inline void set_building_id(::google::protobuf::int64 value);

  // optional string short_name = 4;
  inline bool has_short_name() const;
  inline void clear_short_name();
  static const int kShortNameFieldNumber = 4;
  inline const ::std::string& short_name() const;
  inline void set_short_name(const ::std::string& value);
  inline void set_short_name(const char* value);
  inline void set_short_name(const char* value, size_t size);
  inline ::std::string* mutable_short_name();
  inline ::std::string* release_short_name();
  inline void set_allocated_short_name(::std::string* short_name);

  // optional int64 place_types = 5;
  inline bool has_place_types() const;
  inline void clear_place_types();
  static const int kPlaceTypesFieldNumber = 5;
  inline ::google::protobuf::int64 place_types() const;
  inline void set_place_types(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DeliveryPlace)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_location_id();
  inline void clear_has_location_id();
  inline void set_has_building_id();
  inline void clear_has_building_id();
  inline void set_has_short_name();
  inline void clear_has_short_name();
  inline void set_has_place_types();
  inline void clear_has_place_types();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 location_id_;
  ::google::protobuf::int64 building_id_;
  ::std::string* short_name_;
  ::google::protobuf::int64 place_types_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static DeliveryPlace* default_instance_;
};
// -------------------------------------------------------------------

class Invoice : public ::google::protobuf::Message {
 public:
  Invoice();
  virtual ~Invoice();

  Invoice(const Invoice& from);

  inline Invoice& operator=(const Invoice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Invoice& default_instance();

  void Swap(Invoice* other);

  // implements Message ----------------------------------------------

  Invoice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Invoice& from);
  void MergeFrom(const Invoice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 emmiter_id = 2;
  inline bool has_emmiter_id() const;
  inline void clear_emmiter_id();
  static const int kEmmiterIdFieldNumber = 2;
  inline ::google::protobuf::int64 emmiter_id() const;
  inline void set_emmiter_id(::google::protobuf::int64 value);

  // optional int64 recipient_id = 3;
  inline bool has_recipient_id() const;
  inline void clear_recipient_id();
  static const int kRecipientIdFieldNumber = 3;
  inline ::google::protobuf::int64 recipient_id() const;
  inline void set_recipient_id(::google::protobuf::int64 value);

  // optional .Decimal sum = 4;
  inline bool has_sum() const;
  inline void clear_sum();
  static const int kSumFieldNumber = 4;
  inline const ::Decimal& sum() const;
  inline ::Decimal* mutable_sum();
  inline ::Decimal* release_sum();
  inline void set_allocated_sum(::Decimal* sum);

  // optional int64 legal_entity_id = 5;
  inline bool has_legal_entity_id() const;
  inline void clear_legal_entity_id();
  static const int kLegalEntityIdFieldNumber = 5;
  inline ::google::protobuf::int64 legal_entity_id() const;
  inline void set_legal_entity_id(::google::protobuf::int64 value);

  // optional int64 receiver_person_id = 6;
  inline bool has_receiver_person_id() const;
  inline void clear_receiver_person_id();
  static const int kReceiverPersonIdFieldNumber = 6;
  inline ::google::protobuf::int64 receiver_person_id() const;
  inline void set_receiver_person_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Invoice)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_emmiter_id();
  inline void clear_has_emmiter_id();
  inline void set_has_recipient_id();
  inline void clear_has_recipient_id();
  inline void set_has_sum();
  inline void clear_has_sum();
  inline void set_has_legal_entity_id();
  inline void clear_has_legal_entity_id();
  inline void set_has_receiver_person_id();
  inline void clear_has_receiver_person_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 emmiter_id_;
  ::google::protobuf::int64 recipient_id_;
  ::Decimal* sum_;
  ::google::protobuf::int64 legal_entity_id_;
  ::google::protobuf::int64 receiver_person_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Invoice* default_instance_;
};
// -------------------------------------------------------------------

class Offer : public ::google::protobuf::Message {
 public:
  Offer();
  virtual ~Offer();

  Offer(const Offer& from);

  inline Offer& operator=(const Offer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Offer& default_instance();

  void Swap(Offer* other);

  // implements Message ----------------------------------------------

  Offer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Offer& from);
  void MergeFrom(const Offer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string valitity = 2;
  inline bool has_valitity() const;
  inline void clear_valitity();
  static const int kValitityFieldNumber = 2;
  inline const ::std::string& valitity() const;
  inline void set_valitity(const ::std::string& value);
  inline void set_valitity(const char* value);
  inline void set_valitity(const char* value, size_t size);
  inline ::std::string* mutable_valitity();
  inline ::std::string* release_valitity();
  inline void set_allocated_valitity(::std::string* valitity);

  // optional int64 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::int64 price() const;
  inline void set_price(::google::protobuf::int64 value);

  // optional int64 location_id = 4;
  inline bool has_location_id() const;
  inline void clear_location_id();
  static const int kLocationIdFieldNumber = 4;
  inline ::google::protobuf::int64 location_id() const;
  inline void set_location_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Offer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_valitity();
  inline void clear_has_valitity();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_location_id();
  inline void clear_has_location_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* valitity_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int64 location_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Offer* default_instance_;
};
// -------------------------------------------------------------------

class Building : public ::google::protobuf::Message {
 public:
  Building();
  virtual ~Building();

  Building(const Building& from);

  inline Building& operator=(const Building& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Building& default_instance();

  void Swap(Building* other);

  // implements Message ----------------------------------------------

  Building* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Building& from);
  void MergeFrom(const Building& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 location_id = 2;
  inline bool has_location_id() const;
  inline void clear_location_id();
  static const int kLocationIdFieldNumber = 2;
  inline ::google::protobuf::int64 location_id() const;
  inline void set_location_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Building)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_location_id();
  inline void clear_has_location_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 location_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Building* default_instance_;
};
// -------------------------------------------------------------------

class PaymentsToOrder : public ::google::protobuf::Message {
 public:
  PaymentsToOrder();
  virtual ~PaymentsToOrder();

  PaymentsToOrder(const PaymentsToOrder& from);

  inline PaymentsToOrder& operator=(const PaymentsToOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaymentsToOrder& default_instance();

  void Swap(PaymentsToOrder* other);

  // implements Message ----------------------------------------------

  PaymentsToOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaymentsToOrder& from);
  void MergeFrom(const PaymentsToOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 payment_id = 1;
  inline bool has_payment_id() const;
  inline void clear_payment_id();
  static const int kPaymentIdFieldNumber = 1;
  inline ::google::protobuf::int64 payment_id() const;
  inline void set_payment_id(::google::protobuf::int64 value);

  // required int64 order_id = 2;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  inline ::google::protobuf::int64 order_id() const;
  inline void set_order_id(::google::protobuf::int64 value);

  // optional .Decimal sum = 3;
  inline bool has_sum() const;
  inline void clear_sum();
  static const int kSumFieldNumber = 3;
  inline const ::Decimal& sum() const;
  inline ::Decimal* mutable_sum();
  inline ::Decimal* release_sum();
  inline void set_allocated_sum(::Decimal* sum);

  // required int64 seq = 4;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 4;
  inline ::google::protobuf::int64 seq() const;
  inline void set_seq(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PaymentsToOrder)
 private:
  inline void set_has_payment_id();
  inline void clear_has_payment_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_sum();
  inline void clear_has_sum();
  inline void set_has_seq();
  inline void clear_has_seq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 payment_id_;
  ::google::protobuf::int64 order_id_;
  ::Decimal* sum_;
  ::google::protobuf::int64 seq_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static PaymentsToOrder* default_instance_;
};
// -------------------------------------------------------------------

class Decimal : public ::google::protobuf::Message {
 public:
  Decimal();
  virtual ~Decimal();

  Decimal(const Decimal& from);

  inline Decimal& operator=(const Decimal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Decimal& default_instance();

  void Swap(Decimal* other);

  // implements Message ----------------------------------------------

  Decimal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Decimal& from);
  void MergeFrom(const Decimal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 lo = 1;
  inline bool has_lo() const;
  inline void clear_lo();
  static const int kLoFieldNumber = 1;
  inline ::google::protobuf::uint64 lo() const;
  inline void set_lo(::google::protobuf::uint64 value);

  // optional uint32 hi = 2;
  inline bool has_hi() const;
  inline void clear_hi();
  static const int kHiFieldNumber = 2;
  inline ::google::protobuf::uint32 hi() const;
  inline void set_hi(::google::protobuf::uint32 value);

  // optional uint32 signScale = 3;
  inline bool has_signscale() const;
  inline void clear_signscale();
  static const int kSignScaleFieldNumber = 3;
  inline ::google::protobuf::uint32 signscale() const;
  inline void set_signscale(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Decimal)
 private:
  inline void set_has_lo();
  inline void clear_has_lo();
  inline void set_has_hi();
  inline void clear_has_hi();
  inline void set_has_signscale();
  inline void clear_has_signscale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 lo_;
  ::google::protobuf::uint32 hi_;
  ::google::protobuf::uint32 signscale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Decimal* default_instance_;
};
// -------------------------------------------------------------------

class Interval : public ::google::protobuf::Message {
 public:
  Interval();
  virtual ~Interval();

  Interval(const Interval& from);

  inline Interval& operator=(const Interval& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Interval& default_instance();

  void Swap(Interval* other);

  // implements Message ----------------------------------------------

  Interval* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Interval& from);
  void MergeFrom(const Interval& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline ::google::protobuf::uint64 start() const;
  inline void set_start(::google::protobuf::uint64 value);

  // optional uint64 end = 2;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 2;
  inline ::google::protobuf::uint64 end() const;
  inline void set_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Interval)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 start_;
  ::google::protobuf::uint64 end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Interval* default_instance_;
};
// -------------------------------------------------------------------

class Menu : public ::google::protobuf::Message {
 public:
  Menu();
  virtual ~Menu();

  Menu(const Menu& from);

  inline Menu& operator=(const Menu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Menu& default_instance();

  void Swap(Menu* other);

  // implements Message ----------------------------------------------

  Menu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Menu& from);
  void MergeFrom(const Menu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string recurrence = 2;
  inline bool has_recurrence() const;
  inline void clear_recurrence();
  static const int kRecurrenceFieldNumber = 2;
  inline const ::std::string& recurrence() const;
  inline void set_recurrence(const ::std::string& value);
  inline void set_recurrence(const char* value);
  inline void set_recurrence(const char* value, size_t size);
  inline ::std::string* mutable_recurrence();
  inline ::std::string* release_recurrence();
  inline void set_allocated_recurrence(::std::string* recurrence);

  // optional int64 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::int64 price() const;
  inline void set_price(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Menu)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_recurrence();
  inline void clear_has_recurrence();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* recurrence_;
  ::google::protobuf::int64 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Menu* default_instance_;
};
// -------------------------------------------------------------------

class PlaceType : public ::google::protobuf::Message {
 public:
  PlaceType();
  virtual ~PlaceType();

  PlaceType(const PlaceType& from);

  inline PlaceType& operator=(const PlaceType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaceType& default_instance();

  void Swap(PlaceType* other);

  // implements Message ----------------------------------------------

  PlaceType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlaceType& from);
  void MergeFrom(const PlaceType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PlaceType)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static PlaceType* default_instance_;
};
// -------------------------------------------------------------------

class InvoicesToContact : public ::google::protobuf::Message {
 public:
  InvoicesToContact();
  virtual ~InvoicesToContact();

  InvoicesToContact(const InvoicesToContact& from);

  inline InvoicesToContact& operator=(const InvoicesToContact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvoicesToContact& default_instance();

  void Swap(InvoicesToContact* other);

  // implements Message ----------------------------------------------

  InvoicesToContact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvoicesToContact& from);
  void MergeFrom(const InvoicesToContact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 contact_id = 1;
  inline bool has_contact_id() const;
  inline void clear_contact_id();
  static const int kContactIdFieldNumber = 1;
  inline ::google::protobuf::int64 contact_id() const;
  inline void set_contact_id(::google::protobuf::int64 value);

  // required int64 invoice_id = 2;
  inline bool has_invoice_id() const;
  inline void clear_invoice_id();
  static const int kInvoiceIdFieldNumber = 2;
  inline ::google::protobuf::int64 invoice_id() const;
  inline void set_invoice_id(::google::protobuf::int64 value);

  // required string role = 3;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline const ::std::string& role() const;
  inline void set_role(const ::std::string& value);
  inline void set_role(const char* value);
  inline void set_role(const char* value, size_t size);
  inline ::std::string* mutable_role();
  inline ::std::string* release_role();
  inline void set_allocated_role(::std::string* role);

  // @@protoc_insertion_point(class_scope:InvoicesToContact)
 private:
  inline void set_has_contact_id();
  inline void clear_has_contact_id();
  inline void set_has_invoice_id();
  inline void clear_has_invoice_id();
  inline void set_has_role();
  inline void clear_has_role();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 contact_id_;
  ::google::protobuf::int64 invoice_id_;
  ::std::string* role_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static InvoicesToContact* default_instance_;
};
// -------------------------------------------------------------------

class GeometryColumn : public ::google::protobuf::Message {
 public:
  GeometryColumn();
  virtual ~GeometryColumn();

  GeometryColumn(const GeometryColumn& from);

  inline GeometryColumn& operator=(const GeometryColumn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeometryColumn& default_instance();

  void Swap(GeometryColumn* other);

  // implements Message ----------------------------------------------

  GeometryColumn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeometryColumn& from);
  void MergeFrom(const GeometryColumn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string f_table_catalog = 1;
  inline bool has_f_table_catalog() const;
  inline void clear_f_table_catalog();
  static const int kFTableCatalogFieldNumber = 1;
  inline const ::std::string& f_table_catalog() const;
  inline void set_f_table_catalog(const ::std::string& value);
  inline void set_f_table_catalog(const char* value);
  inline void set_f_table_catalog(const char* value, size_t size);
  inline ::std::string* mutable_f_table_catalog();
  inline ::std::string* release_f_table_catalog();
  inline void set_allocated_f_table_catalog(::std::string* f_table_catalog);

  // required string f_table_schema = 2;
  inline bool has_f_table_schema() const;
  inline void clear_f_table_schema();
  static const int kFTableSchemaFieldNumber = 2;
  inline const ::std::string& f_table_schema() const;
  inline void set_f_table_schema(const ::std::string& value);
  inline void set_f_table_schema(const char* value);
  inline void set_f_table_schema(const char* value, size_t size);
  inline ::std::string* mutable_f_table_schema();
  inline ::std::string* release_f_table_schema();
  inline void set_allocated_f_table_schema(::std::string* f_table_schema);

  // required string f_table_name = 3;
  inline bool has_f_table_name() const;
  inline void clear_f_table_name();
  static const int kFTableNameFieldNumber = 3;
  inline const ::std::string& f_table_name() const;
  inline void set_f_table_name(const ::std::string& value);
  inline void set_f_table_name(const char* value);
  inline void set_f_table_name(const char* value, size_t size);
  inline ::std::string* mutable_f_table_name();
  inline ::std::string* release_f_table_name();
  inline void set_allocated_f_table_name(::std::string* f_table_name);

  // required string f_geometry_column = 4;
  inline bool has_f_geometry_column() const;
  inline void clear_f_geometry_column();
  static const int kFGeometryColumnFieldNumber = 4;
  inline const ::std::string& f_geometry_column() const;
  inline void set_f_geometry_column(const ::std::string& value);
  inline void set_f_geometry_column(const char* value);
  inline void set_f_geometry_column(const char* value, size_t size);
  inline ::std::string* mutable_f_geometry_column();
  inline ::std::string* release_f_geometry_column();
  inline void set_allocated_f_geometry_column(::std::string* f_geometry_column);

  // optional int64 coord_dimension = 5;
  inline bool has_coord_dimension() const;
  inline void clear_coord_dimension();
  static const int kCoordDimensionFieldNumber = 5;
  inline ::google::protobuf::int64 coord_dimension() const;
  inline void set_coord_dimension(::google::protobuf::int64 value);

  // optional int64 srid = 6;
  inline bool has_srid() const;
  inline void clear_srid();
  static const int kSridFieldNumber = 6;
  inline ::google::protobuf::int64 srid() const;
  inline void set_srid(::google::protobuf::int64 value);

  // optional string type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:GeometryColumn)
 private:
  inline void set_has_f_table_catalog();
  inline void clear_has_f_table_catalog();
  inline void set_has_f_table_schema();
  inline void clear_has_f_table_schema();
  inline void set_has_f_table_name();
  inline void clear_has_f_table_name();
  inline void set_has_f_geometry_column();
  inline void clear_has_f_geometry_column();
  inline void set_has_coord_dimension();
  inline void clear_has_coord_dimension();
  inline void set_has_srid();
  inline void clear_has_srid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* f_table_catalog_;
  ::std::string* f_table_schema_;
  ::std::string* f_table_name_;
  ::std::string* f_geometry_column_;
  ::google::protobuf::int64 coord_dimension_;
  ::google::protobuf::int64 srid_;
  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static GeometryColumn* default_instance_;
};
// -------------------------------------------------------------------

class Receipt : public ::google::protobuf::Message {
 public:
  Receipt();
  virtual ~Receipt();

  Receipt(const Receipt& from);

  inline Receipt& operator=(const Receipt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Receipt& default_instance();

  void Swap(Receipt* other);

  // implements Message ----------------------------------------------

  Receipt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Receipt& from);
  void MergeFrom(const Receipt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 emitter_id = 2;
  inline bool has_emitter_id() const;
  inline void clear_emitter_id();
  static const int kEmitterIdFieldNumber = 2;
  inline ::google::protobuf::int64 emitter_id() const;
  inline void set_emitter_id(::google::protobuf::int64 value);

  // optional int64 date = 3;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 3;
  inline ::google::protobuf::int64 date() const;
  inline void set_date(::google::protobuf::int64 value);

  // optional .Decimal sum = 4;
  inline bool has_sum() const;
  inline void clear_sum();
  static const int kSumFieldNumber = 4;
  inline const ::Decimal& sum() const;
  inline ::Decimal* mutable_sum();
  inline ::Decimal* release_sum();
  inline void set_allocated_sum(::Decimal* sum);

  // optional int64 emission_date = 5;
  inline bool has_emission_date() const;
  inline void clear_emission_date();
  static const int kEmissionDateFieldNumber = 5;
  inline ::google::protobuf::int64 emission_date() const;
  inline void set_emission_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Receipt)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_emitter_id();
  inline void clear_has_emitter_id();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_sum();
  inline void clear_has_sum();
  inline void set_has_emission_date();
  inline void clear_has_emission_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 emitter_id_;
  ::google::protobuf::int64 date_;
  ::Decimal* sum_;
  ::google::protobuf::int64 emission_date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Receipt* default_instance_;
};
// -------------------------------------------------------------------

class SpatialRefSy : public ::google::protobuf::Message {
 public:
  SpatialRefSy();
  virtual ~SpatialRefSy();

  SpatialRefSy(const SpatialRefSy& from);

  inline SpatialRefSy& operator=(const SpatialRefSy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpatialRefSy& default_instance();

  void Swap(SpatialRefSy* other);

  // implements Message ----------------------------------------------

  SpatialRefSy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpatialRefSy& from);
  void MergeFrom(const SpatialRefSy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 srid = 1;
  inline bool has_srid() const;
  inline void clear_srid();
  static const int kSridFieldNumber = 1;
  inline ::google::protobuf::int64 srid() const;
  inline void set_srid(::google::protobuf::int64 value);

  // optional string auth_name = 2;
  inline bool has_auth_name() const;
  inline void clear_auth_name();
  static const int kAuthNameFieldNumber = 2;
  inline const ::std::string& auth_name() const;
  inline void set_auth_name(const ::std::string& value);
  inline void set_auth_name(const char* value);
  inline void set_auth_name(const char* value, size_t size);
  inline ::std::string* mutable_auth_name();
  inline ::std::string* release_auth_name();
  inline void set_allocated_auth_name(::std::string* auth_name);

  // optional int64 auth_srid = 3;
  inline bool has_auth_srid() const;
  inline void clear_auth_srid();
  static const int kAuthSridFieldNumber = 3;
  inline ::google::protobuf::int64 auth_srid() const;
  inline void set_auth_srid(::google::protobuf::int64 value);

  // optional string srtext = 4;
  inline bool has_srtext() const;
  inline void clear_srtext();
  static const int kSrtextFieldNumber = 4;
  inline const ::std::string& srtext() const;
  inline void set_srtext(const ::std::string& value);
  inline void set_srtext(const char* value);
  inline void set_srtext(const char* value, size_t size);
  inline ::std::string* mutable_srtext();
  inline ::std::string* release_srtext();
  inline void set_allocated_srtext(::std::string* srtext);

  // optional string proj4text = 5;
  inline bool has_proj4text() const;
  inline void clear_proj4text();
  static const int kProj4TextFieldNumber = 5;
  inline const ::std::string& proj4text() const;
  inline void set_proj4text(const ::std::string& value);
  inline void set_proj4text(const char* value);
  inline void set_proj4text(const char* value, size_t size);
  inline ::std::string* mutable_proj4text();
  inline ::std::string* release_proj4text();
  inline void set_allocated_proj4text(::std::string* proj4text);

  // @@protoc_insertion_point(class_scope:SpatialRefSy)
 private:
  inline void set_has_srid();
  inline void clear_has_srid();
  inline void set_has_auth_name();
  inline void clear_has_auth_name();
  inline void set_has_auth_srid();
  inline void clear_has_auth_srid();
  inline void set_has_srtext();
  inline void clear_has_srtext();
  inline void set_has_proj4text();
  inline void clear_has_proj4text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 srid_;
  ::std::string* auth_name_;
  ::google::protobuf::int64 auth_srid_;
  ::std::string* srtext_;
  ::std::string* proj4text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static SpatialRefSy* default_instance_;
};
// -------------------------------------------------------------------

class ContactsToLegalEntity : public ::google::protobuf::Message {
 public:
  ContactsToLegalEntity();
  virtual ~ContactsToLegalEntity();

  ContactsToLegalEntity(const ContactsToLegalEntity& from);

  inline ContactsToLegalEntity& operator=(const ContactsToLegalEntity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactsToLegalEntity& default_instance();

  void Swap(ContactsToLegalEntity* other);

  // implements Message ----------------------------------------------

  ContactsToLegalEntity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactsToLegalEntity& from);
  void MergeFrom(const ContactsToLegalEntity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 contact_id = 1;
  inline bool has_contact_id() const;
  inline void clear_contact_id();
  static const int kContactIdFieldNumber = 1;
  inline ::google::protobuf::int64 contact_id() const;
  inline void set_contact_id(::google::protobuf::int64 value);

  // optional string role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline const ::std::string& role() const;
  inline void set_role(const ::std::string& value);
  inline void set_role(const char* value);
  inline void set_role(const char* value, size_t size);
  inline ::std::string* mutable_role();
  inline ::std::string* release_role();
  inline void set_allocated_role(::std::string* role);

  // required int64 legal_entity_id = 3;
  inline bool has_legal_entity_id() const;
  inline void clear_legal_entity_id();
  static const int kLegalEntityIdFieldNumber = 3;
  inline ::google::protobuf::int64 legal_entity_id() const;
  inline void set_legal_entity_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ContactsToLegalEntity)
 private:
  inline void set_has_contact_id();
  inline void clear_has_contact_id();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_legal_entity_id();
  inline void clear_has_legal_entity_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 contact_id_;
  ::std::string* role_;
  ::google::protobuf::int64 legal_entity_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static ContactsToLegalEntity* default_instance_;
};
// -------------------------------------------------------------------

class OfferOption : public ::google::protobuf::Message {
 public:
  OfferOption();
  virtual ~OfferOption();

  OfferOption(const OfferOption& from);

  inline OfferOption& operator=(const OfferOption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfferOption& default_instance();

  void Swap(OfferOption* other);

  // implements Message ----------------------------------------------

  OfferOption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfferOption& from);
  void MergeFrom(const OfferOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional bool is_offer_changer = 2;
  inline bool has_is_offer_changer() const;
  inline void clear_is_offer_changer();
  static const int kIsOfferChangerFieldNumber = 2;
  inline bool is_offer_changer() const;
  inline void set_is_offer_changer(bool value);

  // optional int64 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::int64 price() const;
  inline void set_price(::google::protobuf::int64 value);

  // optional int64 price_delta_positive = 4;
  inline bool has_price_delta_positive() const;
  inline void clear_price_delta_positive();
  static const int kPriceDeltaPositiveFieldNumber = 4;
  inline ::google::protobuf::int64 price_delta_positive() const;
  inline void set_price_delta_positive(::google::protobuf::int64 value);

  // optional int64 price_delta_negative = 5;
  inline bool has_price_delta_negative() const;
  inline void clear_price_delta_negative();
  static const int kPriceDeltaNegativeFieldNumber = 5;
  inline ::google::protobuf::int64 price_delta_negative() const;
  inline void set_price_delta_negative(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:OfferOption)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_is_offer_changer();
  inline void clear_has_is_offer_changer();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_price_delta_positive();
  inline void clear_has_price_delta_positive();
  inline void set_has_price_delta_negative();
  inline void clear_has_price_delta_negative();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int64 price_delta_positive_;
  ::google::protobuf::int64 price_delta_negative_;
  bool is_offer_changer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static OfferOption* default_instance_;
};
// -------------------------------------------------------------------

class Client : public ::google::protobuf::Message {
 public:
  Client();
  virtual ~Client();

  Client(const Client& from);

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Client& default_instance();

  void Swap(Client* other);

  // implements Message ----------------------------------------------

  Client* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Client& from);
  void MergeFrom(const Client& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 contact_id = 2;
  inline bool has_contact_id() const;
  inline void clear_contact_id();
  static const int kContactIdFieldNumber = 2;
  inline ::google::protobuf::int64 contact_id() const;
  inline void set_contact_id(::google::protobuf::int64 value);

  // optional string user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string passmd5 = 4;
  inline bool has_passmd5() const;
  inline void clear_passmd5();
  static const int kPassmd5FieldNumber = 4;
  inline const ::std::string& passmd5() const;
  inline void set_passmd5(const ::std::string& value);
  inline void set_passmd5(const char* value);
  inline void set_passmd5(const char* value, size_t size);
  inline ::std::string* mutable_passmd5();
  inline ::std::string* release_passmd5();
  inline void set_allocated_passmd5(::std::string* passmd5);

  // @@protoc_insertion_point(class_scope:Client)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_contact_id();
  inline void clear_has_contact_id();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passmd5();
  inline void clear_has_passmd5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 contact_id_;
  ::std::string* user_;
  ::std::string* passmd5_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Client* default_instance_;
};
// -------------------------------------------------------------------

class MenuOption : public ::google::protobuf::Message {
 public:
  MenuOption();
  virtual ~MenuOption();

  MenuOption(const MenuOption& from);

  inline MenuOption& operator=(const MenuOption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MenuOption& default_instance();

  void Swap(MenuOption* other);

  // implements Message ----------------------------------------------

  MenuOption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MenuOption& from);
  void MergeFrom(const MenuOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 menu_id = 2;
  inline bool has_menu_id() const;
  inline void clear_menu_id();
  static const int kMenuIdFieldNumber = 2;
  inline ::google::protobuf::int64 menu_id() const;
  inline void set_menu_id(::google::protobuf::int64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool is_menu_changer = 4;
  inline bool has_is_menu_changer() const;
  inline void clear_is_menu_changer();
  static const int kIsMenuChangerFieldNumber = 4;
  inline bool is_menu_changer() const;
  inline void set_is_menu_changer(bool value);

  // @@protoc_insertion_point(class_scope:MenuOption)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_menu_id();
  inline void clear_has_menu_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_is_menu_changer();
  inline void clear_has_is_menu_changer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 menu_id_;
  ::std::string* name_;
  bool is_menu_changer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static MenuOption* default_instance_;
};
// -------------------------------------------------------------------

class Payment : public ::google::protobuf::Message {
 public:
  Payment();
  virtual ~Payment();

  Payment(const Payment& from);

  inline Payment& operator=(const Payment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Payment& default_instance();

  void Swap(Payment* other);

  // implements Message ----------------------------------------------

  Payment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Payment& from);
  void MergeFrom(const Payment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline ::google::protobuf::int64 client_id() const;
  inline void set_client_id(::google::protobuf::int64 value);

  // optional .Decimal sum = 3;
  inline bool has_sum() const;
  inline void clear_sum();
  static const int kSumFieldNumber = 3;
  inline const ::Decimal& sum() const;
  inline ::Decimal* mutable_sum();
  inline ::Decimal* release_sum();
  inline void set_allocated_sum(::Decimal* sum);

  // optional int64 receipt_id = 4;
  inline bool has_receipt_id() const;
  inline void clear_receipt_id();
  static const int kReceiptIdFieldNumber = 4;
  inline ::google::protobuf::int64 receipt_id() const;
  inline void set_receipt_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Payment)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_sum();
  inline void clear_has_sum();
  inline void set_has_receipt_id();
  inline void clear_has_receipt_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 client_id_;
  ::Decimal* sum_;
  ::google::protobuf::int64 receipt_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Payment* default_instance_;
};
// -------------------------------------------------------------------

class RestaurantsToContact : public ::google::protobuf::Message {
 public:
  RestaurantsToContact();
  virtual ~RestaurantsToContact();

  RestaurantsToContact(const RestaurantsToContact& from);

  inline RestaurantsToContact& operator=(const RestaurantsToContact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestaurantsToContact& default_instance();

  void Swap(RestaurantsToContact* other);

  // implements Message ----------------------------------------------

  RestaurantsToContact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RestaurantsToContact& from);
  void MergeFrom(const RestaurantsToContact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 restaurant_id = 1;
  inline bool has_restaurant_id() const;
  inline void clear_restaurant_id();
  static const int kRestaurantIdFieldNumber = 1;
  inline ::google::protobuf::int64 restaurant_id() const;
  inline void set_restaurant_id(::google::protobuf::int64 value);

  // required int64 contact_id = 2;
  inline bool has_contact_id() const;
  inline void clear_contact_id();
  static const int kContactIdFieldNumber = 2;
  inline ::google::protobuf::int64 contact_id() const;
  inline void set_contact_id(::google::protobuf::int64 value);

  // required string position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional bool can_deliver = 4;
  inline bool has_can_deliver() const;
  inline void clear_can_deliver();
  static const int kCanDeliverFieldNumber = 4;
  inline bool can_deliver() const;
  inline void set_can_deliver(bool value);

  // @@protoc_insertion_point(class_scope:RestaurantsToContact)
 private:
  inline void set_has_restaurant_id();
  inline void clear_has_restaurant_id();
  inline void set_has_contact_id();
  inline void clear_has_contact_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_can_deliver();
  inline void clear_has_can_deliver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 restaurant_id_;
  ::google::protobuf::int64 contact_id_;
  ::std::string* position_;
  bool can_deliver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static RestaurantsToContact* default_instance_;
};
// -------------------------------------------------------------------

class MenuEntry : public ::google::protobuf::Message {
 public:
  MenuEntry();
  virtual ~MenuEntry();

  MenuEntry(const MenuEntry& from);

  inline MenuEntry& operator=(const MenuEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MenuEntry& default_instance();

  void Swap(MenuEntry* other);

  // implements Message ----------------------------------------------

  MenuEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MenuEntry& from);
  void MergeFrom(const MenuEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 menu_id = 2;
  inline bool has_menu_id() const;
  inline void clear_menu_id();
  static const int kMenuIdFieldNumber = 2;
  inline ::google::protobuf::int64 menu_id() const;
  inline void set_menu_id(::google::protobuf::int64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 option_for = 4;
  inline bool has_option_for() const;
  inline void clear_option_for();
  static const int kOptionForFieldNumber = 4;
  inline ::google::protobuf::int64 option_for() const;
  inline void set_option_for(::google::protobuf::int64 value);

  // optional int64 option_max_qty = 5;
  inline bool has_option_max_qty() const;
  inline void clear_option_max_qty();
  static const int kOptionMaxQtyFieldNumber = 5;
  inline ::google::protobuf::int64 option_max_qty() const;
  inline void set_option_max_qty(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MenuEntry)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_menu_id();
  inline void clear_has_menu_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_option_for();
  inline void clear_has_option_for();
  inline void set_has_option_max_qty();
  inline void clear_has_option_max_qty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 menu_id_;
  ::std::string* name_;
  ::google::protobuf::int64 option_for_;
  ::google::protobuf::int64 option_max_qty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static MenuEntry* default_instance_;
};
// -------------------------------------------------------------------

class Restaurant : public ::google::protobuf::Message {
 public:
  Restaurant();
  virtual ~Restaurant();

  Restaurant(const Restaurant& from);

  inline Restaurant& operator=(const Restaurant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Restaurant& default_instance();

  void Swap(Restaurant* other);

  // implements Message ----------------------------------------------

  Restaurant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Restaurant& from);
  void MergeFrom(const Restaurant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 address_id = 3;
  inline bool has_address_id() const;
  inline void clear_address_id();
  static const int kAddressIdFieldNumber = 3;
  inline ::google::protobuf::int64 address_id() const;
  inline void set_address_id(::google::protobuf::int64 value);

  // optional int64 legal_entity_id = 4;
  inline bool has_legal_entity_id() const;
  inline void clear_legal_entity_id();
  static const int kLegalEntityIdFieldNumber = 4;
  inline ::google::protobuf::int64 legal_entity_id() const;
  inline void set_legal_entity_id(::google::protobuf::int64 value);

  // optional .Decimal customer_telephone_number = 5;
  inline bool has_customer_telephone_number() const;
  inline void clear_customer_telephone_number();
  static const int kCustomerTelephoneNumberFieldNumber = 5;
  inline const ::Decimal& customer_telephone_number() const;
  inline ::Decimal* mutable_customer_telephone_number();
  inline ::Decimal* release_customer_telephone_number();
  inline void set_allocated_customer_telephone_number(::Decimal* customer_telephone_number);

  // optional int64 customer_contact_id = 6;
  inline bool has_customer_contact_id() const;
  inline void clear_customer_contact_id();
  static const int kCustomerContactIdFieldNumber = 6;
  inline ::google::protobuf::int64 customer_contact_id() const;
  inline void set_customer_contact_id(::google::protobuf::int64 value);

  // optional string logo = 7;
  inline bool has_logo() const;
  inline void clear_logo();
  static const int kLogoFieldNumber = 7;
  inline const ::std::string& logo() const;
  inline void set_logo(const ::std::string& value);
  inline void set_logo(const char* value);
  inline void set_logo(const char* value, size_t size);
  inline ::std::string* mutable_logo();
  inline ::std::string* release_logo();
  inline void set_allocated_logo(::std::string* logo);

  // optional int64 logo_src_image_id = 8;
  inline bool has_logo_src_image_id() const;
  inline void clear_logo_src_image_id();
  static const int kLogoSrcImageIdFieldNumber = 8;
  inline ::google::protobuf::int64 logo_src_image_id() const;
  inline void set_logo_src_image_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Restaurant)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_address_id();
  inline void clear_has_address_id();
  inline void set_has_legal_entity_id();
  inline void clear_has_legal_entity_id();
  inline void set_has_customer_telephone_number();
  inline void clear_has_customer_telephone_number();
  inline void set_has_customer_contact_id();
  inline void clear_has_customer_contact_id();
  inline void set_has_logo();
  inline void clear_has_logo();
  inline void set_has_logo_src_image_id();
  inline void clear_has_logo_src_image_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int64 address_id_;
  ::google::protobuf::int64 legal_entity_id_;
  ::Decimal* customer_telephone_number_;
  ::google::protobuf::int64 customer_contact_id_;
  ::std::string* logo_;
  ::google::protobuf::int64 logo_src_image_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_gen_2fmodel_2eproto();
  friend void protobuf_AssignDesc_gen_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_gen_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static Restaurant* default_instance_;
};
// ===================================================================


// ===================================================================

// Address

// required int64 id = 1;
inline bool Address::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Address::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Address::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Address::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Address::id() const {
  return id_;
}
inline void Address::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string street = 2;
inline bool Address::has_street() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Address::set_has_street() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Address::clear_has_street() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Address::clear_street() {
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    street_->clear();
  }
  clear_has_street();
}
inline const ::std::string& Address::street() const {
  return *street_;
}
inline void Address::set_street(const ::std::string& value) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(value);
}
inline void Address::set_street(const char* value) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(value);
}
inline void Address::set_street(const char* value, size_t size) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Address::mutable_street() {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  return street_;
}
inline ::std::string* Address::release_street() {
  clear_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = street_;
    street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Address::set_allocated_street(::std::string* street) {
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (street) {
    set_has_street();
    street_ = street;
  } else {
    clear_has_street();
    street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string zone = 3;
inline bool Address::has_zone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Address::set_has_zone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Address::clear_has_zone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Address::clear_zone() {
  if (zone_ != &::google::protobuf::internal::kEmptyString) {
    zone_->clear();
  }
  clear_has_zone();
}
inline const ::std::string& Address::zone() const {
  return *zone_;
}
inline void Address::set_zone(const ::std::string& value) {
  set_has_zone();
  if (zone_ == &::google::protobuf::internal::kEmptyString) {
    zone_ = new ::std::string;
  }
  zone_->assign(value);
}
inline void Address::set_zone(const char* value) {
  set_has_zone();
  if (zone_ == &::google::protobuf::internal::kEmptyString) {
    zone_ = new ::std::string;
  }
  zone_->assign(value);
}
inline void Address::set_zone(const char* value, size_t size) {
  set_has_zone();
  if (zone_ == &::google::protobuf::internal::kEmptyString) {
    zone_ = new ::std::string;
  }
  zone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Address::mutable_zone() {
  set_has_zone();
  if (zone_ == &::google::protobuf::internal::kEmptyString) {
    zone_ = new ::std::string;
  }
  return zone_;
}
inline ::std::string* Address::release_zone() {
  clear_has_zone();
  if (zone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zone_;
    zone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Address::set_allocated_zone(::std::string* zone) {
  if (zone_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_;
  }
  if (zone) {
    set_has_zone();
    zone_ = zone;
  } else {
    clear_has_zone();
    zone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string district = 4;
inline bool Address::has_district() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Address::set_has_district() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Address::clear_has_district() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Address::clear_district() {
  if (district_ != &::google::protobuf::internal::kEmptyString) {
    district_->clear();
  }
  clear_has_district();
}
inline const ::std::string& Address::district() const {
  return *district_;
}
inline void Address::set_district(const ::std::string& value) {
  set_has_district();
  if (district_ == &::google::protobuf::internal::kEmptyString) {
    district_ = new ::std::string;
  }
  district_->assign(value);
}
inline void Address::set_district(const char* value) {
  set_has_district();
  if (district_ == &::google::protobuf::internal::kEmptyString) {
    district_ = new ::std::string;
  }
  district_->assign(value);
}
inline void Address::set_district(const char* value, size_t size) {
  set_has_district();
  if (district_ == &::google::protobuf::internal::kEmptyString) {
    district_ = new ::std::string;
  }
  district_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Address::mutable_district() {
  set_has_district();
  if (district_ == &::google::protobuf::internal::kEmptyString) {
    district_ = new ::std::string;
  }
  return district_;
}
inline ::std::string* Address::release_district() {
  clear_has_district();
  if (district_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = district_;
    district_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Address::set_allocated_district(::std::string* district) {
  if (district_ != &::google::protobuf::internal::kEmptyString) {
    delete district_;
  }
  if (district) {
    set_has_district();
    district_ = district;
  } else {
    clear_has_district();
    district_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string number = 5;
inline bool Address::has_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Address::set_has_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Address::clear_has_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Address::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& Address::number() const {
  return *number_;
}
inline void Address::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void Address::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void Address::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Address::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* Address::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Address::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string city = 6;
inline bool Address::has_city() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Address::set_has_city() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Address::clear_has_city() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Address::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& Address::city() const {
  return *city_;
}
inline void Address::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void Address::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void Address::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Address::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* Address::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Address::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string county = 7;
inline bool Address::has_county() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Address::set_has_county() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Address::clear_has_county() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Address::clear_county() {
  if (county_ != &::google::protobuf::internal::kEmptyString) {
    county_->clear();
  }
  clear_has_county();
}
inline const ::std::string& Address::county() const {
  return *county_;
}
inline void Address::set_county(const ::std::string& value) {
  set_has_county();
  if (county_ == &::google::protobuf::internal::kEmptyString) {
    county_ = new ::std::string;
  }
  county_->assign(value);
}
inline void Address::set_county(const char* value) {
  set_has_county();
  if (county_ == &::google::protobuf::internal::kEmptyString) {
    county_ = new ::std::string;
  }
  county_->assign(value);
}
inline void Address::set_county(const char* value, size_t size) {
  set_has_county();
  if (county_ == &::google::protobuf::internal::kEmptyString) {
    county_ = new ::std::string;
  }
  county_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Address::mutable_county() {
  set_has_county();
  if (county_ == &::google::protobuf::internal::kEmptyString) {
    county_ = new ::std::string;
  }
  return county_;
}
inline ::std::string* Address::release_county() {
  clear_has_county();
  if (county_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = county_;
    county_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Address::set_allocated_county(::std::string* county) {
  if (county_ != &::google::protobuf::internal::kEmptyString) {
    delete county_;
  }
  if (county) {
    set_has_county();
    county_ = county;
  } else {
    clear_has_county();
    county_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string country = 8;
inline bool Address::has_country() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Address::set_has_country() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Address::clear_has_country() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Address::clear_country() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& Address::country() const {
  return *country_;
}
inline void Address::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void Address::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void Address::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Address::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  return country_;
}
inline ::std::string* Address::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Address::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DeliveryPlaceSpecification

// required int64 id = 1;
inline bool DeliveryPlaceSpecification::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliveryPlaceSpecification::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliveryPlaceSpecification::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliveryPlaceSpecification::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 DeliveryPlaceSpecification::id() const {
  return id_;
}
inline void DeliveryPlaceSpecification::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 location_id = 2;
inline bool DeliveryPlaceSpecification::has_location_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliveryPlaceSpecification::set_has_location_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliveryPlaceSpecification::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliveryPlaceSpecification::clear_location_id() {
  location_id_ = GOOGLE_LONGLONG(0);
  clear_has_location_id();
}
inline ::google::protobuf::int64 DeliveryPlaceSpecification::location_id() const {
  return location_id_;
}
inline void DeliveryPlaceSpecification::set_location_id(::google::protobuf::int64 value) {
  set_has_location_id();
  location_id_ = value;
}

// optional int64 building_id = 3;
inline bool DeliveryPlaceSpecification::has_building_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliveryPlaceSpecification::set_has_building_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliveryPlaceSpecification::clear_has_building_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliveryPlaceSpecification::clear_building_id() {
  building_id_ = GOOGLE_LONGLONG(0);
  clear_has_building_id();
}
inline ::google::protobuf::int64 DeliveryPlaceSpecification::building_id() const {
  return building_id_;
}
inline void DeliveryPlaceSpecification::set_building_id(::google::protobuf::int64 value) {
  set_has_building_id();
  building_id_ = value;
}

// optional int64 delivery_place_id = 4;
inline bool DeliveryPlaceSpecification::has_delivery_place_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeliveryPlaceSpecification::set_has_delivery_place_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeliveryPlaceSpecification::clear_has_delivery_place_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeliveryPlaceSpecification::clear_delivery_place_id() {
  delivery_place_id_ = GOOGLE_LONGLONG(0);
  clear_has_delivery_place_id();
}
inline ::google::protobuf::int64 DeliveryPlaceSpecification::delivery_place_id() const {
  return delivery_place_id_;
}
inline void DeliveryPlaceSpecification::set_delivery_place_id(::google::protobuf::int64 value) {
  set_has_delivery_place_id();
  delivery_place_id_ = value;
}

// optional int64 place_type_id = 5;
inline bool DeliveryPlaceSpecification::has_place_type_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeliveryPlaceSpecification::set_has_place_type_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeliveryPlaceSpecification::clear_has_place_type_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeliveryPlaceSpecification::clear_place_type_id() {
  place_type_id_ = GOOGLE_LONGLONG(0);
  clear_has_place_type_id();
}
inline ::google::protobuf::int64 DeliveryPlaceSpecification::place_type_id() const {
  return place_type_id_;
}
inline void DeliveryPlaceSpecification::set_place_type_id(::google::protobuf::int64 value) {
  set_has_place_type_id();
  place_type_id_ = value;
}

// optional string text_value = 6;
inline bool DeliveryPlaceSpecification::has_text_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeliveryPlaceSpecification::set_has_text_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeliveryPlaceSpecification::clear_has_text_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeliveryPlaceSpecification::clear_text_value() {
  if (text_value_ != &::google::protobuf::internal::kEmptyString) {
    text_value_->clear();
  }
  clear_has_text_value();
}
inline const ::std::string& DeliveryPlaceSpecification::text_value() const {
  return *text_value_;
}
inline void DeliveryPlaceSpecification::set_text_value(const ::std::string& value) {
  set_has_text_value();
  if (text_value_ == &::google::protobuf::internal::kEmptyString) {
    text_value_ = new ::std::string;
  }
  text_value_->assign(value);
}
inline void DeliveryPlaceSpecification::set_text_value(const char* value) {
  set_has_text_value();
  if (text_value_ == &::google::protobuf::internal::kEmptyString) {
    text_value_ = new ::std::string;
  }
  text_value_->assign(value);
}
inline void DeliveryPlaceSpecification::set_text_value(const char* value, size_t size) {
  set_has_text_value();
  if (text_value_ == &::google::protobuf::internal::kEmptyString) {
    text_value_ = new ::std::string;
  }
  text_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeliveryPlaceSpecification::mutable_text_value() {
  set_has_text_value();
  if (text_value_ == &::google::protobuf::internal::kEmptyString) {
    text_value_ = new ::std::string;
  }
  return text_value_;
}
inline ::std::string* DeliveryPlaceSpecification::release_text_value() {
  clear_has_text_value();
  if (text_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_value_;
    text_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeliveryPlaceSpecification::set_allocated_text_value(::std::string* text_value) {
  if (text_value_ != &::google::protobuf::internal::kEmptyString) {
    delete text_value_;
  }
  if (text_value) {
    set_has_text_value();
    text_value_ = text_value;
  } else {
    clear_has_text_value();
    text_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LegalEntity

// required int64 id = 1;
inline bool LegalEntity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LegalEntity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LegalEntity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LegalEntity::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 LegalEntity::id() const {
  return id_;
}
inline void LegalEntity::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 billing_address_id = 2;
inline bool LegalEntity::has_billing_address_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LegalEntity::set_has_billing_address_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LegalEntity::clear_has_billing_address_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LegalEntity::clear_billing_address_id() {
  billing_address_id_ = GOOGLE_LONGLONG(0);
  clear_has_billing_address_id();
}
inline ::google::protobuf::int64 LegalEntity::billing_address_id() const {
  return billing_address_id_;
}
inline void LegalEntity::set_billing_address_id(::google::protobuf::int64 value) {
  set_has_billing_address_id();
  billing_address_id_ = value;
}

// optional string VATIN = 3;
inline bool LegalEntity::has_vatin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LegalEntity::set_has_vatin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LegalEntity::clear_has_vatin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LegalEntity::clear_vatin() {
  if (vatin_ != &::google::protobuf::internal::kEmptyString) {
    vatin_->clear();
  }
  clear_has_vatin();
}
inline const ::std::string& LegalEntity::vatin() const {
  return *vatin_;
}
inline void LegalEntity::set_vatin(const ::std::string& value) {
  set_has_vatin();
  if (vatin_ == &::google::protobuf::internal::kEmptyString) {
    vatin_ = new ::std::string;
  }
  vatin_->assign(value);
}
inline void LegalEntity::set_vatin(const char* value) {
  set_has_vatin();
  if (vatin_ == &::google::protobuf::internal::kEmptyString) {
    vatin_ = new ::std::string;
  }
  vatin_->assign(value);
}
inline void LegalEntity::set_vatin(const char* value, size_t size) {
  set_has_vatin();
  if (vatin_ == &::google::protobuf::internal::kEmptyString) {
    vatin_ = new ::std::string;
  }
  vatin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LegalEntity::mutable_vatin() {
  set_has_vatin();
  if (vatin_ == &::google::protobuf::internal::kEmptyString) {
    vatin_ = new ::std::string;
  }
  return vatin_;
}
inline ::std::string* LegalEntity::release_vatin() {
  clear_has_vatin();
  if (vatin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vatin_;
    vatin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LegalEntity::set_allocated_vatin(::std::string* vatin) {
  if (vatin_ != &::google::protobuf::internal::kEmptyString) {
    delete vatin_;
  }
  if (vatin) {
    set_has_vatin();
    vatin_ = vatin;
  } else {
    clear_has_vatin();
    vatin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 registered_office_id = 4;
inline bool LegalEntity::has_registered_office_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LegalEntity::set_has_registered_office_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LegalEntity::clear_has_registered_office_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LegalEntity::clear_registered_office_id() {
  registered_office_id_ = GOOGLE_LONGLONG(0);
  clear_has_registered_office_id();
}
inline ::google::protobuf::int64 LegalEntity::registered_office_id() const {
  return registered_office_id_;
}
inline void LegalEntity::set_registered_office_id(::google::protobuf::int64 value) {
  set_has_registered_office_id();
  registered_office_id_ = value;
}

// optional string ref_no = 5;
inline bool LegalEntity::has_ref_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LegalEntity::set_has_ref_no() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LegalEntity::clear_has_ref_no() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LegalEntity::clear_ref_no() {
  if (ref_no_ != &::google::protobuf::internal::kEmptyString) {
    ref_no_->clear();
  }
  clear_has_ref_no();
}
inline const ::std::string& LegalEntity::ref_no() const {
  return *ref_no_;
}
inline void LegalEntity::set_ref_no(const ::std::string& value) {
  set_has_ref_no();
  if (ref_no_ == &::google::protobuf::internal::kEmptyString) {
    ref_no_ = new ::std::string;
  }
  ref_no_->assign(value);
}
inline void LegalEntity::set_ref_no(const char* value) {
  set_has_ref_no();
  if (ref_no_ == &::google::protobuf::internal::kEmptyString) {
    ref_no_ = new ::std::string;
  }
  ref_no_->assign(value);
}
inline void LegalEntity::set_ref_no(const char* value, size_t size) {
  set_has_ref_no();
  if (ref_no_ == &::google::protobuf::internal::kEmptyString) {
    ref_no_ = new ::std::string;
  }
  ref_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LegalEntity::mutable_ref_no() {
  set_has_ref_no();
  if (ref_no_ == &::google::protobuf::internal::kEmptyString) {
    ref_no_ = new ::std::string;
  }
  return ref_no_;
}
inline ::std::string* LegalEntity::release_ref_no() {
  clear_has_ref_no();
  if (ref_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ref_no_;
    ref_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LegalEntity::set_allocated_ref_no(::std::string* ref_no) {
  if (ref_no_ != &::google::protobuf::internal::kEmptyString) {
    delete ref_no_;
  }
  if (ref_no) {
    set_has_ref_no();
    ref_no_ = ref_no;
  } else {
    clear_has_ref_no();
    ref_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Meeting

// required int64 id = 1;
inline bool Meeting::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Meeting::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Meeting::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Meeting::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Meeting::id() const {
  return id_;
}
inline void Meeting::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 date = 2;
inline bool Meeting::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Meeting::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Meeting::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Meeting::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
  clear_has_date();
}
inline ::google::protobuf::int64 Meeting::date() const {
  return date_;
}
inline void Meeting::set_date(::google::protobuf::int64 value) {
  set_has_date();
  date_ = value;
}

// optional .Interval duration = 3;
inline bool Meeting::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Meeting::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Meeting::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Meeting::clear_duration() {
  if (duration_ != NULL) duration_->::Interval::Clear();
  clear_has_duration();
}
inline const ::Interval& Meeting::duration() const {
  return duration_ != NULL ? *duration_ : *default_instance_->duration_;
}
inline ::Interval* Meeting::mutable_duration() {
  set_has_duration();
  if (duration_ == NULL) duration_ = new ::Interval;
  return duration_;
}
inline ::Interval* Meeting::release_duration() {
  clear_has_duration();
  ::Interval* temp = duration_;
  duration_ = NULL;
  return temp;
}
inline void Meeting::set_allocated_duration(::Interval* duration) {
  delete duration_;
  duration_ = duration;
  if (duration) {
    set_has_duration();
  } else {
    clear_has_duration();
  }
}

// optional string topic = 4;
inline bool Meeting::has_topic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Meeting::set_has_topic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Meeting::clear_has_topic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Meeting::clear_topic() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& Meeting::topic() const {
  return *topic_;
}
inline void Meeting::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void Meeting::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void Meeting::set_topic(const char* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Meeting::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  return topic_;
}
inline ::std::string* Meeting::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Meeting::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string result = 5;
inline bool Meeting::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Meeting::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Meeting::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Meeting::clear_result() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& Meeting::result() const {
  return *result_;
}
inline void Meeting::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void Meeting::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void Meeting::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Meeting::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  return result_;
}
inline ::std::string* Meeting::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Meeting::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 place = 6;
inline bool Meeting::has_place() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Meeting::set_has_place() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Meeting::clear_has_place() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Meeting::clear_place() {
  place_ = GOOGLE_LONGLONG(0);
  clear_has_place();
}
inline ::google::protobuf::int64 Meeting::place() const {
  return place_;
}
inline void Meeting::set_place(::google::protobuf::int64 value) {
  set_has_place();
  place_ = value;
}

// -------------------------------------------------------------------

// Location

// required int64 id = 1;
inline bool Location::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Location::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Location::id() const {
  return id_;
}
inline void Location::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Delivery

// required int64 id = 1;
inline bool Delivery::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Delivery::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Delivery::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Delivery::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Delivery::id() const {
  return id_;
}
inline void Delivery::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 restaurant_id = 2;
inline bool Delivery::has_restaurant_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Delivery::set_has_restaurant_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Delivery::clear_has_restaurant_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Delivery::clear_restaurant_id() {
  restaurant_id_ = GOOGLE_LONGLONG(0);
  clear_has_restaurant_id();
}
inline ::google::protobuf::int64 Delivery::restaurant_id() const {
  return restaurant_id_;
}
inline void Delivery::set_restaurant_id(::google::protobuf::int64 value) {
  set_has_restaurant_id();
  restaurant_id_ = value;
}

// optional int64 delivering_guy_id = 3;
inline bool Delivery::has_delivering_guy_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Delivery::set_has_delivering_guy_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Delivery::clear_has_delivering_guy_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Delivery::clear_delivering_guy_id() {
  delivering_guy_id_ = GOOGLE_LONGLONG(0);
  clear_has_delivering_guy_id();
}
inline ::google::protobuf::int64 Delivery::delivering_guy_id() const {
  return delivering_guy_id_;
}
inline void Delivery::set_delivering_guy_id(::google::protobuf::int64 value) {
  set_has_delivering_guy_id();
  delivering_guy_id_ = value;
}

// optional int64 order_id = 4;
inline bool Delivery::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Delivery::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Delivery::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Delivery::clear_order_id() {
  order_id_ = GOOGLE_LONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::int64 Delivery::order_id() const {
  return order_id_;
}
inline void Delivery::set_order_id(::google::protobuf::int64 value) {
  set_has_order_id();
  order_id_ = value;
}

// optional int64 eta_arival = 5;
inline bool Delivery::has_eta_arival() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Delivery::set_has_eta_arival() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Delivery::clear_has_eta_arival() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Delivery::clear_eta_arival() {
  eta_arival_ = GOOGLE_LONGLONG(0);
  clear_has_eta_arival();
}
inline ::google::protobuf::int64 Delivery::eta_arival() const {
  return eta_arival_;
}
inline void Delivery::set_eta_arival(::google::protobuf::int64 value) {
  set_has_eta_arival();
  eta_arival_ = value;
}

// optional int64 arrival = 6;
inline bool Delivery::has_arrival() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Delivery::set_has_arrival() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Delivery::clear_has_arrival() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Delivery::clear_arrival() {
  arrival_ = GOOGLE_LONGLONG(0);
  clear_has_arrival();
}
inline ::google::protobuf::int64 Delivery::arrival() const {
  return arrival_;
}
inline void Delivery::set_arrival(::google::protobuf::int64 value) {
  set_has_arrival();
  arrival_ = value;
}

// optional int64 location_id = 7;
inline bool Delivery::has_location_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Delivery::set_has_location_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Delivery::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Delivery::clear_location_id() {
  location_id_ = GOOGLE_LONGLONG(0);
  clear_has_location_id();
}
inline ::google::protobuf::int64 Delivery::location_id() const {
  return location_id_;
}
inline void Delivery::set_location_id(::google::protobuf::int64 value) {
  set_has_location_id();
  location_id_ = value;
}

// -------------------------------------------------------------------

// Device

// required int64 id = 1;
inline bool Device::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Device::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Device::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Device::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Device::id() const {
  return id_;
}
inline void Device::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string UUID = 2;
inline bool Device::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Device::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Device::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Device::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& Device::uuid() const {
  return *uuid_;
}
inline void Device::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Device::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Device::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Device::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* Device::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Device::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tel = 3;
inline bool Device::has_tel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Device::set_has_tel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Device::clear_has_tel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Device::clear_tel() {
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    tel_->clear();
  }
  clear_has_tel();
}
inline const ::std::string& Device::tel() const {
  return *tel_;
}
inline void Device::set_tel(const ::std::string& value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
}
inline void Device::set_tel(const char* value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
}
inline void Device::set_tel(const char* value, size_t size) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Device::mutable_tel() {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  return tel_;
}
inline ::std::string* Device::release_tel() {
  clear_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tel_;
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Device::set_allocated_tel(::std::string* tel) {
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    delete tel_;
  }
  if (tel) {
    set_has_tel();
    tel_ = tel;
  } else {
    clear_has_tel();
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool receivessms = 4;
inline bool Device::has_receivessms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Device::set_has_receivessms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Device::clear_has_receivessms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Device::clear_receivessms() {
  receivessms_ = false;
  clear_has_receivessms();
}
inline bool Device::receivessms() const {
  return receivessms_;
}
inline void Device::set_receivessms(bool value) {
  set_has_receivessms();
  receivessms_ = value;
}

// -------------------------------------------------------------------

// Image

// required int64 id = 1;
inline bool Image::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Image::id() const {
  return id_;
}
inline void Image::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Image::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Image::name() const {
  return *name_;
}
inline void Image::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Image::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Image::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Image::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string data = 3;
inline bool Image::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Image::data() const {
  return *data_;
}
inline void Image::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Image::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Image::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Image::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 artist_id = 4;
inline bool Image::has_artist_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_artist_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_artist_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_artist_id() {
  artist_id_ = GOOGLE_LONGLONG(0);
  clear_has_artist_id();
}
inline ::google::protobuf::int64 Image::artist_id() const {
  return artist_id_;
}
inline void Image::set_artist_id(::google::protobuf::int64 value) {
  set_has_artist_id();
  artist_id_ = value;
}

// optional string comment = 5;
inline bool Image::has_comment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_comment() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_comment() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& Image::comment() const {
  return *comment_;
}
inline void Image::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Image::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Image::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* Image::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Order

// required int64 id = 1;
inline bool Order::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Order::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Order::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Order::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Order::id() const {
  return id_;
}
inline void Order::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 client_id = 2;
inline bool Order::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Order::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Order::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Order::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
  clear_has_client_id();
}
inline ::google::protobuf::int64 Order::client_id() const {
  return client_id_;
}
inline void Order::set_client_id(::google::protobuf::int64 value) {
  set_has_client_id();
  client_id_ = value;
}

// optional string notes = 3;
inline bool Order::has_notes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Order::set_has_notes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Order::clear_has_notes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Order::clear_notes() {
  if (notes_ != &::google::protobuf::internal::kEmptyString) {
    notes_->clear();
  }
  clear_has_notes();
}
inline const ::std::string& Order::notes() const {
  return *notes_;
}
inline void Order::set_notes(const ::std::string& value) {
  set_has_notes();
  if (notes_ == &::google::protobuf::internal::kEmptyString) {
    notes_ = new ::std::string;
  }
  notes_->assign(value);
}
inline void Order::set_notes(const char* value) {
  set_has_notes();
  if (notes_ == &::google::protobuf::internal::kEmptyString) {
    notes_ = new ::std::string;
  }
  notes_->assign(value);
}
inline void Order::set_notes(const char* value, size_t size) {
  set_has_notes();
  if (notes_ == &::google::protobuf::internal::kEmptyString) {
    notes_ = new ::std::string;
  }
  notes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Order::mutable_notes() {
  set_has_notes();
  if (notes_ == &::google::protobuf::internal::kEmptyString) {
    notes_ = new ::std::string;
  }
  return notes_;
}
inline ::std::string* Order::release_notes() {
  clear_has_notes();
  if (notes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notes_;
    notes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Order::set_allocated_notes(::std::string* notes) {
  if (notes_ != &::google::protobuf::internal::kEmptyString) {
    delete notes_;
  }
  if (notes) {
    set_has_notes();
    notes_ = notes;
  } else {
    clear_has_notes();
    notes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 delivery_place_id = 4;
inline bool Order::has_delivery_place_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Order::set_has_delivery_place_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Order::clear_has_delivery_place_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Order::clear_delivery_place_id() {
  delivery_place_id_ = GOOGLE_LONGLONG(0);
  clear_has_delivery_place_id();
}
inline ::google::protobuf::int64 Order::delivery_place_id() const {
  return delivery_place_id_;
}
inline void Order::set_delivery_place_id(::google::protobuf::int64 value) {
  set_has_delivery_place_id();
  delivery_place_id_ = value;
}

// optional string delivery_box_id = 5;
inline bool Order::has_delivery_box_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Order::set_has_delivery_box_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Order::clear_has_delivery_box_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Order::clear_delivery_box_id() {
  if (delivery_box_id_ != &::google::protobuf::internal::kEmptyString) {
    delivery_box_id_->clear();
  }
  clear_has_delivery_box_id();
}
inline const ::std::string& Order::delivery_box_id() const {
  return *delivery_box_id_;
}
inline void Order::set_delivery_box_id(const ::std::string& value) {
  set_has_delivery_box_id();
  if (delivery_box_id_ == &::google::protobuf::internal::kEmptyString) {
    delivery_box_id_ = new ::std::string;
  }
  delivery_box_id_->assign(value);
}
inline void Order::set_delivery_box_id(const char* value) {
  set_has_delivery_box_id();
  if (delivery_box_id_ == &::google::protobuf::internal::kEmptyString) {
    delivery_box_id_ = new ::std::string;
  }
  delivery_box_id_->assign(value);
}
inline void Order::set_delivery_box_id(const char* value, size_t size) {
  set_has_delivery_box_id();
  if (delivery_box_id_ == &::google::protobuf::internal::kEmptyString) {
    delivery_box_id_ = new ::std::string;
  }
  delivery_box_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Order::mutable_delivery_box_id() {
  set_has_delivery_box_id();
  if (delivery_box_id_ == &::google::protobuf::internal::kEmptyString) {
    delivery_box_id_ = new ::std::string;
  }
  return delivery_box_id_;
}
inline ::std::string* Order::release_delivery_box_id() {
  clear_has_delivery_box_id();
  if (delivery_box_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = delivery_box_id_;
    delivery_box_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Order::set_allocated_delivery_box_id(::std::string* delivery_box_id) {
  if (delivery_box_id_ != &::google::protobuf::internal::kEmptyString) {
    delete delivery_box_id_;
  }
  if (delivery_box_id) {
    set_has_delivery_box_id();
    delivery_box_id_ = delivery_box_id;
  } else {
    clear_has_delivery_box_id();
    delivery_box_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Contact

// required int64 id = 1;
inline bool Contact::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contact::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contact::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contact::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Contact::id() const {
  return id_;
}
inline void Contact::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Contact::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Contact::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Contact::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Contact::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Contact::name() const {
  return *name_;
}
inline void Contact::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Contact::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Contact::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Contact::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Contact::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 address_id = 3;
inline bool Contact::has_address_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Contact::set_has_address_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Contact::clear_has_address_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Contact::clear_address_id() {
  address_id_ = GOOGLE_LONGLONG(0);
  clear_has_address_id();
}
inline ::google::protobuf::int64 Contact::address_id() const {
  return address_id_;
}
inline void Contact::set_address_id(::google::protobuf::int64 value) {
  set_has_address_id();
  address_id_ = value;
}

// optional string mobile = 4;
inline bool Contact::has_mobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Contact::set_has_mobile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Contact::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Contact::clear_mobile() {
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    mobile_->clear();
  }
  clear_has_mobile();
}
inline const ::std::string& Contact::mobile() const {
  return *mobile_;
}
inline void Contact::set_mobile(const ::std::string& value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void Contact::set_mobile(const char* value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void Contact::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  return mobile_;
}
inline ::std::string* Contact::release_mobile() {
  clear_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobile_;
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Contact::set_allocated_mobile(::std::string* mobile) {
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (mobile) {
    set_has_mobile();
    mobile_ = mobile;
  } else {
    clear_has_mobile();
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string email = 5;
inline bool Contact::has_email() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Contact::set_has_email() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Contact::clear_has_email() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Contact::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Contact::email() const {
  return *email_;
}
inline void Contact::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Contact::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Contact::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Contact::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Contact::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string landline = 6;
inline bool Contact::has_landline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Contact::set_has_landline() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Contact::clear_has_landline() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Contact::clear_landline() {
  if (landline_ != &::google::protobuf::internal::kEmptyString) {
    landline_->clear();
  }
  clear_has_landline();
}
inline const ::std::string& Contact::landline() const {
  return *landline_;
}
inline void Contact::set_landline(const ::std::string& value) {
  set_has_landline();
  if (landline_ == &::google::protobuf::internal::kEmptyString) {
    landline_ = new ::std::string;
  }
  landline_->assign(value);
}
inline void Contact::set_landline(const char* value) {
  set_has_landline();
  if (landline_ == &::google::protobuf::internal::kEmptyString) {
    landline_ = new ::std::string;
  }
  landline_->assign(value);
}
inline void Contact::set_landline(const char* value, size_t size) {
  set_has_landline();
  if (landline_ == &::google::protobuf::internal::kEmptyString) {
    landline_ = new ::std::string;
  }
  landline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_landline() {
  set_has_landline();
  if (landline_ == &::google::protobuf::internal::kEmptyString) {
    landline_ = new ::std::string;
  }
  return landline_;
}
inline ::std::string* Contact::release_landline() {
  clear_has_landline();
  if (landline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = landline_;
    landline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Contact::set_allocated_landline(::std::string* landline) {
  if (landline_ != &::google::protobuf::internal::kEmptyString) {
    delete landline_;
  }
  if (landline) {
    set_has_landline();
    landline_ = landline;
  } else {
    clear_has_landline();
    landline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string VATIN = 7;
inline bool Contact::has_vatin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Contact::set_has_vatin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Contact::clear_has_vatin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Contact::clear_vatin() {
  if (vatin_ != &::google::protobuf::internal::kEmptyString) {
    vatin_->clear();
  }
  clear_has_vatin();
}
inline const ::std::string& Contact::vatin() const {
  return *vatin_;
}
inline void Contact::set_vatin(const ::std::string& value) {
  set_has_vatin();
  if (vatin_ == &::google::protobuf::internal::kEmptyString) {
    vatin_ = new ::std::string;
  }
  vatin_->assign(value);
}
inline void Contact::set_vatin(const char* value) {
  set_has_vatin();
  if (vatin_ == &::google::protobuf::internal::kEmptyString) {
    vatin_ = new ::std::string;
  }
  vatin_->assign(value);
}
inline void Contact::set_vatin(const char* value, size_t size) {
  set_has_vatin();
  if (vatin_ == &::google::protobuf::internal::kEmptyString) {
    vatin_ = new ::std::string;
  }
  vatin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_vatin() {
  set_has_vatin();
  if (vatin_ == &::google::protobuf::internal::kEmptyString) {
    vatin_ = new ::std::string;
  }
  return vatin_;
}
inline ::std::string* Contact::release_vatin() {
  clear_has_vatin();
  if (vatin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vatin_;
    vatin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Contact::set_allocated_vatin(::std::string* vatin) {
  if (vatin_ != &::google::protobuf::internal::kEmptyString) {
    delete vatin_;
  }
  if (vatin) {
    set_has_vatin();
    vatin_ = vatin;
  } else {
    clear_has_vatin();
    vatin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OrderEntry

// required int64 id = 1;
inline bool OrderEntry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderEntry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderEntry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderEntry::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 OrderEntry::id() const {
  return id_;
}
inline void OrderEntry::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 order_id = 2;
inline bool OrderEntry::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderEntry::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderEntry::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderEntry::clear_order_id() {
  order_id_ = GOOGLE_LONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::int64 OrderEntry::order_id() const {
  return order_id_;
}
inline void OrderEntry::set_order_id(::google::protobuf::int64 value) {
  set_has_order_id();
  order_id_ = value;
}

// optional int64 offer_id = 3;
inline bool OrderEntry::has_offer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderEntry::set_has_offer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderEntry::clear_has_offer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderEntry::clear_offer_id() {
  offer_id_ = GOOGLE_LONGLONG(0);
  clear_has_offer_id();
}
inline ::google::protobuf::int64 OrderEntry::offer_id() const {
  return offer_id_;
}
inline void OrderEntry::set_offer_id(::google::protobuf::int64 value) {
  set_has_offer_id();
  offer_id_ = value;
}

// optional .Decimal qty = 4;
inline bool OrderEntry::has_qty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderEntry::set_has_qty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderEntry::clear_has_qty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderEntry::clear_qty() {
  if (qty_ != NULL) qty_->::Decimal::Clear();
  clear_has_qty();
}
inline const ::Decimal& OrderEntry::qty() const {
  return qty_ != NULL ? *qty_ : *default_instance_->qty_;
}
inline ::Decimal* OrderEntry::mutable_qty() {
  set_has_qty();
  if (qty_ == NULL) qty_ = new ::Decimal;
  return qty_;
}
inline ::Decimal* OrderEntry::release_qty() {
  clear_has_qty();
  ::Decimal* temp = qty_;
  qty_ = NULL;
  return temp;
}
inline void OrderEntry::set_allocated_qty(::Decimal* qty) {
  delete qty_;
  qty_ = qty;
  if (qty) {
    set_has_qty();
  } else {
    clear_has_qty();
  }
}

// -------------------------------------------------------------------

// MeetingsToContact

// required int64 contact_id = 1;
inline bool MeetingsToContact::has_contact_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeetingsToContact::set_has_contact_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeetingsToContact::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeetingsToContact::clear_contact_id() {
  contact_id_ = GOOGLE_LONGLONG(0);
  clear_has_contact_id();
}
inline ::google::protobuf::int64 MeetingsToContact::contact_id() const {
  return contact_id_;
}
inline void MeetingsToContact::set_contact_id(::google::protobuf::int64 value) {
  set_has_contact_id();
  contact_id_ = value;
}

// required string role = 2;
inline bool MeetingsToContact::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeetingsToContact::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeetingsToContact::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeetingsToContact::clear_role() {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    role_->clear();
  }
  clear_has_role();
}
inline const ::std::string& MeetingsToContact::role() const {
  return *role_;
}
inline void MeetingsToContact::set_role(const ::std::string& value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void MeetingsToContact::set_role(const char* value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void MeetingsToContact::set_role(const char* value, size_t size) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MeetingsToContact::mutable_role() {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  return role_;
}
inline ::std::string* MeetingsToContact::release_role() {
  clear_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_;
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MeetingsToContact::set_allocated_role(::std::string* role) {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (role) {
    set_has_role();
    role_ = role;
  } else {
    clear_has_role();
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 meeting_id = 3;
inline bool MeetingsToContact::has_meeting_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeetingsToContact::set_has_meeting_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeetingsToContact::clear_has_meeting_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeetingsToContact::clear_meeting_id() {
  meeting_id_ = GOOGLE_LONGLONG(0);
  clear_has_meeting_id();
}
inline ::google::protobuf::int64 MeetingsToContact::meeting_id() const {
  return meeting_id_;
}
inline void MeetingsToContact::set_meeting_id(::google::protobuf::int64 value) {
  set_has_meeting_id();
  meeting_id_ = value;
}

// -------------------------------------------------------------------

// DeliveryPlace

// required int64 id = 1;
inline bool DeliveryPlace::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliveryPlace::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliveryPlace::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliveryPlace::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 DeliveryPlace::id() const {
  return id_;
}
inline void DeliveryPlace::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 location_id = 2;
inline bool DeliveryPlace::has_location_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliveryPlace::set_has_location_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliveryPlace::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliveryPlace::clear_location_id() {
  location_id_ = GOOGLE_LONGLONG(0);
  clear_has_location_id();
}
inline ::google::protobuf::int64 DeliveryPlace::location_id() const {
  return location_id_;
}
inline void DeliveryPlace::set_location_id(::google::protobuf::int64 value) {
  set_has_location_id();
  location_id_ = value;
}

// optional int64 building_id = 3;
inline bool DeliveryPlace::has_building_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliveryPlace::set_has_building_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliveryPlace::clear_has_building_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliveryPlace::clear_building_id() {
  building_id_ = GOOGLE_LONGLONG(0);
  clear_has_building_id();
}
inline ::google::protobuf::int64 DeliveryPlace::building_id() const {
  return building_id_;
}
inline void DeliveryPlace::set_building_id(::google::protobuf::int64 value) {
  set_has_building_id();
  building_id_ = value;
}

// optional string short_name = 4;
inline bool DeliveryPlace::has_short_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeliveryPlace::set_has_short_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeliveryPlace::clear_has_short_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeliveryPlace::clear_short_name() {
  if (short_name_ != &::google::protobuf::internal::kEmptyString) {
    short_name_->clear();
  }
  clear_has_short_name();
}
inline const ::std::string& DeliveryPlace::short_name() const {
  return *short_name_;
}
inline void DeliveryPlace::set_short_name(const ::std::string& value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::kEmptyString) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
}
inline void DeliveryPlace::set_short_name(const char* value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::kEmptyString) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
}
inline void DeliveryPlace::set_short_name(const char* value, size_t size) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::kEmptyString) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeliveryPlace::mutable_short_name() {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::kEmptyString) {
    short_name_ = new ::std::string;
  }
  return short_name_;
}
inline ::std::string* DeliveryPlace::release_short_name() {
  clear_has_short_name();
  if (short_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = short_name_;
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeliveryPlace::set_allocated_short_name(::std::string* short_name) {
  if (short_name_ != &::google::protobuf::internal::kEmptyString) {
    delete short_name_;
  }
  if (short_name) {
    set_has_short_name();
    short_name_ = short_name;
  } else {
    clear_has_short_name();
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 place_types = 5;
inline bool DeliveryPlace::has_place_types() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeliveryPlace::set_has_place_types() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeliveryPlace::clear_has_place_types() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeliveryPlace::clear_place_types() {
  place_types_ = GOOGLE_LONGLONG(0);
  clear_has_place_types();
}
inline ::google::protobuf::int64 DeliveryPlace::place_types() const {
  return place_types_;
}
inline void DeliveryPlace::set_place_types(::google::protobuf::int64 value) {
  set_has_place_types();
  place_types_ = value;
}

// -------------------------------------------------------------------

// Invoice

// required int64 id = 1;
inline bool Invoice::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Invoice::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Invoice::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Invoice::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Invoice::id() const {
  return id_;
}
inline void Invoice::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 emmiter_id = 2;
inline bool Invoice::has_emmiter_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Invoice::set_has_emmiter_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Invoice::clear_has_emmiter_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Invoice::clear_emmiter_id() {
  emmiter_id_ = GOOGLE_LONGLONG(0);
  clear_has_emmiter_id();
}
inline ::google::protobuf::int64 Invoice::emmiter_id() const {
  return emmiter_id_;
}
inline void Invoice::set_emmiter_id(::google::protobuf::int64 value) {
  set_has_emmiter_id();
  emmiter_id_ = value;
}

// optional int64 recipient_id = 3;
inline bool Invoice::has_recipient_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Invoice::set_has_recipient_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Invoice::clear_has_recipient_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Invoice::clear_recipient_id() {
  recipient_id_ = GOOGLE_LONGLONG(0);
  clear_has_recipient_id();
}
inline ::google::protobuf::int64 Invoice::recipient_id() const {
  return recipient_id_;
}
inline void Invoice::set_recipient_id(::google::protobuf::int64 value) {
  set_has_recipient_id();
  recipient_id_ = value;
}

// optional .Decimal sum = 4;
inline bool Invoice::has_sum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Invoice::set_has_sum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Invoice::clear_has_sum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Invoice::clear_sum() {
  if (sum_ != NULL) sum_->::Decimal::Clear();
  clear_has_sum();
}
inline const ::Decimal& Invoice::sum() const {
  return sum_ != NULL ? *sum_ : *default_instance_->sum_;
}
inline ::Decimal* Invoice::mutable_sum() {
  set_has_sum();
  if (sum_ == NULL) sum_ = new ::Decimal;
  return sum_;
}
inline ::Decimal* Invoice::release_sum() {
  clear_has_sum();
  ::Decimal* temp = sum_;
  sum_ = NULL;
  return temp;
}
inline void Invoice::set_allocated_sum(::Decimal* sum) {
  delete sum_;
  sum_ = sum;
  if (sum) {
    set_has_sum();
  } else {
    clear_has_sum();
  }
}

// optional int64 legal_entity_id = 5;
inline bool Invoice::has_legal_entity_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Invoice::set_has_legal_entity_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Invoice::clear_has_legal_entity_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Invoice::clear_legal_entity_id() {
  legal_entity_id_ = GOOGLE_LONGLONG(0);
  clear_has_legal_entity_id();
}
inline ::google::protobuf::int64 Invoice::legal_entity_id() const {
  return legal_entity_id_;
}
inline void Invoice::set_legal_entity_id(::google::protobuf::int64 value) {
  set_has_legal_entity_id();
  legal_entity_id_ = value;
}

// optional int64 receiver_person_id = 6;
inline bool Invoice::has_receiver_person_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Invoice::set_has_receiver_person_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Invoice::clear_has_receiver_person_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Invoice::clear_receiver_person_id() {
  receiver_person_id_ = GOOGLE_LONGLONG(0);
  clear_has_receiver_person_id();
}
inline ::google::protobuf::int64 Invoice::receiver_person_id() const {
  return receiver_person_id_;
}
inline void Invoice::set_receiver_person_id(::google::protobuf::int64 value) {
  set_has_receiver_person_id();
  receiver_person_id_ = value;
}

// -------------------------------------------------------------------

// Offer

// required int64 id = 1;
inline bool Offer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Offer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Offer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Offer::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Offer::id() const {
  return id_;
}
inline void Offer::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string valitity = 2;
inline bool Offer::has_valitity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Offer::set_has_valitity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Offer::clear_has_valitity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Offer::clear_valitity() {
  if (valitity_ != &::google::protobuf::internal::kEmptyString) {
    valitity_->clear();
  }
  clear_has_valitity();
}
inline const ::std::string& Offer::valitity() const {
  return *valitity_;
}
inline void Offer::set_valitity(const ::std::string& value) {
  set_has_valitity();
  if (valitity_ == &::google::protobuf::internal::kEmptyString) {
    valitity_ = new ::std::string;
  }
  valitity_->assign(value);
}
inline void Offer::set_valitity(const char* value) {
  set_has_valitity();
  if (valitity_ == &::google::protobuf::internal::kEmptyString) {
    valitity_ = new ::std::string;
  }
  valitity_->assign(value);
}
inline void Offer::set_valitity(const char* value, size_t size) {
  set_has_valitity();
  if (valitity_ == &::google::protobuf::internal::kEmptyString) {
    valitity_ = new ::std::string;
  }
  valitity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Offer::mutable_valitity() {
  set_has_valitity();
  if (valitity_ == &::google::protobuf::internal::kEmptyString) {
    valitity_ = new ::std::string;
  }
  return valitity_;
}
inline ::std::string* Offer::release_valitity() {
  clear_has_valitity();
  if (valitity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = valitity_;
    valitity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Offer::set_allocated_valitity(::std::string* valitity) {
  if (valitity_ != &::google::protobuf::internal::kEmptyString) {
    delete valitity_;
  }
  if (valitity) {
    set_has_valitity();
    valitity_ = valitity;
  } else {
    clear_has_valitity();
    valitity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 price = 3;
inline bool Offer::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Offer::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Offer::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Offer::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 Offer::price() const {
  return price_;
}
inline void Offer::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
}

// optional int64 location_id = 4;
inline bool Offer::has_location_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Offer::set_has_location_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Offer::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Offer::clear_location_id() {
  location_id_ = GOOGLE_LONGLONG(0);
  clear_has_location_id();
}
inline ::google::protobuf::int64 Offer::location_id() const {
  return location_id_;
}
inline void Offer::set_location_id(::google::protobuf::int64 value) {
  set_has_location_id();
  location_id_ = value;
}

// -------------------------------------------------------------------

// Building

// required int64 id = 1;
inline bool Building::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Building::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Building::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Building::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Building::id() const {
  return id_;
}
inline void Building::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 location_id = 2;
inline bool Building::has_location_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Building::set_has_location_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Building::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Building::clear_location_id() {
  location_id_ = GOOGLE_LONGLONG(0);
  clear_has_location_id();
}
inline ::google::protobuf::int64 Building::location_id() const {
  return location_id_;
}
inline void Building::set_location_id(::google::protobuf::int64 value) {
  set_has_location_id();
  location_id_ = value;
}

// -------------------------------------------------------------------

// PaymentsToOrder

// required int64 payment_id = 1;
inline bool PaymentsToOrder::has_payment_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaymentsToOrder::set_has_payment_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaymentsToOrder::clear_has_payment_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaymentsToOrder::clear_payment_id() {
  payment_id_ = GOOGLE_LONGLONG(0);
  clear_has_payment_id();
}
inline ::google::protobuf::int64 PaymentsToOrder::payment_id() const {
  return payment_id_;
}
inline void PaymentsToOrder::set_payment_id(::google::protobuf::int64 value) {
  set_has_payment_id();
  payment_id_ = value;
}

// required int64 order_id = 2;
inline bool PaymentsToOrder::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaymentsToOrder::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaymentsToOrder::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaymentsToOrder::clear_order_id() {
  order_id_ = GOOGLE_LONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::int64 PaymentsToOrder::order_id() const {
  return order_id_;
}
inline void PaymentsToOrder::set_order_id(::google::protobuf::int64 value) {
  set_has_order_id();
  order_id_ = value;
}

// optional .Decimal sum = 3;
inline bool PaymentsToOrder::has_sum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PaymentsToOrder::set_has_sum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PaymentsToOrder::clear_has_sum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PaymentsToOrder::clear_sum() {
  if (sum_ != NULL) sum_->::Decimal::Clear();
  clear_has_sum();
}
inline const ::Decimal& PaymentsToOrder::sum() const {
  return sum_ != NULL ? *sum_ : *default_instance_->sum_;
}
inline ::Decimal* PaymentsToOrder::mutable_sum() {
  set_has_sum();
  if (sum_ == NULL) sum_ = new ::Decimal;
  return sum_;
}
inline ::Decimal* PaymentsToOrder::release_sum() {
  clear_has_sum();
  ::Decimal* temp = sum_;
  sum_ = NULL;
  return temp;
}
inline void PaymentsToOrder::set_allocated_sum(::Decimal* sum) {
  delete sum_;
  sum_ = sum;
  if (sum) {
    set_has_sum();
  } else {
    clear_has_sum();
  }
}

// required int64 seq = 4;
inline bool PaymentsToOrder::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PaymentsToOrder::set_has_seq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PaymentsToOrder::clear_has_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PaymentsToOrder::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
  clear_has_seq();
}
inline ::google::protobuf::int64 PaymentsToOrder::seq() const {
  return seq_;
}
inline void PaymentsToOrder::set_seq(::google::protobuf::int64 value) {
  set_has_seq();
  seq_ = value;
}

// -------------------------------------------------------------------

// Decimal

// optional uint64 lo = 1;
inline bool Decimal::has_lo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Decimal::set_has_lo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Decimal::clear_has_lo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Decimal::clear_lo() {
  lo_ = GOOGLE_ULONGLONG(0);
  clear_has_lo();
}
inline ::google::protobuf::uint64 Decimal::lo() const {
  return lo_;
}
inline void Decimal::set_lo(::google::protobuf::uint64 value) {
  set_has_lo();
  lo_ = value;
}

// optional uint32 hi = 2;
inline bool Decimal::has_hi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Decimal::set_has_hi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Decimal::clear_has_hi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Decimal::clear_hi() {
  hi_ = 0u;
  clear_has_hi();
}
inline ::google::protobuf::uint32 Decimal::hi() const {
  return hi_;
}
inline void Decimal::set_hi(::google::protobuf::uint32 value) {
  set_has_hi();
  hi_ = value;
}

// optional uint32 signScale = 3;
inline bool Decimal::has_signscale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Decimal::set_has_signscale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Decimal::clear_has_signscale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Decimal::clear_signscale() {
  signscale_ = 0u;
  clear_has_signscale();
}
inline ::google::protobuf::uint32 Decimal::signscale() const {
  return signscale_;
}
inline void Decimal::set_signscale(::google::protobuf::uint32 value) {
  set_has_signscale();
  signscale_ = value;
}

// -------------------------------------------------------------------

// Interval

// optional uint64 start = 1;
inline bool Interval::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Interval::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Interval::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Interval::clear_start() {
  start_ = GOOGLE_ULONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::uint64 Interval::start() const {
  return start_;
}
inline void Interval::set_start(::google::protobuf::uint64 value) {
  set_has_start();
  start_ = value;
}

// optional uint64 end = 2;
inline bool Interval::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Interval::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Interval::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Interval::clear_end() {
  end_ = GOOGLE_ULONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::uint64 Interval::end() const {
  return end_;
}
inline void Interval::set_end(::google::protobuf::uint64 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// Menu

// required int64 id = 1;
inline bool Menu::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Menu::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Menu::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Menu::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Menu::id() const {
  return id_;
}
inline void Menu::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string recurrence = 2;
inline bool Menu::has_recurrence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Menu::set_has_recurrence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Menu::clear_has_recurrence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Menu::clear_recurrence() {
  if (recurrence_ != &::google::protobuf::internal::kEmptyString) {
    recurrence_->clear();
  }
  clear_has_recurrence();
}
inline const ::std::string& Menu::recurrence() const {
  return *recurrence_;
}
inline void Menu::set_recurrence(const ::std::string& value) {
  set_has_recurrence();
  if (recurrence_ == &::google::protobuf::internal::kEmptyString) {
    recurrence_ = new ::std::string;
  }
  recurrence_->assign(value);
}
inline void Menu::set_recurrence(const char* value) {
  set_has_recurrence();
  if (recurrence_ == &::google::protobuf::internal::kEmptyString) {
    recurrence_ = new ::std::string;
  }
  recurrence_->assign(value);
}
inline void Menu::set_recurrence(const char* value, size_t size) {
  set_has_recurrence();
  if (recurrence_ == &::google::protobuf::internal::kEmptyString) {
    recurrence_ = new ::std::string;
  }
  recurrence_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Menu::mutable_recurrence() {
  set_has_recurrence();
  if (recurrence_ == &::google::protobuf::internal::kEmptyString) {
    recurrence_ = new ::std::string;
  }
  return recurrence_;
}
inline ::std::string* Menu::release_recurrence() {
  clear_has_recurrence();
  if (recurrence_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recurrence_;
    recurrence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Menu::set_allocated_recurrence(::std::string* recurrence) {
  if (recurrence_ != &::google::protobuf::internal::kEmptyString) {
    delete recurrence_;
  }
  if (recurrence) {
    set_has_recurrence();
    recurrence_ = recurrence;
  } else {
    clear_has_recurrence();
    recurrence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 price = 3;
inline bool Menu::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Menu::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Menu::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Menu::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 Menu::price() const {
  return price_;
}
inline void Menu::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// PlaceType

// required int64 id = 1;
inline bool PlaceType::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaceType::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaceType::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaceType::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PlaceType::id() const {
  return id_;
}
inline void PlaceType::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// InvoicesToContact

// required int64 contact_id = 1;
inline bool InvoicesToContact::has_contact_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvoicesToContact::set_has_contact_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvoicesToContact::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvoicesToContact::clear_contact_id() {
  contact_id_ = GOOGLE_LONGLONG(0);
  clear_has_contact_id();
}
inline ::google::protobuf::int64 InvoicesToContact::contact_id() const {
  return contact_id_;
}
inline void InvoicesToContact::set_contact_id(::google::protobuf::int64 value) {
  set_has_contact_id();
  contact_id_ = value;
}

// required int64 invoice_id = 2;
inline bool InvoicesToContact::has_invoice_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvoicesToContact::set_has_invoice_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvoicesToContact::clear_has_invoice_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvoicesToContact::clear_invoice_id() {
  invoice_id_ = GOOGLE_LONGLONG(0);
  clear_has_invoice_id();
}
inline ::google::protobuf::int64 InvoicesToContact::invoice_id() const {
  return invoice_id_;
}
inline void InvoicesToContact::set_invoice_id(::google::protobuf::int64 value) {
  set_has_invoice_id();
  invoice_id_ = value;
}

// required string role = 3;
inline bool InvoicesToContact::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvoicesToContact::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvoicesToContact::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvoicesToContact::clear_role() {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    role_->clear();
  }
  clear_has_role();
}
inline const ::std::string& InvoicesToContact::role() const {
  return *role_;
}
inline void InvoicesToContact::set_role(const ::std::string& value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void InvoicesToContact::set_role(const char* value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void InvoicesToContact::set_role(const char* value, size_t size) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvoicesToContact::mutable_role() {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  return role_;
}
inline ::std::string* InvoicesToContact::release_role() {
  clear_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_;
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvoicesToContact::set_allocated_role(::std::string* role) {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (role) {
    set_has_role();
    role_ = role;
  } else {
    clear_has_role();
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GeometryColumn

// required string f_table_catalog = 1;
inline bool GeometryColumn::has_f_table_catalog() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeometryColumn::set_has_f_table_catalog() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeometryColumn::clear_has_f_table_catalog() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeometryColumn::clear_f_table_catalog() {
  if (f_table_catalog_ != &::google::protobuf::internal::kEmptyString) {
    f_table_catalog_->clear();
  }
  clear_has_f_table_catalog();
}
inline const ::std::string& GeometryColumn::f_table_catalog() const {
  return *f_table_catalog_;
}
inline void GeometryColumn::set_f_table_catalog(const ::std::string& value) {
  set_has_f_table_catalog();
  if (f_table_catalog_ == &::google::protobuf::internal::kEmptyString) {
    f_table_catalog_ = new ::std::string;
  }
  f_table_catalog_->assign(value);
}
inline void GeometryColumn::set_f_table_catalog(const char* value) {
  set_has_f_table_catalog();
  if (f_table_catalog_ == &::google::protobuf::internal::kEmptyString) {
    f_table_catalog_ = new ::std::string;
  }
  f_table_catalog_->assign(value);
}
inline void GeometryColumn::set_f_table_catalog(const char* value, size_t size) {
  set_has_f_table_catalog();
  if (f_table_catalog_ == &::google::protobuf::internal::kEmptyString) {
    f_table_catalog_ = new ::std::string;
  }
  f_table_catalog_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GeometryColumn::mutable_f_table_catalog() {
  set_has_f_table_catalog();
  if (f_table_catalog_ == &::google::protobuf::internal::kEmptyString) {
    f_table_catalog_ = new ::std::string;
  }
  return f_table_catalog_;
}
inline ::std::string* GeometryColumn::release_f_table_catalog() {
  clear_has_f_table_catalog();
  if (f_table_catalog_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = f_table_catalog_;
    f_table_catalog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GeometryColumn::set_allocated_f_table_catalog(::std::string* f_table_catalog) {
  if (f_table_catalog_ != &::google::protobuf::internal::kEmptyString) {
    delete f_table_catalog_;
  }
  if (f_table_catalog) {
    set_has_f_table_catalog();
    f_table_catalog_ = f_table_catalog;
  } else {
    clear_has_f_table_catalog();
    f_table_catalog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string f_table_schema = 2;
inline bool GeometryColumn::has_f_table_schema() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeometryColumn::set_has_f_table_schema() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeometryColumn::clear_has_f_table_schema() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeometryColumn::clear_f_table_schema() {
  if (f_table_schema_ != &::google::protobuf::internal::kEmptyString) {
    f_table_schema_->clear();
  }
  clear_has_f_table_schema();
}
inline const ::std::string& GeometryColumn::f_table_schema() const {
  return *f_table_schema_;
}
inline void GeometryColumn::set_f_table_schema(const ::std::string& value) {
  set_has_f_table_schema();
  if (f_table_schema_ == &::google::protobuf::internal::kEmptyString) {
    f_table_schema_ = new ::std::string;
  }
  f_table_schema_->assign(value);
}
inline void GeometryColumn::set_f_table_schema(const char* value) {
  set_has_f_table_schema();
  if (f_table_schema_ == &::google::protobuf::internal::kEmptyString) {
    f_table_schema_ = new ::std::string;
  }
  f_table_schema_->assign(value);
}
inline void GeometryColumn::set_f_table_schema(const char* value, size_t size) {
  set_has_f_table_schema();
  if (f_table_schema_ == &::google::protobuf::internal::kEmptyString) {
    f_table_schema_ = new ::std::string;
  }
  f_table_schema_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GeometryColumn::mutable_f_table_schema() {
  set_has_f_table_schema();
  if (f_table_schema_ == &::google::protobuf::internal::kEmptyString) {
    f_table_schema_ = new ::std::string;
  }
  return f_table_schema_;
}
inline ::std::string* GeometryColumn::release_f_table_schema() {
  clear_has_f_table_schema();
  if (f_table_schema_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = f_table_schema_;
    f_table_schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GeometryColumn::set_allocated_f_table_schema(::std::string* f_table_schema) {
  if (f_table_schema_ != &::google::protobuf::internal::kEmptyString) {
    delete f_table_schema_;
  }
  if (f_table_schema) {
    set_has_f_table_schema();
    f_table_schema_ = f_table_schema;
  } else {
    clear_has_f_table_schema();
    f_table_schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string f_table_name = 3;
inline bool GeometryColumn::has_f_table_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeometryColumn::set_has_f_table_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GeometryColumn::clear_has_f_table_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GeometryColumn::clear_f_table_name() {
  if (f_table_name_ != &::google::protobuf::internal::kEmptyString) {
    f_table_name_->clear();
  }
  clear_has_f_table_name();
}
inline const ::std::string& GeometryColumn::f_table_name() const {
  return *f_table_name_;
}
inline void GeometryColumn::set_f_table_name(const ::std::string& value) {
  set_has_f_table_name();
  if (f_table_name_ == &::google::protobuf::internal::kEmptyString) {
    f_table_name_ = new ::std::string;
  }
  f_table_name_->assign(value);
}
inline void GeometryColumn::set_f_table_name(const char* value) {
  set_has_f_table_name();
  if (f_table_name_ == &::google::protobuf::internal::kEmptyString) {
    f_table_name_ = new ::std::string;
  }
  f_table_name_->assign(value);
}
inline void GeometryColumn::set_f_table_name(const char* value, size_t size) {
  set_has_f_table_name();
  if (f_table_name_ == &::google::protobuf::internal::kEmptyString) {
    f_table_name_ = new ::std::string;
  }
  f_table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GeometryColumn::mutable_f_table_name() {
  set_has_f_table_name();
  if (f_table_name_ == &::google::protobuf::internal::kEmptyString) {
    f_table_name_ = new ::std::string;
  }
  return f_table_name_;
}
inline ::std::string* GeometryColumn::release_f_table_name() {
  clear_has_f_table_name();
  if (f_table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = f_table_name_;
    f_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GeometryColumn::set_allocated_f_table_name(::std::string* f_table_name) {
  if (f_table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete f_table_name_;
  }
  if (f_table_name) {
    set_has_f_table_name();
    f_table_name_ = f_table_name;
  } else {
    clear_has_f_table_name();
    f_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string f_geometry_column = 4;
inline bool GeometryColumn::has_f_geometry_column() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GeometryColumn::set_has_f_geometry_column() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GeometryColumn::clear_has_f_geometry_column() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GeometryColumn::clear_f_geometry_column() {
  if (f_geometry_column_ != &::google::protobuf::internal::kEmptyString) {
    f_geometry_column_->clear();
  }
  clear_has_f_geometry_column();
}
inline const ::std::string& GeometryColumn::f_geometry_column() const {
  return *f_geometry_column_;
}
inline void GeometryColumn::set_f_geometry_column(const ::std::string& value) {
  set_has_f_geometry_column();
  if (f_geometry_column_ == &::google::protobuf::internal::kEmptyString) {
    f_geometry_column_ = new ::std::string;
  }
  f_geometry_column_->assign(value);
}
inline void GeometryColumn::set_f_geometry_column(const char* value) {
  set_has_f_geometry_column();
  if (f_geometry_column_ == &::google::protobuf::internal::kEmptyString) {
    f_geometry_column_ = new ::std::string;
  }
  f_geometry_column_->assign(value);
}
inline void GeometryColumn::set_f_geometry_column(const char* value, size_t size) {
  set_has_f_geometry_column();
  if (f_geometry_column_ == &::google::protobuf::internal::kEmptyString) {
    f_geometry_column_ = new ::std::string;
  }
  f_geometry_column_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GeometryColumn::mutable_f_geometry_column() {
  set_has_f_geometry_column();
  if (f_geometry_column_ == &::google::protobuf::internal::kEmptyString) {
    f_geometry_column_ = new ::std::string;
  }
  return f_geometry_column_;
}
inline ::std::string* GeometryColumn::release_f_geometry_column() {
  clear_has_f_geometry_column();
  if (f_geometry_column_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = f_geometry_column_;
    f_geometry_column_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GeometryColumn::set_allocated_f_geometry_column(::std::string* f_geometry_column) {
  if (f_geometry_column_ != &::google::protobuf::internal::kEmptyString) {
    delete f_geometry_column_;
  }
  if (f_geometry_column) {
    set_has_f_geometry_column();
    f_geometry_column_ = f_geometry_column;
  } else {
    clear_has_f_geometry_column();
    f_geometry_column_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 coord_dimension = 5;
inline bool GeometryColumn::has_coord_dimension() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GeometryColumn::set_has_coord_dimension() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GeometryColumn::clear_has_coord_dimension() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GeometryColumn::clear_coord_dimension() {
  coord_dimension_ = GOOGLE_LONGLONG(0);
  clear_has_coord_dimension();
}
inline ::google::protobuf::int64 GeometryColumn::coord_dimension() const {
  return coord_dimension_;
}
inline void GeometryColumn::set_coord_dimension(::google::protobuf::int64 value) {
  set_has_coord_dimension();
  coord_dimension_ = value;
}

// optional int64 srid = 6;
inline bool GeometryColumn::has_srid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GeometryColumn::set_has_srid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GeometryColumn::clear_has_srid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GeometryColumn::clear_srid() {
  srid_ = GOOGLE_LONGLONG(0);
  clear_has_srid();
}
inline ::google::protobuf::int64 GeometryColumn::srid() const {
  return srid_;
}
inline void GeometryColumn::set_srid(::google::protobuf::int64 value) {
  set_has_srid();
  srid_ = value;
}

// optional string type = 7;
inline bool GeometryColumn::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GeometryColumn::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GeometryColumn::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GeometryColumn::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& GeometryColumn::type() const {
  return *type_;
}
inline void GeometryColumn::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void GeometryColumn::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void GeometryColumn::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GeometryColumn::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* GeometryColumn::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GeometryColumn::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Receipt

// required int64 id = 1;
inline bool Receipt::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Receipt::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Receipt::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Receipt::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Receipt::id() const {
  return id_;
}
inline void Receipt::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 emitter_id = 2;
inline bool Receipt::has_emitter_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Receipt::set_has_emitter_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Receipt::clear_has_emitter_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Receipt::clear_emitter_id() {
  emitter_id_ = GOOGLE_LONGLONG(0);
  clear_has_emitter_id();
}
inline ::google::protobuf::int64 Receipt::emitter_id() const {
  return emitter_id_;
}
inline void Receipt::set_emitter_id(::google::protobuf::int64 value) {
  set_has_emitter_id();
  emitter_id_ = value;
}

// optional int64 date = 3;
inline bool Receipt::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Receipt::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Receipt::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Receipt::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
  clear_has_date();
}
inline ::google::protobuf::int64 Receipt::date() const {
  return date_;
}
inline void Receipt::set_date(::google::protobuf::int64 value) {
  set_has_date();
  date_ = value;
}

// optional .Decimal sum = 4;
inline bool Receipt::has_sum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Receipt::set_has_sum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Receipt::clear_has_sum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Receipt::clear_sum() {
  if (sum_ != NULL) sum_->::Decimal::Clear();
  clear_has_sum();
}
inline const ::Decimal& Receipt::sum() const {
  return sum_ != NULL ? *sum_ : *default_instance_->sum_;
}
inline ::Decimal* Receipt::mutable_sum() {
  set_has_sum();
  if (sum_ == NULL) sum_ = new ::Decimal;
  return sum_;
}
inline ::Decimal* Receipt::release_sum() {
  clear_has_sum();
  ::Decimal* temp = sum_;
  sum_ = NULL;
  return temp;
}
inline void Receipt::set_allocated_sum(::Decimal* sum) {
  delete sum_;
  sum_ = sum;
  if (sum) {
    set_has_sum();
  } else {
    clear_has_sum();
  }
}

// optional int64 emission_date = 5;
inline bool Receipt::has_emission_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Receipt::set_has_emission_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Receipt::clear_has_emission_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Receipt::clear_emission_date() {
  emission_date_ = GOOGLE_LONGLONG(0);
  clear_has_emission_date();
}
inline ::google::protobuf::int64 Receipt::emission_date() const {
  return emission_date_;
}
inline void Receipt::set_emission_date(::google::protobuf::int64 value) {
  set_has_emission_date();
  emission_date_ = value;
}

// -------------------------------------------------------------------

// SpatialRefSy

// required int64 srid = 1;
inline bool SpatialRefSy::has_srid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpatialRefSy::set_has_srid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpatialRefSy::clear_has_srid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpatialRefSy::clear_srid() {
  srid_ = GOOGLE_LONGLONG(0);
  clear_has_srid();
}
inline ::google::protobuf::int64 SpatialRefSy::srid() const {
  return srid_;
}
inline void SpatialRefSy::set_srid(::google::protobuf::int64 value) {
  set_has_srid();
  srid_ = value;
}

// optional string auth_name = 2;
inline bool SpatialRefSy::has_auth_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpatialRefSy::set_has_auth_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpatialRefSy::clear_has_auth_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpatialRefSy::clear_auth_name() {
  if (auth_name_ != &::google::protobuf::internal::kEmptyString) {
    auth_name_->clear();
  }
  clear_has_auth_name();
}
inline const ::std::string& SpatialRefSy::auth_name() const {
  return *auth_name_;
}
inline void SpatialRefSy::set_auth_name(const ::std::string& value) {
  set_has_auth_name();
  if (auth_name_ == &::google::protobuf::internal::kEmptyString) {
    auth_name_ = new ::std::string;
  }
  auth_name_->assign(value);
}
inline void SpatialRefSy::set_auth_name(const char* value) {
  set_has_auth_name();
  if (auth_name_ == &::google::protobuf::internal::kEmptyString) {
    auth_name_ = new ::std::string;
  }
  auth_name_->assign(value);
}
inline void SpatialRefSy::set_auth_name(const char* value, size_t size) {
  set_has_auth_name();
  if (auth_name_ == &::google::protobuf::internal::kEmptyString) {
    auth_name_ = new ::std::string;
  }
  auth_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpatialRefSy::mutable_auth_name() {
  set_has_auth_name();
  if (auth_name_ == &::google::protobuf::internal::kEmptyString) {
    auth_name_ = new ::std::string;
  }
  return auth_name_;
}
inline ::std::string* SpatialRefSy::release_auth_name() {
  clear_has_auth_name();
  if (auth_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_name_;
    auth_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpatialRefSy::set_allocated_auth_name(::std::string* auth_name) {
  if (auth_name_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_name_;
  }
  if (auth_name) {
    set_has_auth_name();
    auth_name_ = auth_name;
  } else {
    clear_has_auth_name();
    auth_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 auth_srid = 3;
inline bool SpatialRefSy::has_auth_srid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpatialRefSy::set_has_auth_srid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpatialRefSy::clear_has_auth_srid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpatialRefSy::clear_auth_srid() {
  auth_srid_ = GOOGLE_LONGLONG(0);
  clear_has_auth_srid();
}
inline ::google::protobuf::int64 SpatialRefSy::auth_srid() const {
  return auth_srid_;
}
inline void SpatialRefSy::set_auth_srid(::google::protobuf::int64 value) {
  set_has_auth_srid();
  auth_srid_ = value;
}

// optional string srtext = 4;
inline bool SpatialRefSy::has_srtext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpatialRefSy::set_has_srtext() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpatialRefSy::clear_has_srtext() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpatialRefSy::clear_srtext() {
  if (srtext_ != &::google::protobuf::internal::kEmptyString) {
    srtext_->clear();
  }
  clear_has_srtext();
}
inline const ::std::string& SpatialRefSy::srtext() const {
  return *srtext_;
}
inline void SpatialRefSy::set_srtext(const ::std::string& value) {
  set_has_srtext();
  if (srtext_ == &::google::protobuf::internal::kEmptyString) {
    srtext_ = new ::std::string;
  }
  srtext_->assign(value);
}
inline void SpatialRefSy::set_srtext(const char* value) {
  set_has_srtext();
  if (srtext_ == &::google::protobuf::internal::kEmptyString) {
    srtext_ = new ::std::string;
  }
  srtext_->assign(value);
}
inline void SpatialRefSy::set_srtext(const char* value, size_t size) {
  set_has_srtext();
  if (srtext_ == &::google::protobuf::internal::kEmptyString) {
    srtext_ = new ::std::string;
  }
  srtext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpatialRefSy::mutable_srtext() {
  set_has_srtext();
  if (srtext_ == &::google::protobuf::internal::kEmptyString) {
    srtext_ = new ::std::string;
  }
  return srtext_;
}
inline ::std::string* SpatialRefSy::release_srtext() {
  clear_has_srtext();
  if (srtext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srtext_;
    srtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpatialRefSy::set_allocated_srtext(::std::string* srtext) {
  if (srtext_ != &::google::protobuf::internal::kEmptyString) {
    delete srtext_;
  }
  if (srtext) {
    set_has_srtext();
    srtext_ = srtext;
  } else {
    clear_has_srtext();
    srtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string proj4text = 5;
inline bool SpatialRefSy::has_proj4text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpatialRefSy::set_has_proj4text() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpatialRefSy::clear_has_proj4text() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpatialRefSy::clear_proj4text() {
  if (proj4text_ != &::google::protobuf::internal::kEmptyString) {
    proj4text_->clear();
  }
  clear_has_proj4text();
}
inline const ::std::string& SpatialRefSy::proj4text() const {
  return *proj4text_;
}
inline void SpatialRefSy::set_proj4text(const ::std::string& value) {
  set_has_proj4text();
  if (proj4text_ == &::google::protobuf::internal::kEmptyString) {
    proj4text_ = new ::std::string;
  }
  proj4text_->assign(value);
}
inline void SpatialRefSy::set_proj4text(const char* value) {
  set_has_proj4text();
  if (proj4text_ == &::google::protobuf::internal::kEmptyString) {
    proj4text_ = new ::std::string;
  }
  proj4text_->assign(value);
}
inline void SpatialRefSy::set_proj4text(const char* value, size_t size) {
  set_has_proj4text();
  if (proj4text_ == &::google::protobuf::internal::kEmptyString) {
    proj4text_ = new ::std::string;
  }
  proj4text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpatialRefSy::mutable_proj4text() {
  set_has_proj4text();
  if (proj4text_ == &::google::protobuf::internal::kEmptyString) {
    proj4text_ = new ::std::string;
  }
  return proj4text_;
}
inline ::std::string* SpatialRefSy::release_proj4text() {
  clear_has_proj4text();
  if (proj4text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = proj4text_;
    proj4text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpatialRefSy::set_allocated_proj4text(::std::string* proj4text) {
  if (proj4text_ != &::google::protobuf::internal::kEmptyString) {
    delete proj4text_;
  }
  if (proj4text) {
    set_has_proj4text();
    proj4text_ = proj4text;
  } else {
    clear_has_proj4text();
    proj4text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ContactsToLegalEntity

// required int64 contact_id = 1;
inline bool ContactsToLegalEntity::has_contact_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactsToLegalEntity::set_has_contact_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactsToLegalEntity::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactsToLegalEntity::clear_contact_id() {
  contact_id_ = GOOGLE_LONGLONG(0);
  clear_has_contact_id();
}
inline ::google::protobuf::int64 ContactsToLegalEntity::contact_id() const {
  return contact_id_;
}
inline void ContactsToLegalEntity::set_contact_id(::google::protobuf::int64 value) {
  set_has_contact_id();
  contact_id_ = value;
}

// optional string role = 2;
inline bool ContactsToLegalEntity::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactsToLegalEntity::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactsToLegalEntity::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactsToLegalEntity::clear_role() {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    role_->clear();
  }
  clear_has_role();
}
inline const ::std::string& ContactsToLegalEntity::role() const {
  return *role_;
}
inline void ContactsToLegalEntity::set_role(const ::std::string& value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void ContactsToLegalEntity::set_role(const char* value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void ContactsToLegalEntity::set_role(const char* value, size_t size) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContactsToLegalEntity::mutable_role() {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  return role_;
}
inline ::std::string* ContactsToLegalEntity::release_role() {
  clear_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_;
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContactsToLegalEntity::set_allocated_role(::std::string* role) {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (role) {
    set_has_role();
    role_ = role;
  } else {
    clear_has_role();
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 legal_entity_id = 3;
inline bool ContactsToLegalEntity::has_legal_entity_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactsToLegalEntity::set_has_legal_entity_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactsToLegalEntity::clear_has_legal_entity_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactsToLegalEntity::clear_legal_entity_id() {
  legal_entity_id_ = GOOGLE_LONGLONG(0);
  clear_has_legal_entity_id();
}
inline ::google::protobuf::int64 ContactsToLegalEntity::legal_entity_id() const {
  return legal_entity_id_;
}
inline void ContactsToLegalEntity::set_legal_entity_id(::google::protobuf::int64 value) {
  set_has_legal_entity_id();
  legal_entity_id_ = value;
}

// -------------------------------------------------------------------

// OfferOption

// required int64 id = 1;
inline bool OfferOption::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfferOption::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfferOption::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfferOption::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 OfferOption::id() const {
  return id_;
}
inline void OfferOption::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional bool is_offer_changer = 2;
inline bool OfferOption::has_is_offer_changer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfferOption::set_has_is_offer_changer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfferOption::clear_has_is_offer_changer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfferOption::clear_is_offer_changer() {
  is_offer_changer_ = false;
  clear_has_is_offer_changer();
}
inline bool OfferOption::is_offer_changer() const {
  return is_offer_changer_;
}
inline void OfferOption::set_is_offer_changer(bool value) {
  set_has_is_offer_changer();
  is_offer_changer_ = value;
}

// optional int64 price = 3;
inline bool OfferOption::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfferOption::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfferOption::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfferOption::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 OfferOption::price() const {
  return price_;
}
inline void OfferOption::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
}

// optional int64 price_delta_positive = 4;
inline bool OfferOption::has_price_delta_positive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OfferOption::set_has_price_delta_positive() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OfferOption::clear_has_price_delta_positive() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OfferOption::clear_price_delta_positive() {
  price_delta_positive_ = GOOGLE_LONGLONG(0);
  clear_has_price_delta_positive();
}
inline ::google::protobuf::int64 OfferOption::price_delta_positive() const {
  return price_delta_positive_;
}
inline void OfferOption::set_price_delta_positive(::google::protobuf::int64 value) {
  set_has_price_delta_positive();
  price_delta_positive_ = value;
}

// optional int64 price_delta_negative = 5;
inline bool OfferOption::has_price_delta_negative() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OfferOption::set_has_price_delta_negative() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OfferOption::clear_has_price_delta_negative() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OfferOption::clear_price_delta_negative() {
  price_delta_negative_ = GOOGLE_LONGLONG(0);
  clear_has_price_delta_negative();
}
inline ::google::protobuf::int64 OfferOption::price_delta_negative() const {
  return price_delta_negative_;
}
inline void OfferOption::set_price_delta_negative(::google::protobuf::int64 value) {
  set_has_price_delta_negative();
  price_delta_negative_ = value;
}

// -------------------------------------------------------------------

// Client

// required int64 id = 1;
inline bool Client::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Client::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Client::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Client::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Client::id() const {
  return id_;
}
inline void Client::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 contact_id = 2;
inline bool Client::has_contact_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Client::set_has_contact_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Client::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Client::clear_contact_id() {
  contact_id_ = GOOGLE_LONGLONG(0);
  clear_has_contact_id();
}
inline ::google::protobuf::int64 Client::contact_id() const {
  return contact_id_;
}
inline void Client::set_contact_id(::google::protobuf::int64 value) {
  set_has_contact_id();
  contact_id_ = value;
}

// optional string user = 3;
inline bool Client::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Client::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Client::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Client::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& Client::user() const {
  return *user_;
}
inline void Client::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Client::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Client::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Client::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* Client::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Client::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string passmd5 = 4;
inline bool Client::has_passmd5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Client::set_has_passmd5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Client::clear_has_passmd5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Client::clear_passmd5() {
  if (passmd5_ != &::google::protobuf::internal::kEmptyString) {
    passmd5_->clear();
  }
  clear_has_passmd5();
}
inline const ::std::string& Client::passmd5() const {
  return *passmd5_;
}
inline void Client::set_passmd5(const ::std::string& value) {
  set_has_passmd5();
  if (passmd5_ == &::google::protobuf::internal::kEmptyString) {
    passmd5_ = new ::std::string;
  }
  passmd5_->assign(value);
}
inline void Client::set_passmd5(const char* value) {
  set_has_passmd5();
  if (passmd5_ == &::google::protobuf::internal::kEmptyString) {
    passmd5_ = new ::std::string;
  }
  passmd5_->assign(value);
}
inline void Client::set_passmd5(const char* value, size_t size) {
  set_has_passmd5();
  if (passmd5_ == &::google::protobuf::internal::kEmptyString) {
    passmd5_ = new ::std::string;
  }
  passmd5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Client::mutable_passmd5() {
  set_has_passmd5();
  if (passmd5_ == &::google::protobuf::internal::kEmptyString) {
    passmd5_ = new ::std::string;
  }
  return passmd5_;
}
inline ::std::string* Client::release_passmd5() {
  clear_has_passmd5();
  if (passmd5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passmd5_;
    passmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Client::set_allocated_passmd5(::std::string* passmd5) {
  if (passmd5_ != &::google::protobuf::internal::kEmptyString) {
    delete passmd5_;
  }
  if (passmd5) {
    set_has_passmd5();
    passmd5_ = passmd5;
  } else {
    clear_has_passmd5();
    passmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MenuOption

// required int64 id = 1;
inline bool MenuOption::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MenuOption::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MenuOption::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MenuOption::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 MenuOption::id() const {
  return id_;
}
inline void MenuOption::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 menu_id = 2;
inline bool MenuOption::has_menu_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MenuOption::set_has_menu_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MenuOption::clear_has_menu_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MenuOption::clear_menu_id() {
  menu_id_ = GOOGLE_LONGLONG(0);
  clear_has_menu_id();
}
inline ::google::protobuf::int64 MenuOption::menu_id() const {
  return menu_id_;
}
inline void MenuOption::set_menu_id(::google::protobuf::int64 value) {
  set_has_menu_id();
  menu_id_ = value;
}

// optional string name = 3;
inline bool MenuOption::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MenuOption::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MenuOption::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MenuOption::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MenuOption::name() const {
  return *name_;
}
inline void MenuOption::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MenuOption::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MenuOption::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MenuOption::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MenuOption::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MenuOption::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_menu_changer = 4;
inline bool MenuOption::has_is_menu_changer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MenuOption::set_has_is_menu_changer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MenuOption::clear_has_is_menu_changer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MenuOption::clear_is_menu_changer() {
  is_menu_changer_ = false;
  clear_has_is_menu_changer();
}
inline bool MenuOption::is_menu_changer() const {
  return is_menu_changer_;
}
inline void MenuOption::set_is_menu_changer(bool value) {
  set_has_is_menu_changer();
  is_menu_changer_ = value;
}

// -------------------------------------------------------------------

// Payment

// required int64 id = 1;
inline bool Payment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Payment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Payment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Payment::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Payment::id() const {
  return id_;
}
inline void Payment::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 client_id = 2;
inline bool Payment::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Payment::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Payment::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Payment::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
  clear_has_client_id();
}
inline ::google::protobuf::int64 Payment::client_id() const {
  return client_id_;
}
inline void Payment::set_client_id(::google::protobuf::int64 value) {
  set_has_client_id();
  client_id_ = value;
}

// optional .Decimal sum = 3;
inline bool Payment::has_sum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Payment::set_has_sum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Payment::clear_has_sum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Payment::clear_sum() {
  if (sum_ != NULL) sum_->::Decimal::Clear();
  clear_has_sum();
}
inline const ::Decimal& Payment::sum() const {
  return sum_ != NULL ? *sum_ : *default_instance_->sum_;
}
inline ::Decimal* Payment::mutable_sum() {
  set_has_sum();
  if (sum_ == NULL) sum_ = new ::Decimal;
  return sum_;
}
inline ::Decimal* Payment::release_sum() {
  clear_has_sum();
  ::Decimal* temp = sum_;
  sum_ = NULL;
  return temp;
}
inline void Payment::set_allocated_sum(::Decimal* sum) {
  delete sum_;
  sum_ = sum;
  if (sum) {
    set_has_sum();
  } else {
    clear_has_sum();
  }
}

// optional int64 receipt_id = 4;
inline bool Payment::has_receipt_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Payment::set_has_receipt_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Payment::clear_has_receipt_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Payment::clear_receipt_id() {
  receipt_id_ = GOOGLE_LONGLONG(0);
  clear_has_receipt_id();
}
inline ::google::protobuf::int64 Payment::receipt_id() const {
  return receipt_id_;
}
inline void Payment::set_receipt_id(::google::protobuf::int64 value) {
  set_has_receipt_id();
  receipt_id_ = value;
}

// -------------------------------------------------------------------

// RestaurantsToContact

// required int64 restaurant_id = 1;
inline bool RestaurantsToContact::has_restaurant_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RestaurantsToContact::set_has_restaurant_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RestaurantsToContact::clear_has_restaurant_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RestaurantsToContact::clear_restaurant_id() {
  restaurant_id_ = GOOGLE_LONGLONG(0);
  clear_has_restaurant_id();
}
inline ::google::protobuf::int64 RestaurantsToContact::restaurant_id() const {
  return restaurant_id_;
}
inline void RestaurantsToContact::set_restaurant_id(::google::protobuf::int64 value) {
  set_has_restaurant_id();
  restaurant_id_ = value;
}

// required int64 contact_id = 2;
inline bool RestaurantsToContact::has_contact_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RestaurantsToContact::set_has_contact_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RestaurantsToContact::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RestaurantsToContact::clear_contact_id() {
  contact_id_ = GOOGLE_LONGLONG(0);
  clear_has_contact_id();
}
inline ::google::protobuf::int64 RestaurantsToContact::contact_id() const {
  return contact_id_;
}
inline void RestaurantsToContact::set_contact_id(::google::protobuf::int64 value) {
  set_has_contact_id();
  contact_id_ = value;
}

// required string position = 3;
inline bool RestaurantsToContact::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RestaurantsToContact::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RestaurantsToContact::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RestaurantsToContact::clear_position() {
  if (position_ != &::google::protobuf::internal::kEmptyString) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& RestaurantsToContact::position() const {
  return *position_;
}
inline void RestaurantsToContact::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  position_->assign(value);
}
inline void RestaurantsToContact::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  position_->assign(value);
}
inline void RestaurantsToContact::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RestaurantsToContact::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  return position_;
}
inline ::std::string* RestaurantsToContact::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RestaurantsToContact::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::kEmptyString) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool can_deliver = 4;
inline bool RestaurantsToContact::has_can_deliver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RestaurantsToContact::set_has_can_deliver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RestaurantsToContact::clear_has_can_deliver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RestaurantsToContact::clear_can_deliver() {
  can_deliver_ = false;
  clear_has_can_deliver();
}
inline bool RestaurantsToContact::can_deliver() const {
  return can_deliver_;
}
inline void RestaurantsToContact::set_can_deliver(bool value) {
  set_has_can_deliver();
  can_deliver_ = value;
}

// -------------------------------------------------------------------

// MenuEntry

// required int64 id = 1;
inline bool MenuEntry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MenuEntry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MenuEntry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MenuEntry::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 MenuEntry::id() const {
  return id_;
}
inline void MenuEntry::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 menu_id = 2;
inline bool MenuEntry::has_menu_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MenuEntry::set_has_menu_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MenuEntry::clear_has_menu_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MenuEntry::clear_menu_id() {
  menu_id_ = GOOGLE_LONGLONG(0);
  clear_has_menu_id();
}
inline ::google::protobuf::int64 MenuEntry::menu_id() const {
  return menu_id_;
}
inline void MenuEntry::set_menu_id(::google::protobuf::int64 value) {
  set_has_menu_id();
  menu_id_ = value;
}

// optional string name = 3;
inline bool MenuEntry::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MenuEntry::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MenuEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MenuEntry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MenuEntry::name() const {
  return *name_;
}
inline void MenuEntry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MenuEntry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MenuEntry::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MenuEntry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MenuEntry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MenuEntry::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 option_for = 4;
inline bool MenuEntry::has_option_for() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MenuEntry::set_has_option_for() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MenuEntry::clear_has_option_for() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MenuEntry::clear_option_for() {
  option_for_ = GOOGLE_LONGLONG(0);
  clear_has_option_for();
}
inline ::google::protobuf::int64 MenuEntry::option_for() const {
  return option_for_;
}
inline void MenuEntry::set_option_for(::google::protobuf::int64 value) {
  set_has_option_for();
  option_for_ = value;
}

// optional int64 option_max_qty = 5;
inline bool MenuEntry::has_option_max_qty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MenuEntry::set_has_option_max_qty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MenuEntry::clear_has_option_max_qty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MenuEntry::clear_option_max_qty() {
  option_max_qty_ = GOOGLE_LONGLONG(0);
  clear_has_option_max_qty();
}
inline ::google::protobuf::int64 MenuEntry::option_max_qty() const {
  return option_max_qty_;
}
inline void MenuEntry::set_option_max_qty(::google::protobuf::int64 value) {
  set_has_option_max_qty();
  option_max_qty_ = value;
}

// -------------------------------------------------------------------

// Restaurant

// required int64 id = 1;
inline bool Restaurant::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Restaurant::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Restaurant::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Restaurant::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Restaurant::id() const {
  return id_;
}
inline void Restaurant::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Restaurant::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Restaurant::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Restaurant::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Restaurant::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Restaurant::name() const {
  return *name_;
}
inline void Restaurant::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Restaurant::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Restaurant::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Restaurant::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Restaurant::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Restaurant::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 address_id = 3;
inline bool Restaurant::has_address_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Restaurant::set_has_address_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Restaurant::clear_has_address_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Restaurant::clear_address_id() {
  address_id_ = GOOGLE_LONGLONG(0);
  clear_has_address_id();
}
inline ::google::protobuf::int64 Restaurant::address_id() const {
  return address_id_;
}
inline void Restaurant::set_address_id(::google::protobuf::int64 value) {
  set_has_address_id();
  address_id_ = value;
}

// optional int64 legal_entity_id = 4;
inline bool Restaurant::has_legal_entity_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Restaurant::set_has_legal_entity_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Restaurant::clear_has_legal_entity_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Restaurant::clear_legal_entity_id() {
  legal_entity_id_ = GOOGLE_LONGLONG(0);
  clear_has_legal_entity_id();
}
inline ::google::protobuf::int64 Restaurant::legal_entity_id() const {
  return legal_entity_id_;
}
inline void Restaurant::set_legal_entity_id(::google::protobuf::int64 value) {
  set_has_legal_entity_id();
  legal_entity_id_ = value;
}

// optional .Decimal customer_telephone_number = 5;
inline bool Restaurant::has_customer_telephone_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Restaurant::set_has_customer_telephone_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Restaurant::clear_has_customer_telephone_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Restaurant::clear_customer_telephone_number() {
  if (customer_telephone_number_ != NULL) customer_telephone_number_->::Decimal::Clear();
  clear_has_customer_telephone_number();
}
inline const ::Decimal& Restaurant::customer_telephone_number() const {
  return customer_telephone_number_ != NULL ? *customer_telephone_number_ : *default_instance_->customer_telephone_number_;
}
inline ::Decimal* Restaurant::mutable_customer_telephone_number() {
  set_has_customer_telephone_number();
  if (customer_telephone_number_ == NULL) customer_telephone_number_ = new ::Decimal;
  return customer_telephone_number_;
}
inline ::Decimal* Restaurant::release_customer_telephone_number() {
  clear_has_customer_telephone_number();
  ::Decimal* temp = customer_telephone_number_;
  customer_telephone_number_ = NULL;
  return temp;
}
inline void Restaurant::set_allocated_customer_telephone_number(::Decimal* customer_telephone_number) {
  delete customer_telephone_number_;
  customer_telephone_number_ = customer_telephone_number;
  if (customer_telephone_number) {
    set_has_customer_telephone_number();
  } else {
    clear_has_customer_telephone_number();
  }
}

// optional int64 customer_contact_id = 6;
inline bool Restaurant::has_customer_contact_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Restaurant::set_has_customer_contact_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Restaurant::clear_has_customer_contact_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Restaurant::clear_customer_contact_id() {
  customer_contact_id_ = GOOGLE_LONGLONG(0);
  clear_has_customer_contact_id();
}
inline ::google::protobuf::int64 Restaurant::customer_contact_id() const {
  return customer_contact_id_;
}
inline void Restaurant::set_customer_contact_id(::google::protobuf::int64 value) {
  set_has_customer_contact_id();
  customer_contact_id_ = value;
}

// optional string logo = 7;
inline bool Restaurant::has_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Restaurant::set_has_logo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Restaurant::clear_has_logo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Restaurant::clear_logo() {
  if (logo_ != &::google::protobuf::internal::kEmptyString) {
    logo_->clear();
  }
  clear_has_logo();
}
inline const ::std::string& Restaurant::logo() const {
  return *logo_;
}
inline void Restaurant::set_logo(const ::std::string& value) {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  logo_->assign(value);
}
inline void Restaurant::set_logo(const char* value) {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  logo_->assign(value);
}
inline void Restaurant::set_logo(const char* value, size_t size) {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  logo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Restaurant::mutable_logo() {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  return logo_;
}
inline ::std::string* Restaurant::release_logo() {
  clear_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logo_;
    logo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Restaurant::set_allocated_logo(::std::string* logo) {
  if (logo_ != &::google::protobuf::internal::kEmptyString) {
    delete logo_;
  }
  if (logo) {
    set_has_logo();
    logo_ = logo;
  } else {
    clear_has_logo();
    logo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 logo_src_image_id = 8;
inline bool Restaurant::has_logo_src_image_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Restaurant::set_has_logo_src_image_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Restaurant::clear_has_logo_src_image_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Restaurant::clear_logo_src_image_id() {
  logo_src_image_id_ = GOOGLE_LONGLONG(0);
  clear_has_logo_src_image_id();
}
inline ::google::protobuf::int64 Restaurant::logo_src_image_id() const {
  return logo_src_image_id_;
}
inline void Restaurant::set_logo_src_image_id(::google::protobuf::int64 value) {
  set_has_logo_src_image_id();
  logo_src_image_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gen_2fmodel_2eproto__INCLUDED
