// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gen/model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeliveryPlaceSpecification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeliveryPlaceSpecification_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegalEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegalEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Meeting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Meeting_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* Delivery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Delivery_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ingredient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ingredient_reflection_ = NULL;
const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* Contact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Contact_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeetingsToContact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeetingsToContact_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeliveryPlace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeliveryPlace_reflection_ = NULL;
const ::google::protobuf::Descriptor* Invoice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Invoice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Offer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MenuEntryOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MenuEntryOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* Building_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Building_reflection_ = NULL;
const ::google::protobuf::Descriptor* PaymentsToOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PaymentsToOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* Decimal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Decimal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Interval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Interval_reflection_ = NULL;
const ::google::protobuf::Descriptor* Menu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Menu_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceType_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvoicesToContact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvoicesToContact_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Receipt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Receipt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactsToLegalEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactsToLegalEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client_reflection_ = NULL;
const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* Payment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Payment_reflection_ = NULL;
const ::google::protobuf::Descriptor* RestaurantsToContact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RestaurantsToContact_reflection_ = NULL;
const ::google::protobuf::Descriptor* MenuEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MenuEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Restaurant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Restaurant_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gen_2fmodel_2eproto() {
  protobuf_AddDesc_gen_2fmodel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gen/model.proto");
  GOOGLE_CHECK(file != NULL);
  Address_descriptor_ = file->message_type(0);
  static const int Address_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, district_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, county_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, country_),
  };
  Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address));
  DeliveryPlaceSpecification_descriptor_ = file->message_type(1);
  static const int DeliveryPlaceSpecification_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlaceSpecification, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlaceSpecification, location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlaceSpecification, building_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlaceSpecification, delivery_place_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlaceSpecification, place_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlaceSpecification, text_value_),
  };
  DeliveryPlaceSpecification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeliveryPlaceSpecification_descriptor_,
      DeliveryPlaceSpecification::default_instance_,
      DeliveryPlaceSpecification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlaceSpecification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlaceSpecification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliveryPlaceSpecification));
  LegalEntity_descriptor_ = file->message_type(2);
  static const int LegalEntity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegalEntity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegalEntity, billing_address_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegalEntity, vatin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegalEntity, registered_office_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegalEntity, ref_no_),
  };
  LegalEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegalEntity_descriptor_,
      LegalEntity::default_instance_,
      LegalEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegalEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegalEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegalEntity));
  Meeting_descriptor_ = file->message_type(3);
  static const int Meeting_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meeting, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meeting, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meeting, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meeting, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meeting, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meeting, place_),
  };
  Meeting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Meeting_descriptor_,
      Meeting::default_instance_,
      Meeting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meeting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meeting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Meeting));
  Location_descriptor_ = file->message_type(4);
  static const int Location_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, id_),
  };
  Location_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Location_descriptor_,
      Location::default_instance_,
      Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Location));
  Delivery_descriptor_ = file->message_type(5);
  static const int Delivery_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delivery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delivery, restaurant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delivery, delivering_guy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delivery, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delivery, eta_arival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delivery, arrival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delivery, location_id_),
  };
  Delivery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Delivery_descriptor_,
      Delivery::default_instance_,
      Delivery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delivery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delivery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Delivery));
  Ingredient_descriptor_ = file->message_type(6);
  static const int Ingredient_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ingredient, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ingredient, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ingredient, image_id_),
  };
  Ingredient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ingredient_descriptor_,
      Ingredient::default_instance_,
      Ingredient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ingredient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ingredient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ingredient));
  Image_descriptor_ = file->message_type(7);
  static const int Image_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, artist_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, comment_),
  };
  Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image));
  Order_descriptor_ = file->message_type(8);
  static const int Order_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, notes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, offer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, delivery_place_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, delivery_box_id_),
  };
  Order_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Order_descriptor_,
      Order::default_instance_,
      Order_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Order));
  Contact_descriptor_ = file->message_type(9);
  static const int Contact_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, address_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, landline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, vatin_),
  };
  Contact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Contact_descriptor_,
      Contact::default_instance_,
      Contact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Contact));
  MeetingsToContact_descriptor_ = file->message_type(10);
  static const int MeetingsToContact_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingsToContact, contact_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingsToContact, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingsToContact, meeting_id_),
  };
  MeetingsToContact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeetingsToContact_descriptor_,
      MeetingsToContact::default_instance_,
      MeetingsToContact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingsToContact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingsToContact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeetingsToContact));
  DeliveryPlace_descriptor_ = file->message_type(11);
  static const int DeliveryPlace_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlace, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlace, location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlace, building_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlace, short_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlace, place_types_),
  };
  DeliveryPlace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeliveryPlace_descriptor_,
      DeliveryPlace::default_instance_,
      DeliveryPlace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryPlace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliveryPlace));
  Invoice_descriptor_ = file->message_type(12);
  static const int Invoice_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, emmiter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, recipient_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, legal_entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, receiver_person_id_),
  };
  Invoice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Invoice_descriptor_,
      Invoice::default_instance_,
      Invoice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Invoice));
  Offer_descriptor_ = file->message_type(13);
  static const int Offer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, period_),
  };
  Offer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offer_descriptor_,
      Offer::default_instance_,
      Offer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offer));
  MenuEntryOption_descriptor_ = file->message_type(14);
  static const int MenuEntryOption_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntryOption, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntryOption, menu_entry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntryOption, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntryOption, default_included_),
  };
  MenuEntryOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MenuEntryOption_descriptor_,
      MenuEntryOption::default_instance_,
      MenuEntryOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntryOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntryOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MenuEntryOption));
  Building_descriptor_ = file->message_type(15);
  static const int Building_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Building, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Building, location_id_),
  };
  Building_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Building_descriptor_,
      Building::default_instance_,
      Building_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Building, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Building, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Building));
  PaymentsToOrder_descriptor_ = file->message_type(16);
  static const int PaymentsToOrder_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentsToOrder, payment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentsToOrder, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentsToOrder, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentsToOrder, seq_),
  };
  PaymentsToOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PaymentsToOrder_descriptor_,
      PaymentsToOrder::default_instance_,
      PaymentsToOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentsToOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentsToOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PaymentsToOrder));
  Decimal_descriptor_ = file->message_type(17);
  static const int Decimal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, lo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, hi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, signscale_),
  };
  Decimal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Decimal_descriptor_,
      Decimal::default_instance_,
      Decimal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Decimal));
  Interval_descriptor_ = file->message_type(18);
  static const int Interval_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interval, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interval, end_),
  };
  Interval_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Interval_descriptor_,
      Interval::default_instance_,
      Interval_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interval, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interval, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Interval));
  Menu_descriptor_ = file->message_type(19);
  static const int Menu_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, recurrence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, logo_src_image_id_),
  };
  Menu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Menu_descriptor_,
      Menu::default_instance_,
      Menu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Menu));
  PlaceType_descriptor_ = file->message_type(20);
  static const int PlaceType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceType, id_),
  };
  PlaceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceType_descriptor_,
      PlaceType::default_instance_,
      PlaceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceType));
  InvoicesToContact_descriptor_ = file->message_type(21);
  static const int InvoicesToContact_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoicesToContact, contact_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoicesToContact, invoice_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoicesToContact, role_),
  };
  InvoicesToContact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvoicesToContact_descriptor_,
      InvoicesToContact::default_instance_,
      InvoicesToContact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoicesToContact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoicesToContact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvoicesToContact));
  OrderEntry_descriptor_ = file->message_type(22);
  static const int OrderEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderEntry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderEntry, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderEntry, offer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderEntry, offer_entry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderEntry, qty_),
  };
  OrderEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderEntry_descriptor_,
      OrderEntry::default_instance_,
      OrderEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderEntry));
  Receipt_descriptor_ = file->message_type(23);
  static const int Receipt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receipt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receipt, emitter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receipt, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receipt, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receipt, emission_date_),
  };
  Receipt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Receipt_descriptor_,
      Receipt::default_instance_,
      Receipt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receipt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receipt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Receipt));
  ContactsToLegalEntity_descriptor_ = file->message_type(24);
  static const int ContactsToLegalEntity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsToLegalEntity, contact_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsToLegalEntity, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsToLegalEntity, legal_entity_id_),
  };
  ContactsToLegalEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactsToLegalEntity_descriptor_,
      ContactsToLegalEntity::default_instance_,
      ContactsToLegalEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsToLegalEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsToLegalEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactsToLegalEntity));
  OfferOption_descriptor_ = file->message_type(25);
  static const int OfferOption_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferOption, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferOption, offer_id_),
  };
  OfferOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferOption_descriptor_,
      OfferOption::default_instance_,
      OfferOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferOption));
  Client_descriptor_ = file->message_type(26);
  static const int Client_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, contact_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, passmd5_),
  };
  Client_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client_descriptor_,
      Client::default_instance_,
      Client_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client));
  Device_descriptor_ = file->message_type(27);
  static const int Device_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, receivessms_),
  };
  Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Device_descriptor_,
      Device::default_instance_,
      Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Device));
  Payment_descriptor_ = file->message_type(28);
  static const int Payment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payment, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payment, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payment, receipt_id_),
  };
  Payment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Payment_descriptor_,
      Payment::default_instance_,
      Payment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Payment));
  RestaurantsToContact_descriptor_ = file->message_type(29);
  static const int RestaurantsToContact_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestaurantsToContact, restaurant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestaurantsToContact, contact_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestaurantsToContact, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestaurantsToContact, can_deliver_),
  };
  RestaurantsToContact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RestaurantsToContact_descriptor_,
      RestaurantsToContact::default_instance_,
      RestaurantsToContact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestaurantsToContact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestaurantsToContact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RestaurantsToContact));
  MenuEntry_descriptor_ = file->message_type(30);
  static const int MenuEntry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, menu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, main_ingredient_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, option_for_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, option_max_qty_),
  };
  MenuEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MenuEntry_descriptor_,
      MenuEntry::default_instance_,
      MenuEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MenuEntry));
  Restaurant_descriptor_ = file->message_type(31);
  static const int Restaurant_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restaurant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restaurant, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restaurant, address_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restaurant, legal_entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restaurant, customer_telephone_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restaurant, customer_contact_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restaurant, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restaurant, logo_src_image_id_),
  };
  Restaurant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Restaurant_descriptor_,
      Restaurant::default_instance_,
      Restaurant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restaurant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restaurant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Restaurant));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gen_2fmodel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliveryPlaceSpecification_descriptor_, &DeliveryPlaceSpecification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegalEntity_descriptor_, &LegalEntity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Meeting_descriptor_, &Meeting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Location_descriptor_, &Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Delivery_descriptor_, &Delivery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ingredient_descriptor_, &Ingredient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Order_descriptor_, &Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Contact_descriptor_, &Contact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeetingsToContact_descriptor_, &MeetingsToContact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliveryPlace_descriptor_, &DeliveryPlace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Invoice_descriptor_, &Invoice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offer_descriptor_, &Offer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MenuEntryOption_descriptor_, &MenuEntryOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Building_descriptor_, &Building::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PaymentsToOrder_descriptor_, &PaymentsToOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Decimal_descriptor_, &Decimal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Interval_descriptor_, &Interval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Menu_descriptor_, &Menu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceType_descriptor_, &PlaceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvoicesToContact_descriptor_, &InvoicesToContact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderEntry_descriptor_, &OrderEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Receipt_descriptor_, &Receipt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactsToLegalEntity_descriptor_, &ContactsToLegalEntity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferOption_descriptor_, &OfferOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client_descriptor_, &Client::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Device_descriptor_, &Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Payment_descriptor_, &Payment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestaurantsToContact_descriptor_, &RestaurantsToContact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MenuEntry_descriptor_, &MenuEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Restaurant_descriptor_, &Restaurant::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gen_2fmodel_2eproto() {
  delete Address::default_instance_;
  delete Address_reflection_;
  delete DeliveryPlaceSpecification::default_instance_;
  delete DeliveryPlaceSpecification_reflection_;
  delete LegalEntity::default_instance_;
  delete LegalEntity_reflection_;
  delete Meeting::default_instance_;
  delete Meeting_reflection_;
  delete Location::default_instance_;
  delete Location_reflection_;
  delete Delivery::default_instance_;
  delete Delivery_reflection_;
  delete Ingredient::default_instance_;
  delete Ingredient_reflection_;
  delete Image::default_instance_;
  delete Image_reflection_;
  delete Order::default_instance_;
  delete Order_reflection_;
  delete Contact::default_instance_;
  delete Contact_reflection_;
  delete MeetingsToContact::default_instance_;
  delete MeetingsToContact_reflection_;
  delete DeliveryPlace::default_instance_;
  delete DeliveryPlace_reflection_;
  delete Invoice::default_instance_;
  delete Invoice_reflection_;
  delete Offer::default_instance_;
  delete Offer_reflection_;
  delete MenuEntryOption::default_instance_;
  delete MenuEntryOption_reflection_;
  delete Building::default_instance_;
  delete Building_reflection_;
  delete PaymentsToOrder::default_instance_;
  delete PaymentsToOrder_reflection_;
  delete Decimal::default_instance_;
  delete Decimal_reflection_;
  delete Interval::default_instance_;
  delete Interval_reflection_;
  delete Menu::default_instance_;
  delete Menu_reflection_;
  delete PlaceType::default_instance_;
  delete PlaceType_reflection_;
  delete InvoicesToContact::default_instance_;
  delete InvoicesToContact_reflection_;
  delete OrderEntry::default_instance_;
  delete OrderEntry_reflection_;
  delete Receipt::default_instance_;
  delete Receipt_reflection_;
  delete ContactsToLegalEntity::default_instance_;
  delete ContactsToLegalEntity_reflection_;
  delete OfferOption::default_instance_;
  delete OfferOption_reflection_;
  delete Client::default_instance_;
  delete Client_reflection_;
  delete Device::default_instance_;
  delete Device_reflection_;
  delete Payment::default_instance_;
  delete Payment_reflection_;
  delete RestaurantsToContact::default_instance_;
  delete RestaurantsToContact_reflection_;
  delete MenuEntry::default_instance_;
  delete MenuEntry_reflection_;
  delete Restaurant::default_instance_;
  delete Restaurant_reflection_;
}

void protobuf_AddDesc_gen_2fmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017gen/model.proto\"\204\001\n\007Address\022\n\n\002id\030\001 \002("
    "\003\022\016\n\006street\030\002 \001(\t\022\014\n\004zone\030\003 \001(\t\022\020\n\010distr"
    "ict\030\004 \001(\t\022\016\n\006number\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\022"
    "\016\n\006county\030\007 \001(\t\022\017\n\007country\030\010 \001(\t\"\230\001\n\032Del"
    "iveryPlaceSpecification\022\n\n\002id\030\001 \002(\003\022\023\n\013l"
    "ocation_id\030\002 \001(\003\022\023\n\013building_id\030\003 \001(\003\022\031\n"
    "\021delivery_place_id\030\004 \001(\003\022\025\n\rplace_type_i"
    "d\030\005 \001(\003\022\022\n\ntext_value\030\006 \001(\t\"r\n\013LegalEnti"
    "ty\022\n\n\002id\030\001 \002(\003\022\032\n\022billing_address_id\030\002 \001"
    "(\003\022\r\n\005VATIN\030\003 \001(\t\022\034\n\024registered_office_i"
    "d\030\004 \001(\003\022\016\n\006ref_no\030\005 \001(\t\"n\n\007Meeting\022\n\n\002id"
    "\030\001 \002(\003\022\014\n\004date\030\002 \001(\003\022\033\n\010duration\030\003 \001(\0132\t"
    ".Interval\022\r\n\005topic\030\004 \001(\t\022\016\n\006result\030\005 \001(\t"
    "\022\r\n\005place\030\006 \001(\003\"\026\n\010Location\022\n\n\002id\030\001 \002(\003\""
    "\224\001\n\010Delivery\022\n\n\002id\030\001 \002(\003\022\025\n\rrestaurant_i"
    "d\030\002 \001(\003\022\031\n\021delivering_guy_id\030\003 \001(\003\022\020\n\010or"
    "der_id\030\004 \001(\003\022\022\n\neta_arival\030\005 \001(\003\022\017\n\007arri"
    "val\030\006 \001(\003\022\023\n\013location_id\030\007 \001(\003\"8\n\nIngred"
    "ient\022\n\n\002id\030\001 \002(\003\022\014\n\004name\030\002 \001(\t\022\020\n\010image_"
    "id\030\003 \001(\003\"S\n\005Image\022\n\n\002id\030\001 \002(\003\022\014\n\004name\030\002 "
    "\001(\t\022\014\n\004data\030\003 \001(\t\022\021\n\tartist_id\030\004 \001(\003\022\017\n\007"
    "comment\030\005 \001(\t\"{\n\005Order\022\n\n\002id\030\001 \002(\003\022\021\n\tcl"
    "ient_id\030\002 \001(\003\022\r\n\005notes\030\003 \001(\t\022\020\n\010offer_id"
    "\030\004 \001(\003\022\031\n\021delivery_place_id\030\005 \001(\003\022\027\n\017del"
    "ivery_box_id\030\006 \001(\t\"w\n\007Contact\022\n\n\002id\030\001 \002("
    "\003\022\014\n\004name\030\002 \001(\t\022\022\n\naddress_id\030\003 \001(\003\022\016\n\006m"
    "obile\030\004 \001(\t\022\r\n\005email\030\005 \001(\t\022\020\n\010landline\030\006"
    " \001(\t\022\r\n\005VATIN\030\007 \001(\t\"I\n\021MeetingsToContact"
    "\022\022\n\ncontact_id\030\001 \002(\003\022\014\n\004role\030\002 \002(\t\022\022\n\nme"
    "eting_id\030\003 \002(\003\"n\n\rDeliveryPlace\022\n\n\002id\030\001 "
    "\002(\003\022\023\n\013location_id\030\002 \001(\003\022\023\n\013building_id\030"
    "\003 \001(\003\022\022\n\nshort_name\030\004 \001(\t\022\023\n\013place_types"
    "\030\005 \001(\003\"\213\001\n\007Invoice\022\n\n\002id\030\001 \002(\003\022\022\n\nemmite"
    "r_id\030\002 \001(\003\022\024\n\014recipient_id\030\003 \001(\003\022\025\n\003sum\030"
    "\004 \001(\0132\010.Decimal\022\027\n\017legal_entity_id\030\005 \001(\003"
    "\022\032\n\022receiver_person_id\030\006 \001(\003\"#\n\005Offer\022\n\n"
    "\002id\030\001 \002(\003\022\016\n\006period\030\002 \001(\t\"\\\n\017MenuEntryOp"
    "tion\022\n\n\002id\030\001 \002(\003\022\025\n\rmenu_entry_id\030\002 \001(\003\022"
    "\014\n\004name\030\003 \001(\t\022\030\n\020default_included\030\004 \001(\010\""
    "+\n\010Building\022\n\n\002id\030\001 \002(\003\022\023\n\013location_id\030\002"
    " \001(\003\"[\n\017PaymentsToOrder\022\022\n\npayment_id\030\001 "
    "\002(\003\022\020\n\010order_id\030\002 \002(\003\022\025\n\003sum\030\003 \001(\0132\010.Dec"
    "imal\022\013\n\003seq\030\004 \002(\003\"4\n\007Decimal\022\n\n\002lo\030\001 \001(\004"
    "\022\n\n\002hi\030\002 \001(\r\022\021\n\tsignScale\030\003 \001(\r\"&\n\010Inter"
    "val\022\r\n\005start\030\001 \001(\004\022\013\n\003end\030\002 \001(\004\"O\n\004Menu\022"
    "\n\n\002id\030\001 \002(\003\022\022\n\nrecurrence\030\002 \001(\t\022\014\n\004logo\030"
    "\003 \001(\t\022\031\n\021logo_src_image_id\030\004 \001(\003\"\027\n\tPlac"
    "eType\022\n\n\002id\030\001 \002(\003\"I\n\021InvoicesToContact\022\022"
    "\n\ncontact_id\030\001 \002(\003\022\022\n\ninvoice_id\030\002 \002(\003\022\014"
    "\n\004role\030\003 \002(\t\"k\n\nOrderEntry\022\n\n\002id\030\001 \002(\003\022\020"
    "\n\010order_id\030\002 \001(\003\022\020\n\010offer_id\030\003 \001(\003\022\026\n\016of"
    "fer_entry_id\030\004 \001(\003\022\025\n\003qty\030\005 \001(\0132\010.Decima"
    "l\"e\n\007Receipt\022\n\n\002id\030\001 \002(\003\022\022\n\nemitter_id\030\002"
    " \001(\003\022\014\n\004date\030\003 \001(\003\022\025\n\003sum\030\004 \001(\0132\010.Decima"
    "l\022\025\n\remission_date\030\005 \001(\003\"R\n\025ContactsToLe"
    "galEntity\022\022\n\ncontact_id\030\001 \002(\003\022\014\n\004role\030\002 "
    "\001(\t\022\027\n\017legal_entity_id\030\003 \002(\003\"+\n\013OfferOpt"
    "ion\022\n\n\002id\030\001 \002(\003\022\020\n\010offer_id\030\002 \001(\003\"G\n\006Cli"
    "ent\022\n\n\002id\030\001 \002(\003\022\022\n\ncontact_id\030\002 \001(\003\022\014\n\004u"
    "ser\030\003 \001(\t\022\017\n\007passmd5\030\004 \001(\t\"D\n\006Device\022\n\n\002"
    "id\030\001 \002(\003\022\014\n\004UUID\030\002 \001(\t\022\013\n\003tel\030\003 \001(\t\022\023\n\013r"
    "eceivessms\030\004 \001(\010\"S\n\007Payment\022\n\n\002id\030\001 \002(\003\022"
    "\021\n\tclient_id\030\002 \001(\003\022\025\n\003sum\030\003 \001(\0132\010.Decima"
    "l\022\022\n\nreceipt_id\030\004 \001(\003\"h\n\024RestaurantsToCo"
    "ntact\022\025\n\rrestaurant_id\030\001 \002(\003\022\022\n\ncontact_"
    "id\030\002 \002(\003\022\020\n\010position\030\003 \002(\t\022\023\n\013can_delive"
    "r\030\004 \001(\010\"~\n\tMenuEntry\022\n\n\002id\030\001 \002(\003\022\017\n\007menu"
    "_id\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\032\n\022main_ingredie"
    "nt_id\030\004 \001(\003\022\022\n\noption_for\030\005 \001(\003\022\026\n\016optio"
    "n_max_qty\030\006 \001(\003\"\306\001\n\nRestaurant\022\n\n\002id\030\001 \002"
    "(\003\022\014\n\004name\030\002 \001(\t\022\022\n\naddress_id\030\003 \001(\003\022\027\n\017"
    "legal_entity_id\030\004 \001(\003\022+\n\031customer_teleph"
    "one_number\030\005 \001(\0132\010.Decimal\022\033\n\023customer_c"
    "ontact_id\030\006 \001(\003\022\014\n\004logo\030\007 \001(\t\022\031\n\021logo_sr"
    "c_image_id\030\010 \001(\003B\025\n\023net.maivic.protocol", 2999);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gen/model.proto", &protobuf_RegisterTypes);
  Address::default_instance_ = new Address();
  DeliveryPlaceSpecification::default_instance_ = new DeliveryPlaceSpecification();
  LegalEntity::default_instance_ = new LegalEntity();
  Meeting::default_instance_ = new Meeting();
  Location::default_instance_ = new Location();
  Delivery::default_instance_ = new Delivery();
  Ingredient::default_instance_ = new Ingredient();
  Image::default_instance_ = new Image();
  Order::default_instance_ = new Order();
  Contact::default_instance_ = new Contact();
  MeetingsToContact::default_instance_ = new MeetingsToContact();
  DeliveryPlace::default_instance_ = new DeliveryPlace();
  Invoice::default_instance_ = new Invoice();
  Offer::default_instance_ = new Offer();
  MenuEntryOption::default_instance_ = new MenuEntryOption();
  Building::default_instance_ = new Building();
  PaymentsToOrder::default_instance_ = new PaymentsToOrder();
  Decimal::default_instance_ = new Decimal();
  Interval::default_instance_ = new Interval();
  Menu::default_instance_ = new Menu();
  PlaceType::default_instance_ = new PlaceType();
  InvoicesToContact::default_instance_ = new InvoicesToContact();
  OrderEntry::default_instance_ = new OrderEntry();
  Receipt::default_instance_ = new Receipt();
  ContactsToLegalEntity::default_instance_ = new ContactsToLegalEntity();
  OfferOption::default_instance_ = new OfferOption();
  Client::default_instance_ = new Client();
  Device::default_instance_ = new Device();
  Payment::default_instance_ = new Payment();
  RestaurantsToContact::default_instance_ = new RestaurantsToContact();
  MenuEntry::default_instance_ = new MenuEntry();
  Restaurant::default_instance_ = new Restaurant();
  Address::default_instance_->InitAsDefaultInstance();
  DeliveryPlaceSpecification::default_instance_->InitAsDefaultInstance();
  LegalEntity::default_instance_->InitAsDefaultInstance();
  Meeting::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  Delivery::default_instance_->InitAsDefaultInstance();
  Ingredient::default_instance_->InitAsDefaultInstance();
  Image::default_instance_->InitAsDefaultInstance();
  Order::default_instance_->InitAsDefaultInstance();
  Contact::default_instance_->InitAsDefaultInstance();
  MeetingsToContact::default_instance_->InitAsDefaultInstance();
  DeliveryPlace::default_instance_->InitAsDefaultInstance();
  Invoice::default_instance_->InitAsDefaultInstance();
  Offer::default_instance_->InitAsDefaultInstance();
  MenuEntryOption::default_instance_->InitAsDefaultInstance();
  Building::default_instance_->InitAsDefaultInstance();
  PaymentsToOrder::default_instance_->InitAsDefaultInstance();
  Decimal::default_instance_->InitAsDefaultInstance();
  Interval::default_instance_->InitAsDefaultInstance();
  Menu::default_instance_->InitAsDefaultInstance();
  PlaceType::default_instance_->InitAsDefaultInstance();
  InvoicesToContact::default_instance_->InitAsDefaultInstance();
  OrderEntry::default_instance_->InitAsDefaultInstance();
  Receipt::default_instance_->InitAsDefaultInstance();
  ContactsToLegalEntity::default_instance_->InitAsDefaultInstance();
  OfferOption::default_instance_->InitAsDefaultInstance();
  Client::default_instance_->InitAsDefaultInstance();
  Device::default_instance_->InitAsDefaultInstance();
  Payment::default_instance_->InitAsDefaultInstance();
  RestaurantsToContact::default_instance_->InitAsDefaultInstance();
  MenuEntry::default_instance_->InitAsDefaultInstance();
  Restaurant::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gen_2fmodel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gen_2fmodel_2eproto {
  StaticDescriptorInitializer_gen_2fmodel_2eproto() {
    protobuf_AddDesc_gen_2fmodel_2eproto();
  }
} static_descriptor_initializer_gen_2fmodel_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Address::kIdFieldNumber;
const int Address::kStreetFieldNumber;
const int Address::kZoneFieldNumber;
const int Address::kDistrictFieldNumber;
const int Address::kNumberFieldNumber;
const int Address::kCityFieldNumber;
const int Address::kCountyFieldNumber;
const int Address::kCountryFieldNumber;
#endif  // !_MSC_VER

Address::Address()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Address::InitAsDefaultInstance() {
}

Address::Address(const Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  district_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  county_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  SharedDtor();
}

void Address::SharedDtor() {
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (zone_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_;
  }
  if (district_ != &::google::protobuf::internal::kEmptyString) {
    delete district_;
  }
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (county_ != &::google::protobuf::internal::kEmptyString) {
    delete county_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (this != default_instance_) {
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New() const {
  return new Address;
}

void Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::kEmptyString) {
        street_->clear();
      }
    }
    if (has_zone()) {
      if (zone_ != &::google::protobuf::internal::kEmptyString) {
        zone_->clear();
      }
    }
    if (has_district()) {
      if (district_ != &::google::protobuf::internal::kEmptyString) {
        district_->clear();
      }
    }
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_county()) {
      if (county_ != &::google::protobuf::internal::kEmptyString) {
        county_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_street;
        break;
      }
      
      // optional string street = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_zone;
        break;
      }
      
      // optional string zone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_district;
        break;
      }
      
      // optional string district = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_district:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_district()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->district().data(), this->district().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_number;
        break;
      }
      
      // optional string number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }
      
      // optional string city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_county;
        break;
      }
      
      // optional string county = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_county:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_county()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->county().data(), this->county().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_country;
        break;
      }
      
      // optional string country = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string street = 2;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->street(), output);
  }
  
  // optional string zone = 3;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->zone(), output);
  }
  
  // optional string district = 4;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->district(), output);
  }
  
  // optional string number = 5;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->number(), output);
  }
  
  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->city(), output);
  }
  
  // optional string county = 7;
  if (has_county()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->county().data(), this->county().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->county(), output);
  }
  
  // optional string country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->country(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string street = 2;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->street(), target);
  }
  
  // optional string zone = 3;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->zone(), target);
  }
  
  // optional string district = 4;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->district(), target);
  }
  
  // optional string number = 5;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->number(), target);
  }
  
  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }
  
  // optional string county = 7;
  if (has_county()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->county().data(), this->county().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->county(), target);
  }
  
  // optional string country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Address::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string street = 2;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }
    
    // optional string zone = 3;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone());
    }
    
    // optional string district = 4;
    if (has_district()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->district());
    }
    
    // optional string number = 5;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }
    
    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
    // optional string county = 7;
    if (has_county()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->county());
    }
    
    // optional string country = 8;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_zone()) {
      set_zone(from.zone());
    }
    if (from.has_district()) {
      set_district(from.district());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_county()) {
      set_county(from.county());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Address::Swap(Address* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(street_, other->street_);
    std::swap(zone_, other->zone_);
    std::swap(district_, other->district_);
    std::swap(number_, other->number_);
    std::swap(city_, other->city_);
    std::swap(county_, other->county_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliveryPlaceSpecification::kIdFieldNumber;
const int DeliveryPlaceSpecification::kLocationIdFieldNumber;
const int DeliveryPlaceSpecification::kBuildingIdFieldNumber;
const int DeliveryPlaceSpecification::kDeliveryPlaceIdFieldNumber;
const int DeliveryPlaceSpecification::kPlaceTypeIdFieldNumber;
const int DeliveryPlaceSpecification::kTextValueFieldNumber;
#endif  // !_MSC_VER

DeliveryPlaceSpecification::DeliveryPlaceSpecification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeliveryPlaceSpecification::InitAsDefaultInstance() {
}

DeliveryPlaceSpecification::DeliveryPlaceSpecification(const DeliveryPlaceSpecification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeliveryPlaceSpecification::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  location_id_ = GOOGLE_LONGLONG(0);
  building_id_ = GOOGLE_LONGLONG(0);
  delivery_place_id_ = GOOGLE_LONGLONG(0);
  place_type_id_ = GOOGLE_LONGLONG(0);
  text_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliveryPlaceSpecification::~DeliveryPlaceSpecification() {
  SharedDtor();
}

void DeliveryPlaceSpecification::SharedDtor() {
  if (text_value_ != &::google::protobuf::internal::kEmptyString) {
    delete text_value_;
  }
  if (this != default_instance_) {
  }
}

void DeliveryPlaceSpecification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeliveryPlaceSpecification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliveryPlaceSpecification_descriptor_;
}

const DeliveryPlaceSpecification& DeliveryPlaceSpecification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

DeliveryPlaceSpecification* DeliveryPlaceSpecification::default_instance_ = NULL;

DeliveryPlaceSpecification* DeliveryPlaceSpecification::New() const {
  return new DeliveryPlaceSpecification;
}

void DeliveryPlaceSpecification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    location_id_ = GOOGLE_LONGLONG(0);
    building_id_ = GOOGLE_LONGLONG(0);
    delivery_place_id_ = GOOGLE_LONGLONG(0);
    place_type_id_ = GOOGLE_LONGLONG(0);
    if (has_text_value()) {
      if (text_value_ != &::google::protobuf::internal::kEmptyString) {
        text_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliveryPlaceSpecification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location_id;
        break;
      }
      
      // optional int64 location_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &location_id_)));
          set_has_location_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_building_id;
        break;
      }
      
      // optional int64 building_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delivery_place_id;
        break;
      }
      
      // optional int64 delivery_place_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delivery_place_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delivery_place_id_)));
          set_has_delivery_place_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_place_type_id;
        break;
      }
      
      // optional int64 place_type_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &place_type_id_)));
          set_has_place_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text_value;
        break;
      }
      
      // optional string text_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text_value().data(), this->text_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeliveryPlaceSpecification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 location_id = 2;
  if (has_location_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->location_id(), output);
  }
  
  // optional int64 building_id = 3;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->building_id(), output);
  }
  
  // optional int64 delivery_place_id = 4;
  if (has_delivery_place_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->delivery_place_id(), output);
  }
  
  // optional int64 place_type_id = 5;
  if (has_place_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->place_type_id(), output);
  }
  
  // optional string text_value = 6;
  if (has_text_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_value().data(), this->text_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeliveryPlaceSpecification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 location_id = 2;
  if (has_location_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->location_id(), target);
  }
  
  // optional int64 building_id = 3;
  if (has_building_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->building_id(), target);
  }
  
  // optional int64 delivery_place_id = 4;
  if (has_delivery_place_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->delivery_place_id(), target);
  }
  
  // optional int64 place_type_id = 5;
  if (has_place_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->place_type_id(), target);
  }
  
  // optional string text_value = 6;
  if (has_text_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_value().data(), this->text_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeliveryPlaceSpecification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 location_id = 2;
    if (has_location_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->location_id());
    }
    
    // optional int64 building_id = 3;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->building_id());
    }
    
    // optional int64 delivery_place_id = 4;
    if (has_delivery_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->delivery_place_id());
    }
    
    // optional int64 place_type_id = 5;
    if (has_place_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->place_type_id());
    }
    
    // optional string text_value = 6;
    if (has_text_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliveryPlaceSpecification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliveryPlaceSpecification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeliveryPlaceSpecification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliveryPlaceSpecification::MergeFrom(const DeliveryPlaceSpecification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_location_id()) {
      set_location_id(from.location_id());
    }
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_delivery_place_id()) {
      set_delivery_place_id(from.delivery_place_id());
    }
    if (from.has_place_type_id()) {
      set_place_type_id(from.place_type_id());
    }
    if (from.has_text_value()) {
      set_text_value(from.text_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliveryPlaceSpecification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliveryPlaceSpecification::CopyFrom(const DeliveryPlaceSpecification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryPlaceSpecification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeliveryPlaceSpecification::Swap(DeliveryPlaceSpecification* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(location_id_, other->location_id_);
    std::swap(building_id_, other->building_id_);
    std::swap(delivery_place_id_, other->delivery_place_id_);
    std::swap(place_type_id_, other->place_type_id_);
    std::swap(text_value_, other->text_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeliveryPlaceSpecification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeliveryPlaceSpecification_descriptor_;
  metadata.reflection = DeliveryPlaceSpecification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegalEntity::kIdFieldNumber;
const int LegalEntity::kBillingAddressIdFieldNumber;
const int LegalEntity::kVATINFieldNumber;
const int LegalEntity::kRegisteredOfficeIdFieldNumber;
const int LegalEntity::kRefNoFieldNumber;
#endif  // !_MSC_VER

LegalEntity::LegalEntity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegalEntity::InitAsDefaultInstance() {
}

LegalEntity::LegalEntity(const LegalEntity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegalEntity::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  billing_address_id_ = GOOGLE_LONGLONG(0);
  vatin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  registered_office_id_ = GOOGLE_LONGLONG(0);
  ref_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegalEntity::~LegalEntity() {
  SharedDtor();
}

void LegalEntity::SharedDtor() {
  if (vatin_ != &::google::protobuf::internal::kEmptyString) {
    delete vatin_;
  }
  if (ref_no_ != &::google::protobuf::internal::kEmptyString) {
    delete ref_no_;
  }
  if (this != default_instance_) {
  }
}

void LegalEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegalEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegalEntity_descriptor_;
}

const LegalEntity& LegalEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

LegalEntity* LegalEntity::default_instance_ = NULL;

LegalEntity* LegalEntity::New() const {
  return new LegalEntity;
}

void LegalEntity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    billing_address_id_ = GOOGLE_LONGLONG(0);
    if (has_vatin()) {
      if (vatin_ != &::google::protobuf::internal::kEmptyString) {
        vatin_->clear();
      }
    }
    registered_office_id_ = GOOGLE_LONGLONG(0);
    if (has_ref_no()) {
      if (ref_no_ != &::google::protobuf::internal::kEmptyString) {
        ref_no_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegalEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_billing_address_id;
        break;
      }
      
      // optional int64 billing_address_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_billing_address_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &billing_address_id_)));
          set_has_billing_address_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_VATIN;
        break;
      }
      
      // optional string VATIN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VATIN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vatin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vatin().data(), this->vatin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_registered_office_id;
        break;
      }
      
      // optional int64 registered_office_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_registered_office_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &registered_office_id_)));
          set_has_registered_office_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ref_no;
        break;
      }
      
      // optional string ref_no = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ref_no().data(), this->ref_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegalEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 billing_address_id = 2;
  if (has_billing_address_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->billing_address_id(), output);
  }
  
  // optional string VATIN = 3;
  if (has_vatin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vatin().data(), this->vatin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vatin(), output);
  }
  
  // optional int64 registered_office_id = 4;
  if (has_registered_office_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->registered_office_id(), output);
  }
  
  // optional string ref_no = 5;
  if (has_ref_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref_no().data(), this->ref_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ref_no(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegalEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 billing_address_id = 2;
  if (has_billing_address_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->billing_address_id(), target);
  }
  
  // optional string VATIN = 3;
  if (has_vatin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vatin().data(), this->vatin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vatin(), target);
  }
  
  // optional int64 registered_office_id = 4;
  if (has_registered_office_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->registered_office_id(), target);
  }
  
  // optional string ref_no = 5;
  if (has_ref_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref_no().data(), this->ref_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ref_no(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegalEntity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 billing_address_id = 2;
    if (has_billing_address_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->billing_address_id());
    }
    
    // optional string VATIN = 3;
    if (has_vatin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vatin());
    }
    
    // optional int64 registered_office_id = 4;
    if (has_registered_office_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->registered_office_id());
    }
    
    // optional string ref_no = 5;
    if (has_ref_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref_no());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegalEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegalEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegalEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegalEntity::MergeFrom(const LegalEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_billing_address_id()) {
      set_billing_address_id(from.billing_address_id());
    }
    if (from.has_vatin()) {
      set_vatin(from.vatin());
    }
    if (from.has_registered_office_id()) {
      set_registered_office_id(from.registered_office_id());
    }
    if (from.has_ref_no()) {
      set_ref_no(from.ref_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegalEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegalEntity::CopyFrom(const LegalEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegalEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LegalEntity::Swap(LegalEntity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(billing_address_id_, other->billing_address_id_);
    std::swap(vatin_, other->vatin_);
    std::swap(registered_office_id_, other->registered_office_id_);
    std::swap(ref_no_, other->ref_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegalEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegalEntity_descriptor_;
  metadata.reflection = LegalEntity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Meeting::kIdFieldNumber;
const int Meeting::kDateFieldNumber;
const int Meeting::kDurationFieldNumber;
const int Meeting::kTopicFieldNumber;
const int Meeting::kResultFieldNumber;
const int Meeting::kPlaceFieldNumber;
#endif  // !_MSC_VER

Meeting::Meeting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Meeting::InitAsDefaultInstance() {
  duration_ = const_cast< ::Interval*>(&::Interval::default_instance());
}

Meeting::Meeting(const Meeting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Meeting::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  date_ = GOOGLE_LONGLONG(0);
  duration_ = NULL;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  place_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Meeting::~Meeting() {
  SharedDtor();
}

void Meeting::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (this != default_instance_) {
    delete duration_;
  }
}

void Meeting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Meeting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Meeting_descriptor_;
}

const Meeting& Meeting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Meeting* Meeting::default_instance_ = NULL;

Meeting* Meeting::New() const {
  return new Meeting;
}

void Meeting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    date_ = GOOGLE_LONGLONG(0);
    if (has_duration()) {
      if (duration_ != NULL) duration_->::Interval::Clear();
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::kEmptyString) {
        topic_->clear();
      }
    }
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
    place_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Meeting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_date;
        break;
      }
      
      // optional int64 date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_duration;
        break;
      }
      
      // optional .Interval duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_topic;
        break;
      }
      
      // optional string topic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_result;
        break;
      }
      
      // optional string result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_place;
        break;
      }
      
      // optional int64 place = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Meeting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->date(), output);
  }
  
  // optional .Interval duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->duration(), output);
  }
  
  // optional string topic = 4;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topic(), output);
  }
  
  // optional string result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->result(), output);
  }
  
  // optional int64 place = 6;
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->place(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Meeting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 date = 2;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->date(), target);
  }
  
  // optional .Interval duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->duration(), target);
  }
  
  // optional string topic = 4;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->topic(), target);
  }
  
  // optional string result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->result(), target);
  }
  
  // optional int64 place = 6;
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->place(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Meeting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date());
    }
    
    // optional .Interval duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->duration());
    }
    
    // optional string topic = 4;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }
    
    // optional string result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }
    
    // optional int64 place = 6;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->place());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Meeting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Meeting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Meeting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Meeting::MergeFrom(const Meeting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_duration()) {
      mutable_duration()->::Interval::MergeFrom(from.duration());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_place()) {
      set_place(from.place());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Meeting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meeting::CopyFrom(const Meeting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meeting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Meeting::Swap(Meeting* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(date_, other->date_);
    std::swap(duration_, other->duration_);
    std::swap(topic_, other->topic_);
    std::swap(result_, other->result_);
    std::swap(place_, other->place_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Meeting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Meeting_descriptor_;
  metadata.reflection = Meeting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Location::kIdFieldNumber;
#endif  // !_MSC_VER

Location::Location()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Location::InitAsDefaultInstance() {
}

Location::Location(const Location& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Location::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location::~Location() {
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_descriptor_;
}

const Location& Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New() const {
  return new Location;
}

void Location::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Location::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Location*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Location::Swap(Location* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_descriptor_;
  metadata.reflection = Location_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Delivery::kIdFieldNumber;
const int Delivery::kRestaurantIdFieldNumber;
const int Delivery::kDeliveringGuyIdFieldNumber;
const int Delivery::kOrderIdFieldNumber;
const int Delivery::kEtaArivalFieldNumber;
const int Delivery::kArrivalFieldNumber;
const int Delivery::kLocationIdFieldNumber;
#endif  // !_MSC_VER

Delivery::Delivery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Delivery::InitAsDefaultInstance() {
}

Delivery::Delivery(const Delivery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Delivery::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  restaurant_id_ = GOOGLE_LONGLONG(0);
  delivering_guy_id_ = GOOGLE_LONGLONG(0);
  order_id_ = GOOGLE_LONGLONG(0);
  eta_arival_ = GOOGLE_LONGLONG(0);
  arrival_ = GOOGLE_LONGLONG(0);
  location_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Delivery::~Delivery() {
  SharedDtor();
}

void Delivery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Delivery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delivery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Delivery_descriptor_;
}

const Delivery& Delivery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Delivery* Delivery::default_instance_ = NULL;

Delivery* Delivery::New() const {
  return new Delivery;
}

void Delivery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    restaurant_id_ = GOOGLE_LONGLONG(0);
    delivering_guy_id_ = GOOGLE_LONGLONG(0);
    order_id_ = GOOGLE_LONGLONG(0);
    eta_arival_ = GOOGLE_LONGLONG(0);
    arrival_ = GOOGLE_LONGLONG(0);
    location_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Delivery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_restaurant_id;
        break;
      }
      
      // optional int64 restaurant_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restaurant_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &restaurant_id_)));
          set_has_restaurant_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_delivering_guy_id;
        break;
      }
      
      // optional int64 delivering_guy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delivering_guy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delivering_guy_id_)));
          set_has_delivering_guy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_order_id;
        break;
      }
      
      // optional int64 order_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_eta_arival;
        break;
      }
      
      // optional int64 eta_arival = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eta_arival:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &eta_arival_)));
          set_has_eta_arival();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_arrival;
        break;
      }
      
      // optional int64 arrival = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrival:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &arrival_)));
          set_has_arrival();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_location_id;
        break;
      }
      
      // optional int64 location_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &location_id_)));
          set_has_location_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Delivery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 restaurant_id = 2;
  if (has_restaurant_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->restaurant_id(), output);
  }
  
  // optional int64 delivering_guy_id = 3;
  if (has_delivering_guy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->delivering_guy_id(), output);
  }
  
  // optional int64 order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->order_id(), output);
  }
  
  // optional int64 eta_arival = 5;
  if (has_eta_arival()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->eta_arival(), output);
  }
  
  // optional int64 arrival = 6;
  if (has_arrival()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->arrival(), output);
  }
  
  // optional int64 location_id = 7;
  if (has_location_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->location_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Delivery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 restaurant_id = 2;
  if (has_restaurant_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->restaurant_id(), target);
  }
  
  // optional int64 delivering_guy_id = 3;
  if (has_delivering_guy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->delivering_guy_id(), target);
  }
  
  // optional int64 order_id = 4;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->order_id(), target);
  }
  
  // optional int64 eta_arival = 5;
  if (has_eta_arival()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->eta_arival(), target);
  }
  
  // optional int64 arrival = 6;
  if (has_arrival()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->arrival(), target);
  }
  
  // optional int64 location_id = 7;
  if (has_location_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->location_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Delivery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 restaurant_id = 2;
    if (has_restaurant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->restaurant_id());
    }
    
    // optional int64 delivering_guy_id = 3;
    if (has_delivering_guy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->delivering_guy_id());
    }
    
    // optional int64 order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_id());
    }
    
    // optional int64 eta_arival = 5;
    if (has_eta_arival()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->eta_arival());
    }
    
    // optional int64 arrival = 6;
    if (has_arrival()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->arrival());
    }
    
    // optional int64 location_id = 7;
    if (has_location_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->location_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delivery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Delivery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Delivery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Delivery::MergeFrom(const Delivery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_restaurant_id()) {
      set_restaurant_id(from.restaurant_id());
    }
    if (from.has_delivering_guy_id()) {
      set_delivering_guy_id(from.delivering_guy_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_eta_arival()) {
      set_eta_arival(from.eta_arival());
    }
    if (from.has_arrival()) {
      set_arrival(from.arrival());
    }
    if (from.has_location_id()) {
      set_location_id(from.location_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Delivery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delivery::CopyFrom(const Delivery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delivery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Delivery::Swap(Delivery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(restaurant_id_, other->restaurant_id_);
    std::swap(delivering_guy_id_, other->delivering_guy_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(eta_arival_, other->eta_arival_);
    std::swap(arrival_, other->arrival_);
    std::swap(location_id_, other->location_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Delivery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Delivery_descriptor_;
  metadata.reflection = Delivery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ingredient::kIdFieldNumber;
const int Ingredient::kNameFieldNumber;
const int Ingredient::kImageIdFieldNumber;
#endif  // !_MSC_VER

Ingredient::Ingredient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ingredient::InitAsDefaultInstance() {
}

Ingredient::Ingredient(const Ingredient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ingredient::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ingredient::~Ingredient() {
  SharedDtor();
}

void Ingredient::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Ingredient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ingredient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ingredient_descriptor_;
}

const Ingredient& Ingredient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Ingredient* Ingredient::default_instance_ = NULL;

Ingredient* Ingredient::New() const {
  return new Ingredient;
}

void Ingredient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    image_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ingredient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_image_id;
        break;
      }
      
      // optional int64 image_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &image_id_)));
          set_has_image_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ingredient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int64 image_id = 3;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->image_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ingredient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int64 image_id = 3;
  if (has_image_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->image_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ingredient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 image_id = 3;
    if (has_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->image_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ingredient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ingredient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ingredient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ingredient::MergeFrom(const Ingredient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_image_id()) {
      set_image_id(from.image_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ingredient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ingredient::CopyFrom(const Ingredient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ingredient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Ingredient::Swap(Ingredient* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(image_id_, other->image_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ingredient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ingredient_descriptor_;
  metadata.reflection = Ingredient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Image::kIdFieldNumber;
const int Image::kNameFieldNumber;
const int Image::kDataFieldNumber;
const int Image::kArtistIdFieldNumber;
const int Image::kCommentFieldNumber;
#endif  // !_MSC_VER

Image::Image()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Image::InitAsDefaultInstance() {
}

Image::Image(const Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Image::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  artist_id_ = GOOGLE_LONGLONG(0);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image::~Image() {
  SharedDtor();
}

void Image::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New() const {
  return new Image;
}

void Image::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    artist_id_ = GOOGLE_LONGLONG(0);
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // optional string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_artist_id;
        break;
      }
      
      // optional int64 artist_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_artist_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &artist_id_)));
          set_has_artist_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_comment;
        break;
      }
      
      // optional string comment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }
  
  // optional int64 artist_id = 4;
  if (has_artist_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->artist_id(), output);
  }
  
  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->comment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }
  
  // optional int64 artist_id = 4;
  if (has_artist_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->artist_id(), target);
  }
  
  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Image::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
    // optional int64 artist_id = 4;
    if (has_artist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->artist_id());
    }
    
    // optional string comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_artist_id()) {
      set_artist_id(from.artist_id());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Image::Swap(Image* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(data_, other->data_);
    std::swap(artist_id_, other->artist_id_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Order::kIdFieldNumber;
const int Order::kClientIdFieldNumber;
const int Order::kNotesFieldNumber;
const int Order::kOfferIdFieldNumber;
const int Order::kDeliveryPlaceIdFieldNumber;
const int Order::kDeliveryBoxIdFieldNumber;
#endif  // !_MSC_VER

Order::Order()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Order::InitAsDefaultInstance() {
}

Order::Order(const Order& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Order::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  client_id_ = GOOGLE_LONGLONG(0);
  notes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offer_id_ = GOOGLE_LONGLONG(0);
  delivery_place_id_ = GOOGLE_LONGLONG(0);
  delivery_box_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Order::~Order() {
  SharedDtor();
}

void Order::SharedDtor() {
  if (notes_ != &::google::protobuf::internal::kEmptyString) {
    delete notes_;
  }
  if (delivery_box_id_ != &::google::protobuf::internal::kEmptyString) {
    delete delivery_box_id_;
  }
  if (this != default_instance_) {
  }
}

void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_descriptor_;
}

const Order& Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Order* Order::default_instance_ = NULL;

Order* Order::New() const {
  return new Order;
}

void Order::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    client_id_ = GOOGLE_LONGLONG(0);
    if (has_notes()) {
      if (notes_ != &::google::protobuf::internal::kEmptyString) {
        notes_->clear();
      }
    }
    offer_id_ = GOOGLE_LONGLONG(0);
    delivery_place_id_ = GOOGLE_LONGLONG(0);
    if (has_delivery_box_id()) {
      if (delivery_box_id_ != &::google::protobuf::internal::kEmptyString) {
        delivery_box_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_id;
        break;
      }
      
      // optional int64 client_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notes;
        break;
      }
      
      // optional string notes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notes().data(), this->notes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offer_id;
        break;
      }
      
      // optional int64 offer_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offer_id_)));
          set_has_offer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_delivery_place_id;
        break;
      }
      
      // optional int64 delivery_place_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delivery_place_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delivery_place_id_)));
          set_has_delivery_place_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_delivery_box_id;
        break;
      }
      
      // optional string delivery_box_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delivery_box_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delivery_box_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delivery_box_id().data(), this->delivery_box_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 client_id = 2;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->client_id(), output);
  }
  
  // optional string notes = 3;
  if (has_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->notes(), output);
  }
  
  // optional int64 offer_id = 4;
  if (has_offer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->offer_id(), output);
  }
  
  // optional int64 delivery_place_id = 5;
  if (has_delivery_place_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->delivery_place_id(), output);
  }
  
  // optional string delivery_box_id = 6;
  if (has_delivery_box_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delivery_box_id().data(), this->delivery_box_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->delivery_box_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 client_id = 2;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->client_id(), target);
  }
  
  // optional string notes = 3;
  if (has_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notes(), target);
  }
  
  // optional int64 offer_id = 4;
  if (has_offer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->offer_id(), target);
  }
  
  // optional int64 delivery_place_id = 5;
  if (has_delivery_place_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->delivery_place_id(), target);
  }
  
  // optional string delivery_box_id = 6;
  if (has_delivery_box_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delivery_box_id().data(), this->delivery_box_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->delivery_box_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Order::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 client_id = 2;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->client_id());
    }
    
    // optional string notes = 3;
    if (has_notes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notes());
    }
    
    // optional int64 offer_id = 4;
    if (has_offer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offer_id());
    }
    
    // optional int64 delivery_place_id = 5;
    if (has_delivery_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->delivery_place_id());
    }
    
    // optional string delivery_box_id = 6;
    if (has_delivery_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->delivery_box_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_notes()) {
      set_notes(from.notes());
    }
    if (from.has_offer_id()) {
      set_offer_id(from.offer_id());
    }
    if (from.has_delivery_place_id()) {
      set_delivery_place_id(from.delivery_place_id());
    }
    if (from.has_delivery_box_id()) {
      set_delivery_box_id(from.delivery_box_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Order::Swap(Order* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(client_id_, other->client_id_);
    std::swap(notes_, other->notes_);
    std::swap(offer_id_, other->offer_id_);
    std::swap(delivery_place_id_, other->delivery_place_id_);
    std::swap(delivery_box_id_, other->delivery_box_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Order_descriptor_;
  metadata.reflection = Order_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Contact::kIdFieldNumber;
const int Contact::kNameFieldNumber;
const int Contact::kAddressIdFieldNumber;
const int Contact::kMobileFieldNumber;
const int Contact::kEmailFieldNumber;
const int Contact::kLandlineFieldNumber;
const int Contact::kVATINFieldNumber;
#endif  // !_MSC_VER

Contact::Contact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Contact::InitAsDefaultInstance() {
}

Contact::Contact(const Contact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Contact::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_id_ = GOOGLE_LONGLONG(0);
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  landline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vatin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Contact::~Contact() {
  SharedDtor();
}

void Contact::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (landline_ != &::google::protobuf::internal::kEmptyString) {
    delete landline_;
  }
  if (vatin_ != &::google::protobuf::internal::kEmptyString) {
    delete vatin_;
  }
  if (this != default_instance_) {
  }
}

void Contact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Contact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Contact_descriptor_;
}

const Contact& Contact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Contact* Contact::default_instance_ = NULL;

Contact* Contact::New() const {
  return new Contact;
}

void Contact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    address_id_ = GOOGLE_LONGLONG(0);
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::kEmptyString) {
        mobile_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_landline()) {
      if (landline_ != &::google::protobuf::internal::kEmptyString) {
        landline_->clear();
      }
    }
    if (has_vatin()) {
      if (vatin_ != &::google::protobuf::internal::kEmptyString) {
        vatin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_address_id;
        break;
      }
      
      // optional int64 address_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &address_id_)));
          set_has_address_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mobile;
        break;
      }
      
      // optional string mobile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }
      
      // optional string email = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_landline;
        break;
      }
      
      // optional string landline = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_landline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_landline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->landline().data(), this->landline().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_VATIN;
        break;
      }
      
      // optional string VATIN = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VATIN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vatin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vatin().data(), this->vatin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int64 address_id = 3;
  if (has_address_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->address_id(), output);
  }
  
  // optional string mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mobile(), output);
  }
  
  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->email(), output);
  }
  
  // optional string landline = 6;
  if (has_landline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->landline().data(), this->landline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->landline(), output);
  }
  
  // optional string VATIN = 7;
  if (has_vatin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vatin().data(), this->vatin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->vatin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Contact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int64 address_id = 3;
  if (has_address_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->address_id(), target);
  }
  
  // optional string mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mobile(), target);
  }
  
  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }
  
  // optional string landline = 6;
  if (has_landline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->landline().data(), this->landline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->landline(), target);
  }
  
  // optional string VATIN = 7;
  if (has_vatin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vatin().data(), this->vatin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->vatin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Contact::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 address_id = 3;
    if (has_address_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->address_id());
    }
    
    // optional string mobile = 4;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }
    
    // optional string email = 5;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
    // optional string landline = 6;
    if (has_landline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->landline());
    }
    
    // optional string VATIN = 7;
    if (has_vatin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vatin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Contact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Contact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Contact::MergeFrom(const Contact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_address_id()) {
      set_address_id(from.address_id());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_landline()) {
      set_landline(from.landline());
    }
    if (from.has_vatin()) {
      set_vatin(from.vatin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Contact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contact::CopyFrom(const Contact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Contact::Swap(Contact* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(address_id_, other->address_id_);
    std::swap(mobile_, other->mobile_);
    std::swap(email_, other->email_);
    std::swap(landline_, other->landline_);
    std::swap(vatin_, other->vatin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Contact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Contact_descriptor_;
  metadata.reflection = Contact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeetingsToContact::kContactIdFieldNumber;
const int MeetingsToContact::kRoleFieldNumber;
const int MeetingsToContact::kMeetingIdFieldNumber;
#endif  // !_MSC_VER

MeetingsToContact::MeetingsToContact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeetingsToContact::InitAsDefaultInstance() {
}

MeetingsToContact::MeetingsToContact(const MeetingsToContact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeetingsToContact::SharedCtor() {
  _cached_size_ = 0;
  contact_id_ = GOOGLE_LONGLONG(0);
  role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  meeting_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeetingsToContact::~MeetingsToContact() {
  SharedDtor();
}

void MeetingsToContact::SharedDtor() {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (this != default_instance_) {
  }
}

void MeetingsToContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeetingsToContact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeetingsToContact_descriptor_;
}

const MeetingsToContact& MeetingsToContact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

MeetingsToContact* MeetingsToContact::default_instance_ = NULL;

MeetingsToContact* MeetingsToContact::New() const {
  return new MeetingsToContact;
}

void MeetingsToContact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    contact_id_ = GOOGLE_LONGLONG(0);
    if (has_role()) {
      if (role_ != &::google::protobuf::internal::kEmptyString) {
        role_->clear();
      }
    }
    meeting_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeetingsToContact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 contact_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contact_id_)));
          set_has_contact_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }
      
      // required string role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_meeting_id;
        break;
      }
      
      // required int64 meeting_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meeting_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &meeting_id_)));
          set_has_meeting_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeetingsToContact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 contact_id = 1;
  if (has_contact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->contact_id(), output);
  }
  
  // required string role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role(), output);
  }
  
  // required int64 meeting_id = 3;
  if (has_meeting_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->meeting_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeetingsToContact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 contact_id = 1;
  if (has_contact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->contact_id(), target);
  }
  
  // required string role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role(), target);
  }
  
  // required int64 meeting_id = 3;
  if (has_meeting_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->meeting_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeetingsToContact::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 contact_id = 1;
    if (has_contact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contact_id());
    }
    
    // required string role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }
    
    // required int64 meeting_id = 3;
    if (has_meeting_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->meeting_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeetingsToContact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeetingsToContact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeetingsToContact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeetingsToContact::MergeFrom(const MeetingsToContact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contact_id()) {
      set_contact_id(from.contact_id());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_meeting_id()) {
      set_meeting_id(from.meeting_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeetingsToContact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeetingsToContact::CopyFrom(const MeetingsToContact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeetingsToContact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MeetingsToContact::Swap(MeetingsToContact* other) {
  if (other != this) {
    std::swap(contact_id_, other->contact_id_);
    std::swap(role_, other->role_);
    std::swap(meeting_id_, other->meeting_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeetingsToContact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeetingsToContact_descriptor_;
  metadata.reflection = MeetingsToContact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliveryPlace::kIdFieldNumber;
const int DeliveryPlace::kLocationIdFieldNumber;
const int DeliveryPlace::kBuildingIdFieldNumber;
const int DeliveryPlace::kShortNameFieldNumber;
const int DeliveryPlace::kPlaceTypesFieldNumber;
#endif  // !_MSC_VER

DeliveryPlace::DeliveryPlace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeliveryPlace::InitAsDefaultInstance() {
}

DeliveryPlace::DeliveryPlace(const DeliveryPlace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeliveryPlace::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  location_id_ = GOOGLE_LONGLONG(0);
  building_id_ = GOOGLE_LONGLONG(0);
  short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  place_types_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliveryPlace::~DeliveryPlace() {
  SharedDtor();
}

void DeliveryPlace::SharedDtor() {
  if (short_name_ != &::google::protobuf::internal::kEmptyString) {
    delete short_name_;
  }
  if (this != default_instance_) {
  }
}

void DeliveryPlace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeliveryPlace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliveryPlace_descriptor_;
}

const DeliveryPlace& DeliveryPlace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

DeliveryPlace* DeliveryPlace::default_instance_ = NULL;

DeliveryPlace* DeliveryPlace::New() const {
  return new DeliveryPlace;
}

void DeliveryPlace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    location_id_ = GOOGLE_LONGLONG(0);
    building_id_ = GOOGLE_LONGLONG(0);
    if (has_short_name()) {
      if (short_name_ != &::google::protobuf::internal::kEmptyString) {
        short_name_->clear();
      }
    }
    place_types_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliveryPlace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location_id;
        break;
      }
      
      // optional int64 location_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &location_id_)));
          set_has_location_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_building_id;
        break;
      }
      
      // optional int64 building_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_short_name;
        break;
      }
      
      // optional string short_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_short_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->short_name().data(), this->short_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_place_types;
        break;
      }
      
      // optional int64 place_types = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &place_types_)));
          set_has_place_types();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeliveryPlace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 location_id = 2;
  if (has_location_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->location_id(), output);
  }
  
  // optional int64 building_id = 3;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->building_id(), output);
  }
  
  // optional string short_name = 4;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->short_name(), output);
  }
  
  // optional int64 place_types = 5;
  if (has_place_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->place_types(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeliveryPlace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 location_id = 2;
  if (has_location_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->location_id(), target);
  }
  
  // optional int64 building_id = 3;
  if (has_building_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->building_id(), target);
  }
  
  // optional string short_name = 4;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->short_name(), target);
  }
  
  // optional int64 place_types = 5;
  if (has_place_types()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->place_types(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeliveryPlace::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 location_id = 2;
    if (has_location_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->location_id());
    }
    
    // optional int64 building_id = 3;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->building_id());
    }
    
    // optional string short_name = 4;
    if (has_short_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
    }
    
    // optional int64 place_types = 5;
    if (has_place_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->place_types());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliveryPlace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliveryPlace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeliveryPlace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliveryPlace::MergeFrom(const DeliveryPlace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_location_id()) {
      set_location_id(from.location_id());
    }
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_short_name()) {
      set_short_name(from.short_name());
    }
    if (from.has_place_types()) {
      set_place_types(from.place_types());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliveryPlace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliveryPlace::CopyFrom(const DeliveryPlace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryPlace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeliveryPlace::Swap(DeliveryPlace* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(location_id_, other->location_id_);
    std::swap(building_id_, other->building_id_);
    std::swap(short_name_, other->short_name_);
    std::swap(place_types_, other->place_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeliveryPlace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeliveryPlace_descriptor_;
  metadata.reflection = DeliveryPlace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Invoice::kIdFieldNumber;
const int Invoice::kEmmiterIdFieldNumber;
const int Invoice::kRecipientIdFieldNumber;
const int Invoice::kSumFieldNumber;
const int Invoice::kLegalEntityIdFieldNumber;
const int Invoice::kReceiverPersonIdFieldNumber;
#endif  // !_MSC_VER

Invoice::Invoice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Invoice::InitAsDefaultInstance() {
  sum_ = const_cast< ::Decimal*>(&::Decimal::default_instance());
}

Invoice::Invoice(const Invoice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Invoice::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  emmiter_id_ = GOOGLE_LONGLONG(0);
  recipient_id_ = GOOGLE_LONGLONG(0);
  sum_ = NULL;
  legal_entity_id_ = GOOGLE_LONGLONG(0);
  receiver_person_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invoice::~Invoice() {
  SharedDtor();
}

void Invoice::SharedDtor() {
  if (this != default_instance_) {
    delete sum_;
  }
}

void Invoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Invoice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invoice_descriptor_;
}

const Invoice& Invoice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Invoice* Invoice::default_instance_ = NULL;

Invoice* Invoice::New() const {
  return new Invoice;
}

void Invoice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    emmiter_id_ = GOOGLE_LONGLONG(0);
    recipient_id_ = GOOGLE_LONGLONG(0);
    if (has_sum()) {
      if (sum_ != NULL) sum_->::Decimal::Clear();
    }
    legal_entity_id_ = GOOGLE_LONGLONG(0);
    receiver_person_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Invoice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_emmiter_id;
        break;
      }
      
      // optional int64 emmiter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emmiter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &emmiter_id_)));
          set_has_emmiter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recipient_id;
        break;
      }
      
      // optional int64 recipient_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recipient_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recipient_id_)));
          set_has_recipient_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sum;
        break;
      }
      
      // optional .Decimal sum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_legal_entity_id;
        break;
      }
      
      // optional int64 legal_entity_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_legal_entity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &legal_entity_id_)));
          set_has_legal_entity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_receiver_person_id;
        break;
      }
      
      // optional int64 receiver_person_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiver_person_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiver_person_id_)));
          set_has_receiver_person_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Invoice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 emmiter_id = 2;
  if (has_emmiter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->emmiter_id(), output);
  }
  
  // optional int64 recipient_id = 3;
  if (has_recipient_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->recipient_id(), output);
  }
  
  // optional .Decimal sum = 4;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sum(), output);
  }
  
  // optional int64 legal_entity_id = 5;
  if (has_legal_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->legal_entity_id(), output);
  }
  
  // optional int64 receiver_person_id = 6;
  if (has_receiver_person_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->receiver_person_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Invoice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 emmiter_id = 2;
  if (has_emmiter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->emmiter_id(), target);
  }
  
  // optional int64 recipient_id = 3;
  if (has_recipient_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->recipient_id(), target);
  }
  
  // optional .Decimal sum = 4;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sum(), target);
  }
  
  // optional int64 legal_entity_id = 5;
  if (has_legal_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->legal_entity_id(), target);
  }
  
  // optional int64 receiver_person_id = 6;
  if (has_receiver_person_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->receiver_person_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Invoice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 emmiter_id = 2;
    if (has_emmiter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->emmiter_id());
    }
    
    // optional int64 recipient_id = 3;
    if (has_recipient_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recipient_id());
    }
    
    // optional .Decimal sum = 4;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sum());
    }
    
    // optional int64 legal_entity_id = 5;
    if (has_legal_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->legal_entity_id());
    }
    
    // optional int64 receiver_person_id = 6;
    if (has_receiver_person_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiver_person_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invoice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Invoice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Invoice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invoice::MergeFrom(const Invoice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_emmiter_id()) {
      set_emmiter_id(from.emmiter_id());
    }
    if (from.has_recipient_id()) {
      set_recipient_id(from.recipient_id());
    }
    if (from.has_sum()) {
      mutable_sum()->::Decimal::MergeFrom(from.sum());
    }
    if (from.has_legal_entity_id()) {
      set_legal_entity_id(from.legal_entity_id());
    }
    if (from.has_receiver_person_id()) {
      set_receiver_person_id(from.receiver_person_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Invoice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invoice::CopyFrom(const Invoice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invoice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Invoice::Swap(Invoice* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(emmiter_id_, other->emmiter_id_);
    std::swap(recipient_id_, other->recipient_id_);
    std::swap(sum_, other->sum_);
    std::swap(legal_entity_id_, other->legal_entity_id_);
    std::swap(receiver_person_id_, other->receiver_person_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Invoice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Invoice_descriptor_;
  metadata.reflection = Invoice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Offer::kIdFieldNumber;
const int Offer::kPeriodFieldNumber;
#endif  // !_MSC_VER

Offer::Offer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Offer::InitAsDefaultInstance() {
}

Offer::Offer(const Offer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Offer::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  period_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offer::~Offer() {
  SharedDtor();
}

void Offer::SharedDtor() {
  if (period_ != &::google::protobuf::internal::kEmptyString) {
    delete period_;
  }
  if (this != default_instance_) {
  }
}

void Offer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_descriptor_;
}

const Offer& Offer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Offer* Offer::default_instance_ = NULL;

Offer* Offer::New() const {
  return new Offer;
}

void Offer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_period()) {
      if (period_ != &::google::protobuf::internal::kEmptyString) {
        period_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_period;
        break;
      }
      
      // optional string period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_period()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->period().data(), this->period().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Offer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->period().data(), this->period().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->period(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Offer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->period().data(), this->period().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->period(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Offer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string period = 2;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->period());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offer::MergeFrom(const Offer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer::CopyFrom(const Offer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Offer::Swap(Offer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offer_descriptor_;
  metadata.reflection = Offer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MenuEntryOption::kIdFieldNumber;
const int MenuEntryOption::kMenuEntryIdFieldNumber;
const int MenuEntryOption::kNameFieldNumber;
const int MenuEntryOption::kDefaultIncludedFieldNumber;
#endif  // !_MSC_VER

MenuEntryOption::MenuEntryOption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MenuEntryOption::InitAsDefaultInstance() {
}

MenuEntryOption::MenuEntryOption(const MenuEntryOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MenuEntryOption::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  menu_entry_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  default_included_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MenuEntryOption::~MenuEntryOption() {
  SharedDtor();
}

void MenuEntryOption::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MenuEntryOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MenuEntryOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuEntryOption_descriptor_;
}

const MenuEntryOption& MenuEntryOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

MenuEntryOption* MenuEntryOption::default_instance_ = NULL;

MenuEntryOption* MenuEntryOption::New() const {
  return new MenuEntryOption;
}

void MenuEntryOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    menu_entry_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    default_included_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MenuEntryOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_menu_entry_id;
        break;
      }
      
      // optional int64 menu_entry_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_menu_entry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &menu_entry_id_)));
          set_has_menu_entry_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_default_included;
        break;
      }
      
      // optional bool default_included = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_included:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default_included_)));
          set_has_default_included();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MenuEntryOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 menu_entry_id = 2;
  if (has_menu_entry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->menu_entry_id(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional bool default_included = 4;
  if (has_default_included()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->default_included(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MenuEntryOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 menu_entry_id = 2;
  if (has_menu_entry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->menu_entry_id(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional bool default_included = 4;
  if (has_default_included()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->default_included(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MenuEntryOption::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 menu_entry_id = 2;
    if (has_menu_entry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->menu_entry_id());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional bool default_included = 4;
    if (has_default_included()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MenuEntryOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MenuEntryOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MenuEntryOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MenuEntryOption::MergeFrom(const MenuEntryOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_menu_entry_id()) {
      set_menu_entry_id(from.menu_entry_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_default_included()) {
      set_default_included(from.default_included());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MenuEntryOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuEntryOption::CopyFrom(const MenuEntryOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuEntryOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MenuEntryOption::Swap(MenuEntryOption* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(menu_entry_id_, other->menu_entry_id_);
    std::swap(name_, other->name_);
    std::swap(default_included_, other->default_included_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MenuEntryOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MenuEntryOption_descriptor_;
  metadata.reflection = MenuEntryOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Building::kIdFieldNumber;
const int Building::kLocationIdFieldNumber;
#endif  // !_MSC_VER

Building::Building()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Building::InitAsDefaultInstance() {
}

Building::Building(const Building& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Building::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  location_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Building::~Building() {
  SharedDtor();
}

void Building::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Building::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Building::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Building_descriptor_;
}

const Building& Building::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Building* Building::default_instance_ = NULL;

Building* Building::New() const {
  return new Building;
}

void Building::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    location_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Building::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location_id;
        break;
      }
      
      // optional int64 location_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &location_id_)));
          set_has_location_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Building::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 location_id = 2;
  if (has_location_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->location_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Building::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 location_id = 2;
  if (has_location_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->location_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Building::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 location_id = 2;
    if (has_location_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->location_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Building::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Building* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Building*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Building::MergeFrom(const Building& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_location_id()) {
      set_location_id(from.location_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Building::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Building::CopyFrom(const Building& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Building::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Building::Swap(Building* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(location_id_, other->location_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Building::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Building_descriptor_;
  metadata.reflection = Building_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PaymentsToOrder::kPaymentIdFieldNumber;
const int PaymentsToOrder::kOrderIdFieldNumber;
const int PaymentsToOrder::kSumFieldNumber;
const int PaymentsToOrder::kSeqFieldNumber;
#endif  // !_MSC_VER

PaymentsToOrder::PaymentsToOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PaymentsToOrder::InitAsDefaultInstance() {
  sum_ = const_cast< ::Decimal*>(&::Decimal::default_instance());
}

PaymentsToOrder::PaymentsToOrder(const PaymentsToOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PaymentsToOrder::SharedCtor() {
  _cached_size_ = 0;
  payment_id_ = GOOGLE_LONGLONG(0);
  order_id_ = GOOGLE_LONGLONG(0);
  sum_ = NULL;
  seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PaymentsToOrder::~PaymentsToOrder() {
  SharedDtor();
}

void PaymentsToOrder::SharedDtor() {
  if (this != default_instance_) {
    delete sum_;
  }
}

void PaymentsToOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaymentsToOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaymentsToOrder_descriptor_;
}

const PaymentsToOrder& PaymentsToOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

PaymentsToOrder* PaymentsToOrder::default_instance_ = NULL;

PaymentsToOrder* PaymentsToOrder::New() const {
  return new PaymentsToOrder;
}

void PaymentsToOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    payment_id_ = GOOGLE_LONGLONG(0);
    order_id_ = GOOGLE_LONGLONG(0);
    if (has_sum()) {
      if (sum_ != NULL) sum_->::Decimal::Clear();
    }
    seq_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PaymentsToOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 payment_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &payment_id_)));
          set_has_payment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order_id;
        break;
      }
      
      // required int64 order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sum;
        break;
      }
      
      // optional .Decimal sum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }
      
      // required int64 seq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PaymentsToOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 payment_id = 1;
  if (has_payment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->payment_id(), output);
  }
  
  // required int64 order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->order_id(), output);
  }
  
  // optional .Decimal sum = 3;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sum(), output);
  }
  
  // required int64 seq = 4;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PaymentsToOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 payment_id = 1;
  if (has_payment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->payment_id(), target);
  }
  
  // required int64 order_id = 2;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->order_id(), target);
  }
  
  // optional .Decimal sum = 3;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sum(), target);
  }
  
  // required int64 seq = 4;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PaymentsToOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 payment_id = 1;
    if (has_payment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->payment_id());
    }
    
    // required int64 order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_id());
    }
    
    // optional .Decimal sum = 3;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sum());
    }
    
    // required int64 seq = 4;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaymentsToOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PaymentsToOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PaymentsToOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PaymentsToOrder::MergeFrom(const PaymentsToOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payment_id()) {
      set_payment_id(from.payment_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_sum()) {
      mutable_sum()->::Decimal::MergeFrom(from.sum());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PaymentsToOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentsToOrder::CopyFrom(const PaymentsToOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentsToOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void PaymentsToOrder::Swap(PaymentsToOrder* other) {
  if (other != this) {
    std::swap(payment_id_, other->payment_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(sum_, other->sum_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PaymentsToOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PaymentsToOrder_descriptor_;
  metadata.reflection = PaymentsToOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Decimal::kLoFieldNumber;
const int Decimal::kHiFieldNumber;
const int Decimal::kSignScaleFieldNumber;
#endif  // !_MSC_VER

Decimal::Decimal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Decimal::InitAsDefaultInstance() {
}

Decimal::Decimal(const Decimal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Decimal::SharedCtor() {
  _cached_size_ = 0;
  lo_ = GOOGLE_ULONGLONG(0);
  hi_ = 0u;
  signscale_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Decimal::~Decimal() {
  SharedDtor();
}

void Decimal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Decimal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Decimal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Decimal_descriptor_;
}

const Decimal& Decimal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Decimal* Decimal::default_instance_ = NULL;

Decimal* Decimal::New() const {
  return new Decimal;
}

void Decimal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lo_ = GOOGLE_ULONGLONG(0);
    hi_ = 0u;
    signscale_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Decimal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lo_)));
          set_has_lo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hi;
        break;
      }
      
      // optional uint32 hi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hi_)));
          set_has_hi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_signScale;
        break;
      }
      
      // optional uint32 signScale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signscale_)));
          set_has_signscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Decimal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 lo = 1;
  if (has_lo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lo(), output);
  }
  
  // optional uint32 hi = 2;
  if (has_hi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hi(), output);
  }
  
  // optional uint32 signScale = 3;
  if (has_signscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->signscale(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Decimal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 lo = 1;
  if (has_lo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lo(), target);
  }
  
  // optional uint32 hi = 2;
  if (has_hi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hi(), target);
  }
  
  // optional uint32 signScale = 3;
  if (has_signscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->signscale(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Decimal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lo = 1;
    if (has_lo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lo());
    }
    
    // optional uint32 hi = 2;
    if (has_hi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hi());
    }
    
    // optional uint32 signScale = 3;
    if (has_signscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signscale());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Decimal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Decimal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Decimal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Decimal::MergeFrom(const Decimal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lo()) {
      set_lo(from.lo());
    }
    if (from.has_hi()) {
      set_hi(from.hi());
    }
    if (from.has_signscale()) {
      set_signscale(from.signscale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Decimal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal::CopyFrom(const Decimal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  
  return true;
}

void Decimal::Swap(Decimal* other) {
  if (other != this) {
    std::swap(lo_, other->lo_);
    std::swap(hi_, other->hi_);
    std::swap(signscale_, other->signscale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Decimal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Decimal_descriptor_;
  metadata.reflection = Decimal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Interval::kStartFieldNumber;
const int Interval::kEndFieldNumber;
#endif  // !_MSC_VER

Interval::Interval()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Interval::InitAsDefaultInstance() {
}

Interval::Interval(const Interval& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Interval::SharedCtor() {
  _cached_size_ = 0;
  start_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Interval::~Interval() {
  SharedDtor();
}

void Interval::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Interval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Interval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Interval_descriptor_;
}

const Interval& Interval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Interval* Interval::default_instance_ = NULL;

Interval* Interval::New() const {
  return new Interval;
}

void Interval::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = GOOGLE_ULONGLONG(0);
    end_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Interval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }
      
      // optional uint64 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Interval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start(), output);
  }
  
  // optional uint64 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Interval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start(), target);
  }
  
  // optional uint64 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Interval::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }
    
    // optional uint64 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Interval::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Interval* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Interval*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Interval::MergeFrom(const Interval& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Interval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Interval::CopyFrom(const Interval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interval::IsInitialized() const {
  
  return true;
}

void Interval::Swap(Interval* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Interval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Interval_descriptor_;
  metadata.reflection = Interval_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Menu::kIdFieldNumber;
const int Menu::kRecurrenceFieldNumber;
const int Menu::kLogoFieldNumber;
const int Menu::kLogoSrcImageIdFieldNumber;
#endif  // !_MSC_VER

Menu::Menu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Menu::InitAsDefaultInstance() {
}

Menu::Menu(const Menu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Menu::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  recurrence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logo_src_image_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Menu::~Menu() {
  SharedDtor();
}

void Menu::SharedDtor() {
  if (recurrence_ != &::google::protobuf::internal::kEmptyString) {
    delete recurrence_;
  }
  if (logo_ != &::google::protobuf::internal::kEmptyString) {
    delete logo_;
  }
  if (this != default_instance_) {
  }
}

void Menu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Menu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Menu_descriptor_;
}

const Menu& Menu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Menu* Menu::default_instance_ = NULL;

Menu* Menu::New() const {
  return new Menu;
}

void Menu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_recurrence()) {
      if (recurrence_ != &::google::protobuf::internal::kEmptyString) {
        recurrence_->clear();
      }
    }
    if (has_logo()) {
      if (logo_ != &::google::protobuf::internal::kEmptyString) {
        logo_->clear();
      }
    }
    logo_src_image_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Menu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_recurrence;
        break;
      }
      
      // optional string recurrence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recurrence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recurrence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recurrence().data(), this->recurrence().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logo;
        break;
      }
      
      // optional string logo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logo().data(), this->logo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logo_src_image_id;
        break;
      }
      
      // optional int64 logo_src_image_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logo_src_image_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logo_src_image_id_)));
          set_has_logo_src_image_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Menu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string recurrence = 2;
  if (has_recurrence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recurrence().data(), this->recurrence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->recurrence(), output);
  }
  
  // optional string logo = 3;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logo().data(), this->logo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->logo(), output);
  }
  
  // optional int64 logo_src_image_id = 4;
  if (has_logo_src_image_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->logo_src_image_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Menu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string recurrence = 2;
  if (has_recurrence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recurrence().data(), this->recurrence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recurrence(), target);
  }
  
  // optional string logo = 3;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logo().data(), this->logo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->logo(), target);
  }
  
  // optional int64 logo_src_image_id = 4;
  if (has_logo_src_image_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->logo_src_image_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Menu::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string recurrence = 2;
    if (has_recurrence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recurrence());
    }
    
    // optional string logo = 3;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo());
    }
    
    // optional int64 logo_src_image_id = 4;
    if (has_logo_src_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logo_src_image_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Menu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Menu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Menu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Menu::MergeFrom(const Menu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_recurrence()) {
      set_recurrence(from.recurrence());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_logo_src_image_id()) {
      set_logo_src_image_id(from.logo_src_image_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Menu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Menu::CopyFrom(const Menu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Menu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Menu::Swap(Menu* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(recurrence_, other->recurrence_);
    std::swap(logo_, other->logo_);
    std::swap(logo_src_image_id_, other->logo_src_image_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Menu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Menu_descriptor_;
  metadata.reflection = Menu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceType::kIdFieldNumber;
#endif  // !_MSC_VER

PlaceType::PlaceType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceType::InitAsDefaultInstance() {
}

PlaceType::PlaceType(const PlaceType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceType::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceType::~PlaceType() {
  SharedDtor();
}

void PlaceType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceType_descriptor_;
}

const PlaceType& PlaceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

PlaceType* PlaceType::default_instance_ = NULL;

PlaceType* PlaceType::New() const {
  return new PlaceType;
}

void PlaceType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceType::MergeFrom(const PlaceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceType::CopyFrom(const PlaceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlaceType::Swap(PlaceType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceType_descriptor_;
  metadata.reflection = PlaceType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvoicesToContact::kContactIdFieldNumber;
const int InvoicesToContact::kInvoiceIdFieldNumber;
const int InvoicesToContact::kRoleFieldNumber;
#endif  // !_MSC_VER

InvoicesToContact::InvoicesToContact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvoicesToContact::InitAsDefaultInstance() {
}

InvoicesToContact::InvoicesToContact(const InvoicesToContact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvoicesToContact::SharedCtor() {
  _cached_size_ = 0;
  contact_id_ = GOOGLE_LONGLONG(0);
  invoice_id_ = GOOGLE_LONGLONG(0);
  role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvoicesToContact::~InvoicesToContact() {
  SharedDtor();
}

void InvoicesToContact::SharedDtor() {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (this != default_instance_) {
  }
}

void InvoicesToContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvoicesToContact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoicesToContact_descriptor_;
}

const InvoicesToContact& InvoicesToContact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

InvoicesToContact* InvoicesToContact::default_instance_ = NULL;

InvoicesToContact* InvoicesToContact::New() const {
  return new InvoicesToContact;
}

void InvoicesToContact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    contact_id_ = GOOGLE_LONGLONG(0);
    invoice_id_ = GOOGLE_LONGLONG(0);
    if (has_role()) {
      if (role_ != &::google::protobuf::internal::kEmptyString) {
        role_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvoicesToContact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 contact_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contact_id_)));
          set_has_contact_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invoice_id;
        break;
      }
      
      // required int64 invoice_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoice_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &invoice_id_)));
          set_has_invoice_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role;
        break;
      }
      
      // required string role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvoicesToContact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 contact_id = 1;
  if (has_contact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->contact_id(), output);
  }
  
  // required int64 invoice_id = 2;
  if (has_invoice_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->invoice_id(), output);
  }
  
  // required string role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvoicesToContact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 contact_id = 1;
  if (has_contact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->contact_id(), target);
  }
  
  // required int64 invoice_id = 2;
  if (has_invoice_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->invoice_id(), target);
  }
  
  // required string role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvoicesToContact::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 contact_id = 1;
    if (has_contact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contact_id());
    }
    
    // required int64 invoice_id = 2;
    if (has_invoice_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->invoice_id());
    }
    
    // required string role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvoicesToContact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvoicesToContact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvoicesToContact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvoicesToContact::MergeFrom(const InvoicesToContact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contact_id()) {
      set_contact_id(from.contact_id());
    }
    if (from.has_invoice_id()) {
      set_invoice_id(from.invoice_id());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvoicesToContact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoicesToContact::CopyFrom(const InvoicesToContact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoicesToContact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void InvoicesToContact::Swap(InvoicesToContact* other) {
  if (other != this) {
    std::swap(contact_id_, other->contact_id_);
    std::swap(invoice_id_, other->invoice_id_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvoicesToContact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvoicesToContact_descriptor_;
  metadata.reflection = InvoicesToContact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderEntry::kIdFieldNumber;
const int OrderEntry::kOrderIdFieldNumber;
const int OrderEntry::kOfferIdFieldNumber;
const int OrderEntry::kOfferEntryIdFieldNumber;
const int OrderEntry::kQtyFieldNumber;
#endif  // !_MSC_VER

OrderEntry::OrderEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderEntry::InitAsDefaultInstance() {
  qty_ = const_cast< ::Decimal*>(&::Decimal::default_instance());
}

OrderEntry::OrderEntry(const OrderEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderEntry::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  order_id_ = GOOGLE_LONGLONG(0);
  offer_id_ = GOOGLE_LONGLONG(0);
  offer_entry_id_ = GOOGLE_LONGLONG(0);
  qty_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderEntry::~OrderEntry() {
  SharedDtor();
}

void OrderEntry::SharedDtor() {
  if (this != default_instance_) {
    delete qty_;
  }
}

void OrderEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderEntry_descriptor_;
}

const OrderEntry& OrderEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

OrderEntry* OrderEntry::default_instance_ = NULL;

OrderEntry* OrderEntry::New() const {
  return new OrderEntry;
}

void OrderEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    order_id_ = GOOGLE_LONGLONG(0);
    offer_id_ = GOOGLE_LONGLONG(0);
    offer_entry_id_ = GOOGLE_LONGLONG(0);
    if (has_qty()) {
      if (qty_ != NULL) qty_->::Decimal::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order_id;
        break;
      }
      
      // optional int64 order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offer_id;
        break;
      }
      
      // optional int64 offer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offer_id_)));
          set_has_offer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offer_entry_id;
        break;
      }
      
      // optional int64 offer_entry_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offer_entry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offer_entry_id_)));
          set_has_offer_entry_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_qty;
        break;
      }
      
      // optional .Decimal qty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->order_id(), output);
  }
  
  // optional int64 offer_id = 3;
  if (has_offer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->offer_id(), output);
  }
  
  // optional int64 offer_entry_id = 4;
  if (has_offer_entry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->offer_entry_id(), output);
  }
  
  // optional .Decimal qty = 5;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->qty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 order_id = 2;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->order_id(), target);
  }
  
  // optional int64 offer_id = 3;
  if (has_offer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->offer_id(), target);
  }
  
  // optional int64 offer_entry_id = 4;
  if (has_offer_entry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->offer_entry_id(), target);
  }
  
  // optional .Decimal qty = 5;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->qty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_id());
    }
    
    // optional int64 offer_id = 3;
    if (has_offer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offer_id());
    }
    
    // optional int64 offer_entry_id = 4;
    if (has_offer_entry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offer_entry_id());
    }
    
    // optional .Decimal qty = 5;
    if (has_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderEntry::MergeFrom(const OrderEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_offer_id()) {
      set_offer_id(from.offer_id());
    }
    if (from.has_offer_entry_id()) {
      set_offer_entry_id(from.offer_entry_id());
    }
    if (from.has_qty()) {
      mutable_qty()->::Decimal::MergeFrom(from.qty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderEntry::CopyFrom(const OrderEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OrderEntry::Swap(OrderEntry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(order_id_, other->order_id_);
    std::swap(offer_id_, other->offer_id_);
    std::swap(offer_entry_id_, other->offer_entry_id_);
    std::swap(qty_, other->qty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderEntry_descriptor_;
  metadata.reflection = OrderEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Receipt::kIdFieldNumber;
const int Receipt::kEmitterIdFieldNumber;
const int Receipt::kDateFieldNumber;
const int Receipt::kSumFieldNumber;
const int Receipt::kEmissionDateFieldNumber;
#endif  // !_MSC_VER

Receipt::Receipt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Receipt::InitAsDefaultInstance() {
  sum_ = const_cast< ::Decimal*>(&::Decimal::default_instance());
}

Receipt::Receipt(const Receipt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Receipt::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  emitter_id_ = GOOGLE_LONGLONG(0);
  date_ = GOOGLE_LONGLONG(0);
  sum_ = NULL;
  emission_date_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Receipt::~Receipt() {
  SharedDtor();
}

void Receipt::SharedDtor() {
  if (this != default_instance_) {
    delete sum_;
  }
}

void Receipt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Receipt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Receipt_descriptor_;
}

const Receipt& Receipt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Receipt* Receipt::default_instance_ = NULL;

Receipt* Receipt::New() const {
  return new Receipt;
}

void Receipt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    emitter_id_ = GOOGLE_LONGLONG(0);
    date_ = GOOGLE_LONGLONG(0);
    if (has_sum()) {
      if (sum_ != NULL) sum_->::Decimal::Clear();
    }
    emission_date_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Receipt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_emitter_id;
        break;
      }
      
      // optional int64 emitter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emitter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &emitter_id_)));
          set_has_emitter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_date;
        break;
      }
      
      // optional int64 date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sum;
        break;
      }
      
      // optional .Decimal sum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_emission_date;
        break;
      }
      
      // optional int64 emission_date = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emission_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &emission_date_)));
          set_has_emission_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Receipt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 emitter_id = 2;
  if (has_emitter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->emitter_id(), output);
  }
  
  // optional int64 date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->date(), output);
  }
  
  // optional .Decimal sum = 4;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sum(), output);
  }
  
  // optional int64 emission_date = 5;
  if (has_emission_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->emission_date(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Receipt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 emitter_id = 2;
  if (has_emitter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->emitter_id(), target);
  }
  
  // optional int64 date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->date(), target);
  }
  
  // optional .Decimal sum = 4;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sum(), target);
  }
  
  // optional int64 emission_date = 5;
  if (has_emission_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->emission_date(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Receipt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 emitter_id = 2;
    if (has_emitter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->emitter_id());
    }
    
    // optional int64 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date());
    }
    
    // optional .Decimal sum = 4;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sum());
    }
    
    // optional int64 emission_date = 5;
    if (has_emission_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->emission_date());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Receipt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Receipt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Receipt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Receipt::MergeFrom(const Receipt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_emitter_id()) {
      set_emitter_id(from.emitter_id());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_sum()) {
      mutable_sum()->::Decimal::MergeFrom(from.sum());
    }
    if (from.has_emission_date()) {
      set_emission_date(from.emission_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Receipt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Receipt::CopyFrom(const Receipt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Receipt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Receipt::Swap(Receipt* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(emitter_id_, other->emitter_id_);
    std::swap(date_, other->date_);
    std::swap(sum_, other->sum_);
    std::swap(emission_date_, other->emission_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Receipt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Receipt_descriptor_;
  metadata.reflection = Receipt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactsToLegalEntity::kContactIdFieldNumber;
const int ContactsToLegalEntity::kRoleFieldNumber;
const int ContactsToLegalEntity::kLegalEntityIdFieldNumber;
#endif  // !_MSC_VER

ContactsToLegalEntity::ContactsToLegalEntity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactsToLegalEntity::InitAsDefaultInstance() {
}

ContactsToLegalEntity::ContactsToLegalEntity(const ContactsToLegalEntity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactsToLegalEntity::SharedCtor() {
  _cached_size_ = 0;
  contact_id_ = GOOGLE_LONGLONG(0);
  role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legal_entity_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactsToLegalEntity::~ContactsToLegalEntity() {
  SharedDtor();
}

void ContactsToLegalEntity::SharedDtor() {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (this != default_instance_) {
  }
}

void ContactsToLegalEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactsToLegalEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactsToLegalEntity_descriptor_;
}

const ContactsToLegalEntity& ContactsToLegalEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

ContactsToLegalEntity* ContactsToLegalEntity::default_instance_ = NULL;

ContactsToLegalEntity* ContactsToLegalEntity::New() const {
  return new ContactsToLegalEntity;
}

void ContactsToLegalEntity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    contact_id_ = GOOGLE_LONGLONG(0);
    if (has_role()) {
      if (role_ != &::google::protobuf::internal::kEmptyString) {
        role_->clear();
      }
    }
    legal_entity_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactsToLegalEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 contact_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contact_id_)));
          set_has_contact_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }
      
      // optional string role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_legal_entity_id;
        break;
      }
      
      // required int64 legal_entity_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_legal_entity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &legal_entity_id_)));
          set_has_legal_entity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactsToLegalEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 contact_id = 1;
  if (has_contact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->contact_id(), output);
  }
  
  // optional string role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role(), output);
  }
  
  // required int64 legal_entity_id = 3;
  if (has_legal_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->legal_entity_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactsToLegalEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 contact_id = 1;
  if (has_contact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->contact_id(), target);
  }
  
  // optional string role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role(), target);
  }
  
  // required int64 legal_entity_id = 3;
  if (has_legal_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->legal_entity_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactsToLegalEntity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 contact_id = 1;
    if (has_contact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contact_id());
    }
    
    // optional string role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }
    
    // required int64 legal_entity_id = 3;
    if (has_legal_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->legal_entity_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactsToLegalEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactsToLegalEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactsToLegalEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactsToLegalEntity::MergeFrom(const ContactsToLegalEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contact_id()) {
      set_contact_id(from.contact_id());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_legal_entity_id()) {
      set_legal_entity_id(from.legal_entity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactsToLegalEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactsToLegalEntity::CopyFrom(const ContactsToLegalEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactsToLegalEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void ContactsToLegalEntity::Swap(ContactsToLegalEntity* other) {
  if (other != this) {
    std::swap(contact_id_, other->contact_id_);
    std::swap(role_, other->role_);
    std::swap(legal_entity_id_, other->legal_entity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactsToLegalEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactsToLegalEntity_descriptor_;
  metadata.reflection = ContactsToLegalEntity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferOption::kIdFieldNumber;
const int OfferOption::kOfferIdFieldNumber;
#endif  // !_MSC_VER

OfferOption::OfferOption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfferOption::InitAsDefaultInstance() {
}

OfferOption::OfferOption(const OfferOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfferOption::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  offer_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferOption::~OfferOption() {
  SharedDtor();
}

void OfferOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfferOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferOption_descriptor_;
}

const OfferOption& OfferOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

OfferOption* OfferOption::default_instance_ = NULL;

OfferOption* OfferOption::New() const {
  return new OfferOption;
}

void OfferOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    offer_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offer_id;
        break;
      }
      
      // optional int64 offer_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offer_id_)));
          set_has_offer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfferOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 offer_id = 2;
  if (has_offer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offer_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfferOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 offer_id = 2;
  if (has_offer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offer_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfferOption::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 offer_id = 2;
    if (has_offer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offer_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferOption::MergeFrom(const OfferOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_offer_id()) {
      set_offer_id(from.offer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferOption::CopyFrom(const OfferOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OfferOption::Swap(OfferOption* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(offer_id_, other->offer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferOption_descriptor_;
  metadata.reflection = OfferOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client::kIdFieldNumber;
const int Client::kContactIdFieldNumber;
const int Client::kUserFieldNumber;
const int Client::kPassmd5FieldNumber;
#endif  // !_MSC_VER

Client::Client()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client::InitAsDefaultInstance() {
}

Client::Client(const Client& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  contact_id_ = GOOGLE_LONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client::~Client() {
  SharedDtor();
}

void Client::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passmd5_ != &::google::protobuf::internal::kEmptyString) {
    delete passmd5_;
  }
  if (this != default_instance_) {
  }
}

void Client::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client_descriptor_;
}

const Client& Client::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Client* Client::default_instance_ = NULL;

Client* Client::New() const {
  return new Client;
}

void Client::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    contact_id_ = GOOGLE_LONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passmd5()) {
      if (passmd5_ != &::google::protobuf::internal::kEmptyString) {
        passmd5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contact_id;
        break;
      }
      
      // optional int64 contact_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contact_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contact_id_)));
          set_has_contact_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }
      
      // optional string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_passmd5;
        break;
      }
      
      // optional string passmd5 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passmd5().data(), this->passmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 contact_id = 2;
  if (has_contact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->contact_id(), output);
  }
  
  // optional string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }
  
  // optional string passmd5 = 4;
  if (has_passmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passmd5().data(), this->passmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->passmd5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 contact_id = 2;
  if (has_contact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->contact_id(), target);
  }
  
  // optional string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }
  
  // optional string passmd5 = 4;
  if (has_passmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passmd5().data(), this->passmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passmd5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 contact_id = 2;
    if (has_contact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contact_id());
    }
    
    // optional string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // optional string passmd5 = 4;
    if (has_passmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passmd5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client::MergeFrom(const Client& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contact_id()) {
      set_contact_id(from.contact_id());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passmd5()) {
      set_passmd5(from.passmd5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client::CopyFrom(const Client& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Client::Swap(Client* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contact_id_, other->contact_id_);
    std::swap(user_, other->user_);
    std::swap(passmd5_, other->passmd5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client_descriptor_;
  metadata.reflection = Client_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Device::kIdFieldNumber;
const int Device::kUUIDFieldNumber;
const int Device::kTelFieldNumber;
const int Device::kReceivessmsFieldNumber;
#endif  // !_MSC_VER

Device::Device()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Device::InitAsDefaultInstance() {
}

Device::Device(const Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Device::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receivessms_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Device::~Device() {
  SharedDtor();
}

void Device::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    delete tel_;
  }
  if (this != default_instance_) {
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Device* Device::default_instance_ = NULL;

Device* Device::New() const {
  return new Device;
}

void Device::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_tel()) {
      if (tel_ != &::google::protobuf::internal::kEmptyString) {
        tel_->clear();
      }
    }
    receivessms_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UUID;
        break;
      }
      
      // optional string UUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tel;
        break;
      }
      
      // optional string tel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tel().data(), this->tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_receivessms;
        break;
      }
      
      // optional bool receivessms = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivessms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receivessms_)));
          set_has_receivessms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string UUID = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uuid(), output);
  }
  
  // optional string tel = 3;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tel(), output);
  }
  
  // optional bool receivessms = 4;
  if (has_receivessms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->receivessms(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string UUID = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }
  
  // optional string tel = 3;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tel(), target);
  }
  
  // optional bool receivessms = 4;
  if (has_receivessms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->receivessms(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Device::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string UUID = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // optional string tel = 3;
    if (has_tel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tel());
    }
    
    // optional bool receivessms = 4;
    if (has_receivessms()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_tel()) {
      set_tel(from.tel());
    }
    if (from.has_receivessms()) {
      set_receivessms(from.receivessms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Device::Swap(Device* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(uuid_, other->uuid_);
    std::swap(tel_, other->tel_);
    std::swap(receivessms_, other->receivessms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Payment::kIdFieldNumber;
const int Payment::kClientIdFieldNumber;
const int Payment::kSumFieldNumber;
const int Payment::kReceiptIdFieldNumber;
#endif  // !_MSC_VER

Payment::Payment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Payment::InitAsDefaultInstance() {
  sum_ = const_cast< ::Decimal*>(&::Decimal::default_instance());
}

Payment::Payment(const Payment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Payment::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  client_id_ = GOOGLE_LONGLONG(0);
  sum_ = NULL;
  receipt_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Payment::~Payment() {
  SharedDtor();
}

void Payment::SharedDtor() {
  if (this != default_instance_) {
    delete sum_;
  }
}

void Payment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Payment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Payment_descriptor_;
}

const Payment& Payment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Payment* Payment::default_instance_ = NULL;

Payment* Payment::New() const {
  return new Payment;
}

void Payment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    client_id_ = GOOGLE_LONGLONG(0);
    if (has_sum()) {
      if (sum_ != NULL) sum_->::Decimal::Clear();
    }
    receipt_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Payment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_id;
        break;
      }
      
      // optional int64 client_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sum;
        break;
      }
      
      // optional .Decimal sum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_receipt_id;
        break;
      }
      
      // optional int64 receipt_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receipt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receipt_id_)));
          set_has_receipt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Payment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 client_id = 2;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->client_id(), output);
  }
  
  // optional .Decimal sum = 3;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sum(), output);
  }
  
  // optional int64 receipt_id = 4;
  if (has_receipt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->receipt_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Payment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 client_id = 2;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->client_id(), target);
  }
  
  // optional .Decimal sum = 3;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sum(), target);
  }
  
  // optional int64 receipt_id = 4;
  if (has_receipt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->receipt_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Payment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 client_id = 2;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->client_id());
    }
    
    // optional .Decimal sum = 3;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sum());
    }
    
    // optional int64 receipt_id = 4;
    if (has_receipt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receipt_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Payment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Payment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Payment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Payment::MergeFrom(const Payment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_sum()) {
      mutable_sum()->::Decimal::MergeFrom(from.sum());
    }
    if (from.has_receipt_id()) {
      set_receipt_id(from.receipt_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Payment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payment::CopyFrom(const Payment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Payment::Swap(Payment* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(client_id_, other->client_id_);
    std::swap(sum_, other->sum_);
    std::swap(receipt_id_, other->receipt_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Payment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Payment_descriptor_;
  metadata.reflection = Payment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RestaurantsToContact::kRestaurantIdFieldNumber;
const int RestaurantsToContact::kContactIdFieldNumber;
const int RestaurantsToContact::kPositionFieldNumber;
const int RestaurantsToContact::kCanDeliverFieldNumber;
#endif  // !_MSC_VER

RestaurantsToContact::RestaurantsToContact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RestaurantsToContact::InitAsDefaultInstance() {
}

RestaurantsToContact::RestaurantsToContact(const RestaurantsToContact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RestaurantsToContact::SharedCtor() {
  _cached_size_ = 0;
  restaurant_id_ = GOOGLE_LONGLONG(0);
  contact_id_ = GOOGLE_LONGLONG(0);
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  can_deliver_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestaurantsToContact::~RestaurantsToContact() {
  SharedDtor();
}

void RestaurantsToContact::SharedDtor() {
  if (position_ != &::google::protobuf::internal::kEmptyString) {
    delete position_;
  }
  if (this != default_instance_) {
  }
}

void RestaurantsToContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestaurantsToContact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestaurantsToContact_descriptor_;
}

const RestaurantsToContact& RestaurantsToContact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

RestaurantsToContact* RestaurantsToContact::default_instance_ = NULL;

RestaurantsToContact* RestaurantsToContact::New() const {
  return new RestaurantsToContact;
}

void RestaurantsToContact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    restaurant_id_ = GOOGLE_LONGLONG(0);
    contact_id_ = GOOGLE_LONGLONG(0);
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::kEmptyString) {
        position_->clear();
      }
    }
    can_deliver_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestaurantsToContact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 restaurant_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &restaurant_id_)));
          set_has_restaurant_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contact_id;
        break;
      }
      
      // required int64 contact_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contact_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contact_id_)));
          set_has_contact_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }
      
      // required string position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_can_deliver;
        break;
      }
      
      // optional bool can_deliver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_deliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_deliver_)));
          set_has_can_deliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RestaurantsToContact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 restaurant_id = 1;
  if (has_restaurant_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->restaurant_id(), output);
  }
  
  // required int64 contact_id = 2;
  if (has_contact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->contact_id(), output);
  }
  
  // required string position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->position(), output);
  }
  
  // optional bool can_deliver = 4;
  if (has_can_deliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->can_deliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RestaurantsToContact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 restaurant_id = 1;
  if (has_restaurant_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->restaurant_id(), target);
  }
  
  // required int64 contact_id = 2;
  if (has_contact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->contact_id(), target);
  }
  
  // required string position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->position(), target);
  }
  
  // optional bool can_deliver = 4;
  if (has_can_deliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->can_deliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RestaurantsToContact::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 restaurant_id = 1;
    if (has_restaurant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->restaurant_id());
    }
    
    // required int64 contact_id = 2;
    if (has_contact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contact_id());
    }
    
    // required string position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }
    
    // optional bool can_deliver = 4;
    if (has_can_deliver()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestaurantsToContact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestaurantsToContact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RestaurantsToContact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestaurantsToContact::MergeFrom(const RestaurantsToContact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_restaurant_id()) {
      set_restaurant_id(from.restaurant_id());
    }
    if (from.has_contact_id()) {
      set_contact_id(from.contact_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_can_deliver()) {
      set_can_deliver(from.can_deliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestaurantsToContact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestaurantsToContact::CopyFrom(const RestaurantsToContact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestaurantsToContact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RestaurantsToContact::Swap(RestaurantsToContact* other) {
  if (other != this) {
    std::swap(restaurant_id_, other->restaurant_id_);
    std::swap(contact_id_, other->contact_id_);
    std::swap(position_, other->position_);
    std::swap(can_deliver_, other->can_deliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RestaurantsToContact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RestaurantsToContact_descriptor_;
  metadata.reflection = RestaurantsToContact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MenuEntry::kIdFieldNumber;
const int MenuEntry::kMenuIdFieldNumber;
const int MenuEntry::kNameFieldNumber;
const int MenuEntry::kMainIngredientIdFieldNumber;
const int MenuEntry::kOptionForFieldNumber;
const int MenuEntry::kOptionMaxQtyFieldNumber;
#endif  // !_MSC_VER

MenuEntry::MenuEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MenuEntry::InitAsDefaultInstance() {
}

MenuEntry::MenuEntry(const MenuEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MenuEntry::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  menu_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  main_ingredient_id_ = GOOGLE_LONGLONG(0);
  option_for_ = GOOGLE_LONGLONG(0);
  option_max_qty_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MenuEntry::~MenuEntry() {
  SharedDtor();
}

void MenuEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MenuEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MenuEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuEntry_descriptor_;
}

const MenuEntry& MenuEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

MenuEntry* MenuEntry::default_instance_ = NULL;

MenuEntry* MenuEntry::New() const {
  return new MenuEntry;
}

void MenuEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    menu_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    main_ingredient_id_ = GOOGLE_LONGLONG(0);
    option_for_ = GOOGLE_LONGLONG(0);
    option_max_qty_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MenuEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_menu_id;
        break;
      }
      
      // optional int64 menu_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_menu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &menu_id_)));
          set_has_menu_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_main_ingredient_id;
        break;
      }
      
      // optional int64 main_ingredient_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_ingredient_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &main_ingredient_id_)));
          set_has_main_ingredient_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_option_for;
        break;
      }
      
      // optional int64 option_for = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_option_for:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &option_for_)));
          set_has_option_for();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_option_max_qty;
        break;
      }
      
      // optional int64 option_max_qty = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_option_max_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &option_max_qty_)));
          set_has_option_max_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MenuEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 menu_id = 2;
  if (has_menu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->menu_id(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int64 main_ingredient_id = 4;
  if (has_main_ingredient_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->main_ingredient_id(), output);
  }
  
  // optional int64 option_for = 5;
  if (has_option_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->option_for(), output);
  }
  
  // optional int64 option_max_qty = 6;
  if (has_option_max_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->option_max_qty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MenuEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 menu_id = 2;
  if (has_menu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->menu_id(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int64 main_ingredient_id = 4;
  if (has_main_ingredient_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->main_ingredient_id(), target);
  }
  
  // optional int64 option_for = 5;
  if (has_option_for()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->option_for(), target);
  }
  
  // optional int64 option_max_qty = 6;
  if (has_option_max_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->option_max_qty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MenuEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 menu_id = 2;
    if (has_menu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->menu_id());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 main_ingredient_id = 4;
    if (has_main_ingredient_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->main_ingredient_id());
    }
    
    // optional int64 option_for = 5;
    if (has_option_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->option_for());
    }
    
    // optional int64 option_max_qty = 6;
    if (has_option_max_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->option_max_qty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MenuEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MenuEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MenuEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MenuEntry::MergeFrom(const MenuEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_menu_id()) {
      set_menu_id(from.menu_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_main_ingredient_id()) {
      set_main_ingredient_id(from.main_ingredient_id());
    }
    if (from.has_option_for()) {
      set_option_for(from.option_for());
    }
    if (from.has_option_max_qty()) {
      set_option_max_qty(from.option_max_qty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MenuEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuEntry::CopyFrom(const MenuEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MenuEntry::Swap(MenuEntry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(menu_id_, other->menu_id_);
    std::swap(name_, other->name_);
    std::swap(main_ingredient_id_, other->main_ingredient_id_);
    std::swap(option_for_, other->option_for_);
    std::swap(option_max_qty_, other->option_max_qty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MenuEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MenuEntry_descriptor_;
  metadata.reflection = MenuEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Restaurant::kIdFieldNumber;
const int Restaurant::kNameFieldNumber;
const int Restaurant::kAddressIdFieldNumber;
const int Restaurant::kLegalEntityIdFieldNumber;
const int Restaurant::kCustomerTelephoneNumberFieldNumber;
const int Restaurant::kCustomerContactIdFieldNumber;
const int Restaurant::kLogoFieldNumber;
const int Restaurant::kLogoSrcImageIdFieldNumber;
#endif  // !_MSC_VER

Restaurant::Restaurant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Restaurant::InitAsDefaultInstance() {
  customer_telephone_number_ = const_cast< ::Decimal*>(&::Decimal::default_instance());
}

Restaurant::Restaurant(const Restaurant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Restaurant::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_id_ = GOOGLE_LONGLONG(0);
  legal_entity_id_ = GOOGLE_LONGLONG(0);
  customer_telephone_number_ = NULL;
  customer_contact_id_ = GOOGLE_LONGLONG(0);
  logo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logo_src_image_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Restaurant::~Restaurant() {
  SharedDtor();
}

void Restaurant::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (logo_ != &::google::protobuf::internal::kEmptyString) {
    delete logo_;
  }
  if (this != default_instance_) {
    delete customer_telephone_number_;
  }
}

void Restaurant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Restaurant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Restaurant_descriptor_;
}

const Restaurant& Restaurant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_2fmodel_2eproto();  return *default_instance_;
}

Restaurant* Restaurant::default_instance_ = NULL;

Restaurant* Restaurant::New() const {
  return new Restaurant;
}

void Restaurant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    address_id_ = GOOGLE_LONGLONG(0);
    legal_entity_id_ = GOOGLE_LONGLONG(0);
    if (has_customer_telephone_number()) {
      if (customer_telephone_number_ != NULL) customer_telephone_number_->::Decimal::Clear();
    }
    customer_contact_id_ = GOOGLE_LONGLONG(0);
    if (has_logo()) {
      if (logo_ != &::google::protobuf::internal::kEmptyString) {
        logo_->clear();
      }
    }
    logo_src_image_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Restaurant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_address_id;
        break;
      }
      
      // optional int64 address_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &address_id_)));
          set_has_address_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_legal_entity_id;
        break;
      }
      
      // optional int64 legal_entity_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_legal_entity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &legal_entity_id_)));
          set_has_legal_entity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_customer_telephone_number;
        break;
      }
      
      // optional .Decimal customer_telephone_number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_telephone_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customer_telephone_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_customer_contact_id;
        break;
      }
      
      // optional int64 customer_contact_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_customer_contact_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &customer_contact_id_)));
          set_has_customer_contact_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_logo;
        break;
      }
      
      // optional string logo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logo().data(), this->logo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_logo_src_image_id;
        break;
      }
      
      // optional int64 logo_src_image_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logo_src_image_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logo_src_image_id_)));
          set_has_logo_src_image_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Restaurant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int64 address_id = 3;
  if (has_address_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->address_id(), output);
  }
  
  // optional int64 legal_entity_id = 4;
  if (has_legal_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->legal_entity_id(), output);
  }
  
  // optional .Decimal customer_telephone_number = 5;
  if (has_customer_telephone_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->customer_telephone_number(), output);
  }
  
  // optional int64 customer_contact_id = 6;
  if (has_customer_contact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->customer_contact_id(), output);
  }
  
  // optional string logo = 7;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logo().data(), this->logo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->logo(), output);
  }
  
  // optional int64 logo_src_image_id = 8;
  if (has_logo_src_image_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->logo_src_image_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Restaurant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int64 address_id = 3;
  if (has_address_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->address_id(), target);
  }
  
  // optional int64 legal_entity_id = 4;
  if (has_legal_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->legal_entity_id(), target);
  }
  
  // optional .Decimal customer_telephone_number = 5;
  if (has_customer_telephone_number()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->customer_telephone_number(), target);
  }
  
  // optional int64 customer_contact_id = 6;
  if (has_customer_contact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->customer_contact_id(), target);
  }
  
  // optional string logo = 7;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logo().data(), this->logo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->logo(), target);
  }
  
  // optional int64 logo_src_image_id = 8;
  if (has_logo_src_image_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->logo_src_image_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Restaurant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 address_id = 3;
    if (has_address_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->address_id());
    }
    
    // optional int64 legal_entity_id = 4;
    if (has_legal_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->legal_entity_id());
    }
    
    // optional .Decimal customer_telephone_number = 5;
    if (has_customer_telephone_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->customer_telephone_number());
    }
    
    // optional int64 customer_contact_id = 6;
    if (has_customer_contact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->customer_contact_id());
    }
    
    // optional string logo = 7;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo());
    }
    
    // optional int64 logo_src_image_id = 8;
    if (has_logo_src_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logo_src_image_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Restaurant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Restaurant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Restaurant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Restaurant::MergeFrom(const Restaurant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_address_id()) {
      set_address_id(from.address_id());
    }
    if (from.has_legal_entity_id()) {
      set_legal_entity_id(from.legal_entity_id());
    }
    if (from.has_customer_telephone_number()) {
      mutable_customer_telephone_number()->::Decimal::MergeFrom(from.customer_telephone_number());
    }
    if (from.has_customer_contact_id()) {
      set_customer_contact_id(from.customer_contact_id());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_logo_src_image_id()) {
      set_logo_src_image_id(from.logo_src_image_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Restaurant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Restaurant::CopyFrom(const Restaurant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Restaurant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Restaurant::Swap(Restaurant* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(address_id_, other->address_id_);
    std::swap(legal_entity_id_, other->legal_entity_id_);
    std::swap(customer_telephone_number_, other->customer_telephone_number_);
    std::swap(customer_contact_id_, other->customer_contact_id_);
    std::swap(logo_, other->logo_);
    std::swap(logo_src_image_id_, other->logo_src_image_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Restaurant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Restaurant_descriptor_;
  metadata.reflection = Restaurant_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
